{
	"name": "PirkleFilters",
	"manifest": "biquads.cmajorpatch",
	"files": [
		{
			"name": "biquads.cmajorpatch",
			"type": "file",
			"binary": false,
			"content": "{\n    \"CmajorVersion\":    1,\n    \"ID\":               \"com.OliLarkin.pirklebiquads\",\n    \"version\":          \"1.0\",\n    \"name\":             \"biquads\",\n    \"description\":      \"biquads by will pirkle\",\n    \"category\":         \"generator\",\n    \"manufacturer\":     \"Oli Larkin\",\n    \"isInstrument\":     true,\n\n    \"source\":           \"biquads.cmajor\"\n}\n",
			"id": "9zzjIliLwMoD5BsB",
			"mime": null
		},
		{
			"name": "LICENSE",
			"type": "file",
			"binary": null,
			"content": "MIT License\n\nby Oli Larkin (with permission from Will Pirkle)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
			"id": "XCYUBUhFfscNNGXi",
			"mime": null
		},
		{
			"name": "vafilters.cmajorpatch",
			"type": "file",
			"binary": false,
			"content": "{\n    \"CmajorVersion\":    1,\n    \"ID\":               \"com.OliLarkin.pirklevafilters\",\n    \"version\":          \"1.0\",\n    \"name\":             \"vafilters\",\n    \"description\":      \"vafilters by will pirkle\",\n    \"category\":         \"generator\",\n    \"manufacturer\":     \"Oli Larkin\",\n    \"isInstrument\":     true,\n\n    \"source\":           \"vafilters.cmajor\"\n}\n",
			"id": "apZHZ0BlELabPjPI",
			"mime": null
		},
		{
			"name": "docs",
			"type": "directory",
			"children": [
				{
					"name": "index.html",
					"type": "file",
					"binary": false,
					"content": "<!DOCTYPE html><html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <title>Cmajor Patch</title>\n</head>\n\n<body>\n  <div id=\"cmaj-outer-container\">\n    <div id=\"cmaj-inner-container\">\n      <button id=\"cmaj-start-button\">Click to Start</button>\n    </div>\n  </div>\n</body>\n\n<style>\n    * { box-sizing: border-box; padding: 0; margin: 0; border: 0; }\n    html { background: black; overflow: hidden; }\n    body { padding: 0.5rem; display: block; position: absolute; width: 100%; height: 100%; }\n    #cmaj-outer-container { display: block; position: relative; width: 100%; height: 100%; overflow: auto; }\n    #cmaj-inner-container { display: block; position: relative; width: 100%; height: 100%; overflow: visible; transform-origin: 0% 0%; }\n    #cmaj-start-button { border: none; background-color: transparent; color: white; width: 100%; height: 100%; }\n</style>\n\n<script type=\"module\">\n\nimport * as patch from \"./vafilters.js\"\nimport { createPatchView, scalePatchViewToFit } from \"./cmaj_api/cmaj-patch-view.js\"\n\n//==============================================================================\ndocument.getElementById (\"cmaj-start-button\").onclick = async function()\n{\n    const audioContext = new AudioContext();\n\n    const { node, connection }\n        = await patch.createAudioWorkletNodePatchConnection (audioContext, \"cmaj-worklet-processor\");\n\n    await patch.connectPatchToDefaultAudioAndMIDI (node, connection, audioContext);\n\n    const view = await createPatchView (connection);\n\n    if (view)\n    {\n        const outer = document.getElementById (\"cmaj-outer-container\");\n        const inner = document.getElementById (\"cmaj-inner-container\");\n\n        inner.innerHTML = \"\";\n        inner.appendChild (view);\n\n        const resizeObserver = new ResizeObserver (() => scalePatchViewToFit (view, inner, outer));\n        resizeObserver.observe (outer);\n\n        scalePatchViewToFit (view, inner, outer);\n    }\n}\n\n</script>\n</html>\n",
					"id": "KVqFOScPWQlHZR1n",
					"mime": "text/html"
				},
				{
					"name": "cmaj_api",
					"type": "directory",
					"children": [
						{
							"name": "cmaj_audio_worklet_helper.js",
							"type": "file",
							"binary": false,
							"content": "\nimport { PatchConnection } from \"./cmaj-patch-connection.js\"\n\n//==============================================================================\n// N.B. code will be serialised to a string, so all `registerWorkletProcessor`s\n// dependencies must be self contained and not capture things in the outer scope\nasync function serialiseWorkletProcessorFactoryToDataURI (WrapperClass, workletName)\n{\n    const serialisedInvocation = `(${registerWorkletProcessor.toString()}) (\"${workletName}\", ${WrapperClass.toString()});`\n\n    let reader = new FileReader();\n    reader.readAsDataURL (new Blob ([serialisedInvocation], { type: \"text/javascript\" }));\n\n    return await new Promise (res => { reader.onloadend = () => res (reader.result); });\n}\n\nfunction registerWorkletProcessor (workletName, WrapperClass)\n{\n    function makeConsumeOutputEvents ({ wrapper, eventOutputs, dispatchOutputEvent })\n    {\n        const outputEventHandlers = eventOutputs.map (({ endpointID }) =>\n        {\n            const readCount = wrapper[`getOutputEventCount_${endpointID}`]?.bind (wrapper);\n            const reset = wrapper[`resetOutputEventCount_${endpointID}`]?.bind (wrapper);\n            const readEventAtIndex = wrapper[`getOutputEvent_${endpointID}`]?.bind (wrapper);\n\n            return () =>\n            {\n                const count = readCount();\n                for (let i = 0; i < count; ++i)\n                    dispatchOutputEvent (endpointID, readEventAtIndex (i));\n\n                reset();\n            };\n        });\n\n        return () => outputEventHandlers.forEach ((consume) => consume() );\n    }\n\n    function setInitialParameterValues (parametersMap)\n    {\n        for (const { initialise } of Object.values (parametersMap))\n            initialise();\n    }\n\n    function makeEndpointMap (wrapper, endpoints, initialValueOverrides)\n    {\n        const toKey = ({ endpointType, endpointID }) =>\n        {\n            switch (endpointType)\n            {\n                case \"event\": return `sendInputEvent_${endpointID}`;\n                case \"value\": return `setInputValue_${endpointID}`;\n            }\n\n            throw \"Unhandled endpoint type\";\n        };\n\n        const lookup = {};\n        for (const { endpointID, endpointType, annotation, purpose } of endpoints)\n        {\n            const key = toKey ({ endpointType, endpointID });\n            const wrapperUpdate = wrapper[key]?.bind (wrapper);\n\n            const snapAndConstrainValue = (value) =>\n            {\n                if (annotation.step != null)\n                    value = Math.round (value / annotation.step) * annotation.step;\n\n                if (annotation.min != null && annotation.max != null)\n                    value = Math.min (Math.max (value, annotation.min), annotation.max);\n\n                return value;\n            };\n\n            const update = (value, rampFrames) =>\n            {\n                // N.B. value clamping and rampFrames from annotations not currently applied\n                const entry = lookup[endpointID];\n                entry.cachedValue = value;\n                wrapperUpdate (value, rampFrames);\n            };\n\n            if (update)\n            {\n                const initialValue = initialValueOverrides[endpointID] ?? annotation?.init;\n\n                lookup[endpointID] = {\n                    snapAndConstrainValue,\n                    update,\n                    initialise: initialValue != null ? () => update (initialValue) : () => {},\n                    purpose,\n                    cachedValue: undefined,\n                };\n            }\n        }\n\n        return lookup;\n    }\n\n    function makeStreamEndpointHandler ({ wrapper, toEndpoints, wrapperMethodNamePrefix })\n    {\n        const endpoints = toEndpoints (wrapper);\n        if (endpoints.length === 0)\n            return () => {};\n\n        // N.B. we just take the first for now (and do the same when creating the node).\n        // we can do better, and should probably align with something similar to what the patch player does\n        const first = endpoints[0];\n        const handleFrames = wrapper[`${wrapperMethodNamePrefix}_${first.endpointID}`]?.bind (wrapper);\n        if (! handleFrames)\n            return () => {};\n\n        return (channels, blockSize) => handleFrames (channels, blockSize);\n    }\n\n    function makeInputStreamEndpointHandler (wrapper)\n    {\n        return makeStreamEndpointHandler ({\n            wrapper,\n            toEndpoints: wrapper => wrapper.getInputEndpoints().filter (({ purpose }) => purpose === \"audio in\"),\n            wrapperMethodNamePrefix: \"setInputStreamFrames\",\n        });\n    }\n\n    function makeOutputStreamEndpointHandler (wrapper)\n    {\n        return makeStreamEndpointHandler ({\n            wrapper,\n            toEndpoints: wrapper => wrapper.getOutputEndpoints().filter (({ purpose }) => purpose === \"audio out\"),\n            wrapperMethodNamePrefix: \"getOutputFrames\",\n        });\n    }\n\n    class WorkletProcessor extends AudioWorkletProcessor\n    {\n        static get parameterDescriptors()\n        {\n            return [];\n        }\n\n        constructor ({ processorOptions, ...options })\n        {\n            super (options);\n\n            this.processImpl = undefined;\n            this.consumeOutputEvents = undefined;\n\n            const { sessionID = Date.now() & 0x7fffffff, initialValueOverrides = {} } = processorOptions;\n\n            const wrapper = new WrapperClass();\n\n            wrapper.initialise (sessionID, sampleRate)\n                .then (() => this.initialisePatch (wrapper, initialValueOverrides))\n                .catch (error => { throw new Error (error)});\n        }\n\n        process (inputs, outputs)\n        {\n            const input = inputs[0];\n            const output = outputs[0];\n\n            this.processImpl?.(input, output);\n            this.consumeOutputEvents?.();\n\n            return true;\n        }\n\n        sendPatchMessage (payload)\n        {\n            this.port.postMessage ({ type: \"patch\", payload });\n        }\n\n        sendParameterValueChanged (endpointID, value)\n        {\n            this.sendPatchMessage ({\n                type: \"param_value\",\n                message: { endpointID, value }\n            });\n        }\n\n        initialisePatch (wrapper, initialValueOverrides)\n        {\n            try\n            {\n                const inputParameters = wrapper.getInputEndpoints().filter (({ purpose }) => purpose === \"parameter\");\n                const parametersMap = makeEndpointMap (wrapper, inputParameters, initialValueOverrides);\n\n                setInitialParameterValues (parametersMap);\n\n                const toParameterValuesWithKey = (endpointKey, parametersMap) =>\n                {\n                    const toValue = ([endpoint, { cachedValue }]) => ({ [endpointKey]: endpoint, value: cachedValue });\n                    return Object.entries (parametersMap).map (toValue);\n                };\n\n                const initialValues = toParameterValuesWithKey (\"endpointID\", parametersMap);\n                const initialState = wrapper.getState();\n\n                const resetState = () =>\n                {\n                    wrapper.restoreState (initialState);\n\n                    // N.B. update cache used for `req_param_value` messages (we don't currently read from the wasm heap)\n                    setInitialParameterValues (parametersMap);\n                };\n\n                const isNonAudioOrParameterEndpoint = ({ purpose }) => ! [\"audio in\", \"parameter\"].includes (purpose);\n                const otherInputs = wrapper.getInputEndpoints().filter (isNonAudioOrParameterEndpoint);\n                const otherInputEndpointsMap = makeEndpointMap (wrapper, otherInputs, initialValueOverrides);\n\n                const isEvent = ({ endpointType }) => endpointType === \"event\";\n                const eventInputs = wrapper.getInputEndpoints().filter (isEvent);\n                const eventOutputs = wrapper.getOutputEndpoints().filter (isEvent);\n\n                const makeEndpointListenerMap = (eventEndpoints) =>\n                {\n                    const listeners = {};\n\n                    for (const { endpointID } of eventEndpoints)\n                        listeners[endpointID] = [];\n\n                    return listeners;\n                };\n\n                const inputEventListeners = makeEndpointListenerMap (eventInputs);\n                const outputEventListeners = makeEndpointListenerMap (eventOutputs);\n\n                this.consumeOutputEvents = makeConsumeOutputEvents ({\n                    eventOutputs,\n                    wrapper,\n                    dispatchOutputEvent: (endpointID, event) =>\n                    {\n                        for (const { replyType } of outputEventListeners[endpointID] ?? [])\n                        {\n                            this.sendPatchMessage ({\n                                type: replyType,\n                                message: event.event, // N.B. chucking away frame and typeIndex info for now\n                            });\n                        }\n                    },\n                });\n\n                const blockSize = 128;\n                const prepareInputFrames = makeInputStreamEndpointHandler (wrapper);\n                const processOutputFrames = makeOutputStreamEndpointHandler (wrapper);\n\n                this.processImpl = (input, output) =>\n                {\n                    prepareInputFrames (input, blockSize);\n                    wrapper.advance (blockSize);\n                    processOutputFrames (output, blockSize);\n                };\n\n                // N.B. the message port makes things straightforward, but it allocates (when sending + receiving).\n                // so, we aren't doing ourselves any favours. we probably ought to marshal raw bytes over to the gui in\n                // a pre-allocated lock-free message queue (using `SharedArrayBuffer` + `Atomic`s) and transform the raw\n                // messages there.\n                this.port.addEventListener (\"message\", e =>\n                {\n                    if (e.data.type !== \"patch\")\n                        return;\n\n                    const msg = e.data.payload;\n\n                    switch (msg.type)\n                    {\n                        case \"req_status\":\n                        {\n                            this.sendPatchMessage ({\n                                type: \"status\",\n                                message: {\n                                    details: {\n                                        inputs: wrapper.getInputEndpoints(),\n                                        outputs: wrapper.getOutputEndpoints(),\n                                    },\n                                    sampleRate,\n                                },\n                            });\n                            break;\n                        }\n\n                        case \"req_reset\":\n                        {\n                            resetState();\n                            initialValues.forEach (v => this.sendParameterValueChanged (v.endpointID, v.value));\n                            break;\n                        }\n\n                        case \"req_param_value\":\n                        {\n                            // N.B. keep a local cache here so that we can send the values back when requested.\n                            // we could instead have accessors into the wasm heap.\n                            const endpointID = msg.id;\n                            const parameter = parametersMap[endpointID];\n                            if (! parameter)\n                                return;\n\n                            const value = parameter.cachedValue;\n                            this.sendParameterValueChanged (endpointID, value);\n                            break;\n                        }\n\n                        case \"send_value\":\n                        {\n                            const endpointID = msg.id;\n                            const parameter = parametersMap[endpointID];\n\n                            if (parameter)\n                            {\n                                const newValue = parameter.snapAndConstrainValue (msg.value);\n                                parameter.update (newValue, msg.rampFrames);\n\n                                this.sendParameterValueChanged (endpointID, newValue);\n                                return;\n                            }\n\n                            const inputEndpoint = otherInputEndpointsMap[endpointID];\n\n                            if (inputEndpoint)\n                            {\n                                inputEndpoint.update (msg.value);\n\n                                for (const { replyType } of inputEventListeners[endpointID] ?? [])\n                                {\n                                    this.sendPatchMessage ({\n                                        type: replyType,\n                                        message: inputEndpoint.cachedValue,\n                                    });\n                                }\n                            }\n                            break;\n                        }\n\n                        case \"send_gesture_start\": break;\n                        case \"send_gesture_end\": break;\n\n                        case \"req_full_state\":\n                            this.sendPatchMessage ({\n                                type: msg?.replyType,\n                                message: {\n                                    parameters: toParameterValuesWithKey (\"name\", parametersMap),\n                                },\n                            });\n                            break;\n\n                        case \"send_full_state\":\n                        {\n                            const { parameters = [] } = e.data.payload?.value || [];\n\n                            for (const [endpointID, parameter] of Object.entries (parametersMap))\n                            {\n                                const namedNextValue = parameters.find (({ name }) => name === endpointID);\n\n                                if (namedNextValue)\n                                    parameter.update (namedNextValue.value);\n                                else\n                                    parameter.initialise();\n\n                                this.sendParameterValueChanged (endpointID, parameter.cachedValue);\n                            }\n                            break;\n                        }\n\n                        case \"add_endpoint_listener\":\n                        {\n                            const insertIfValidEndpoint = (lookup, msg) =>\n                            {\n                                const endpointID = msg?.endpoint;\n                                const listeners = lookup[endpointID]\n\n                                if (! listeners)\n                                    return false;\n\n                                return listeners.push ({ replyType: msg?.replyType }) > 0;\n                            };\n\n                            if (! insertIfValidEndpoint (inputEventListeners, msg))\n                                insertIfValidEndpoint (outputEventListeners, msg)\n\n                            break;\n                        }\n\n                        case \"remove_endpoint_listener\":\n                        {\n                            const removeIfValidReplyType = (lookup, msg) =>\n                            {\n                                const endpointID = msg?.endpoint;\n                                const listeners = lookup[endpointID];\n\n                                if (! listeners)\n                                    return false;\n\n                                const index = listeners.indexOf (msg?.replyType);\n\n                                if (index === -1)\n                                    return false;\n\n                                return listeners.splice (index, 1).length === 1;\n                            };\n\n                            if (! removeIfValidReplyType (inputEventListeners, msg))\n                                removeIfValidReplyType (outputEventListeners, msg)\n\n                            break;\n                        }\n\n                        default:\n                            break;\n                    }\n                });\n\n                this.port.postMessage ({ type: \"initialised\" });\n                this.port.start();\n            }\n            catch (e)\n            {\n                this.port.postMessage (e.toString());\n            }\n        }\n    }\n\n    registerProcessor (workletName, WorkletProcessor);\n}\n\n//==============================================================================\n/**  Creates an AudioWorkletNode that contains the\n *\n *   @param {Object} WrapperClass - the generated Cmajor class\n *   @param {AudioContext} audioContext - a web audio AudioContext object\n *   @param {string} workletName - the name to give the new worklet that is created\n *   @param {number} sessionID - an integer to use for the session ID\n *   @param {Array} patchInputList - a list of the input endpoints that the patch provides\n *   @param {Object} initialValueOverrides - optional initial values for parameter endpoints\n */\nexport async function createAudioWorkletNode (WrapperClass,\n                                              audioContext,\n                                              workletName,\n                                              sessionID,\n                                              initialValueOverrides)\n{\n    const dataURI = await serialiseWorkletProcessorFactoryToDataURI (WrapperClass, workletName);\n    await audioContext.audioWorklet.addModule (dataURI);\n\n    const audioInputEndpoints  = WrapperClass.prototype.getInputEndpoints().filter (({ purpose }) => purpose === \"audio in\");\n    const audioOutputEndpoints = WrapperClass.prototype.getOutputEndpoints().filter (({ purpose }) => purpose === \"audio out\");\n\n    // N.B. we just take the first for now (and do the same in the processor too).\n    // we can do better, and should probably align with something similar to what the patch player does\n    const pickFirstEndpointChannelCount = (endpoints) => endpoints.length ? endpoints[0].numAudioChannels : 0;\n\n    const inputChannelCount = pickFirstEndpointChannelCount (audioInputEndpoints);\n    const outputChannelCount = pickFirstEndpointChannelCount (audioOutputEndpoints);\n\n    const hasInput = inputChannelCount > 0;\n    const hasOutput = outputChannelCount > 0;\n\n    const node = new AudioWorkletNode (audioContext, workletName, {\n        numberOfInputs: +hasInput,\n        numberOfOutputs: +hasOutput,\n        channelCountMode: \"explicit\",\n        channelCount: hasInput ? inputChannelCount : undefined,\n        outputChannelCount: hasOutput ? [outputChannelCount] : [],\n\n        processorOptions:\n        {\n            sessionID,\n            initialValueOverrides\n        }\n    });\n\n    const waitUntilWorkletInitialised = async () =>\n    {\n        return new Promise ((resolve) =>\n        {\n            const filterForInitialised = (e) =>\n            {\n                if (e.data.type === \"initialised\")\n                {\n                    node.port.removeEventListener (\"message\", filterForInitialised);\n                    resolve();\n                }\n            };\n\n            node.port.addEventListener (\"message\", filterForInitialised);\n        });\n    };\n\n    node.port.start();\n\n    await waitUntilWorkletInitialised();\n\n    return node;\n}\n\n//==============================================================================\n/**  This class provides a PatchConnection that controls a Cmajor audio worklet\n *   node.\n */\nexport class AudioWorkletPatchConnection extends PatchConnection\n{\n    constructor (audioNode, manifest)\n    {\n        super();\n\n        this.manifest = manifest;\n        this.audioNode = audioNode;\n\n        audioNode.port.addEventListener (\"message\", e =>\n        {\n            if (e.data.type === \"patch\")\n            {\n                const msg = e.data.payload;\n\n                if (msg?.type === \"status\")\n                    msg.message = { manifest, ...msg.message };\n\n                this.deliverMessageFromServer (msg)\n            }\n        });\n\n        this.cachedState = {};\n    }\n\n    sendMessageToServer (msg)\n    {\n        this.audioNode.port.postMessage ({ type: \"patch\", payload: msg });\n    }\n\n    requestStoredStateValue (key)\n    {\n        this.dispatchEvent (\"state_key_value\", { key, value: this.cachedState[key] });\n    }\n\n    sendStoredStateValue (key, newValue)\n    {\n        const changed = this.cachedState[key] != newValue;\n\n        if (changed)\n        {\n            const shouldRemove = newValue == null;\n            if (shouldRemove)\n            {\n                delete this.cachedState[key];\n                return;\n            }\n\n            this.cachedState[key] = newValue;\n            // N.B. notifying the client only when updating matches behaviour of the patch player\n            this.dispatchEvent (\"state_key_value\", { key, value: newValue });\n        }\n    }\n\n    sendFullStoredState (fullState)\n    {\n        const currentStateCleared = (() =>\n        {\n            const out = {};\n            Object.keys (this.cachedState).forEach (k => out[k] = undefined);\n            return out;\n        })();\n\n        const incomingStateValues = fullState.values ?? {};\n        const nextStateValues = { ...currentStateCleared, ...incomingStateValues };\n\n        Object.entries (nextStateValues).forEach (([key, value]) => this.sendStoredStateValue (key, value));\n\n        // N.B. worklet will handle the `parameters` part\n        super.sendFullStoredState (fullState);\n    }\n\n    requestFullStoredState (callback)\n    {\n        // N.B. the worklet only handles the `parameters` part, so we patch the key-value state in here\n        super.requestFullStoredState (msg => callback ({ values: { ...this.cachedState }, ...msg }));\n    }\n\n    getResourceAddress (path)\n    {\n        return window.location.href + path;\n    }\n}\n\n\n//==============================================================================\nasync function connectToAudioIn (audioContext, node)\n{\n    try\n    {\n        const input = await navigator.mediaDevices.getUserMedia ({\n            audio: {\n                echoCancellation: false,\n                noiseSuppression: false,\n                autoGainControl:  false,\n        }});\n\n        if (! input)\n            throw new Error();\n\n        const source = audioContext.createMediaStreamSource (input);\n\n        if (! source)\n            throw new Error();\n\n        source.connect (node);\n    }\n    catch (e)\n    {\n        console.warn (`Could not open audio input`);\n    }\n}\n\nasync function connectToMIDI (connection)\n{\n    try\n    {\n        if (! navigator.requestMIDIAccess)\n            throw new Error (\"Web MIDI API not supported.\");\n\n        const midiAccess = await navigator.requestMIDIAccess ({ sysex: true, software: true });\n\n        for (const input of midiAccess.inputs.values())\n        {\n            input.onmidimessage = ({ data }) =>\n                connection.sendMIDIInputEvent (\"midiIn\", data[2] | (data[1] << 8) | (data[0] << 16));\n        }\n    }\n    catch (e)\n    {\n        console.warn (`Could not open MIDI devices: ${e}`);\n    }\n}\n\n/**  Takes an audio node and connection that were returned by `createAudioWorkletNodePatchConnection()`\n *   and attempts to hook them up to the default audio and MIDI channels.\n *\n *   @param {AudioWorkletNode} node - the audio node\n *   @param {PatchConnection} connection - the PatchConnection object created by `createAudioWorkletNodePatchConnection()`\n *   @param {AudioContext} audioContext - a web audio AudioContext object\n *   @param {Array} patchInputList - a list of the input endpoints that the patch provides\n */\nexport async function connectDefaultAudioAndMIDI ({ node, connection, audioContext, patchInputList })\n{\n    function hasInputWithPurpose (purpose)\n    {\n        for (const i of patchInputList)\n            if (i.purpose === purpose)\n                return true;\n\n        return false;\n    }\n\n    if (hasInputWithPurpose (\"midi in\"))\n        connectToMIDI (connection);\n\n    if (hasInputWithPurpose (\"audio in\"))\n        connectToAudioIn (audioContext, node);\n\n    node.connect (audioContext.destination);\n}\n",
							"id": "JAyg4SJh0WuTilUS",
							"mime": "text/javascript"
						},
						{
							"name": "cmaj-patch-connection.js",
							"type": "file",
							"binary": false,
							"content": "//\n//     ,ad888ba,                              88\n//    d8\"'    \"8b\n//   d8            88,dba,,adba,   ,aPP8A.A8  88\n//   Y8,           88    88    88  88     88  88\n//    Y8a.   .a8P  88    88    88  88,   ,88  88     (C)2024 Cmajor Software Ltd\n//     '\"Y888Y\"'   88    88    88  '\"8bbP\"Y8  88     https://cmajor.dev\n//                                           ,88\n//                                        888P\"\n//\n//  This file may be used under the terms of the ISC license:\n//\n//  Permission to use, copy, modify, and/or distribute this software for any purpose with or\n//  without fee is hereby granted, provided that the above copyright notice and this permission\n//  notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\n//  WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n//  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n//  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\n//  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n//  CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nimport { EventListenerList } from \"./cmaj-event-listener-list.js\"\n\n//==============================================================================\n/** This class implements the API and much of the logic for communicating with\n *  an instance of a patch that is running.\n */\nexport class PatchConnection  extends EventListenerList\n{\n    constructor()\n    {\n        super();\n    }\n\n    //==============================================================================\n    // Status-handling methods:\n\n    /** Calling this will trigger an asynchronous callback to any status listeners with the\n     *  patch's current state. Use addStatusListener() to attach a listener to receive it.\n     */\n    requestStatusUpdate()                             { this.sendMessageToServer ({ type: \"req_status\" }); }\n\n    /** Attaches a listener function that will be called whenever the patch's status changes.\n     *  The function will be called with a parameter object containing many properties describing the status,\n     *  including whether the patch is loaded, any errors, endpoint descriptions, its manifest, etc.\n     */\n    addStatusListener (listener)                      { this.addEventListener    (\"status\", listener); }\n\n    /** Removes a listener that was previously added with addStatusListener()\n     */\n    removeStatusListener (listener)                   { this.removeEventListener (\"status\", listener); }\n\n    /** Causes the patch to be reset to its \"just loaded\" state. */\n    resetToInitialState()                             { this.sendMessageToServer ({ type: \"req_reset\" }); }\n\n    //==============================================================================\n    // Methods for sending data to input endpoints:\n\n    /** Sends a value to one of the patch's input endpoints.\n     *\n     *  This can be used to send a value to either an 'event' or 'value' type input endpoint.\n     *  If the endpoint is a 'value' type, then the rampFrames parameter can optionally be used to specify\n     *  the number of frames over which the current value should ramp to the new target one.\n     *  The value parameter will be coerced to the type that is expected by the endpoint. So for\n     *  examples, numbers will be converted to float or integer types, javascript objects and arrays\n     *  will be converted into more complex types in as good a fashion is possible.\n     */\n    sendEventOrValue (endpointID, value, rampFrames, timeoutMillisecs)  { this.sendMessageToServer ({ type: \"send_value\", id: endpointID, value, rampFrames, timeout: timeoutMillisecs }); }\n\n    /** Sends a short MIDI message value to a MIDI endpoint.\n     *  The value must be a number encoded with `(byte0 << 16) | (byte1 << 8) | byte2`.\n     */\n    sendMIDIInputEvent (endpointID, shortMIDICode)    { this.sendEventOrValue (endpointID, { message: shortMIDICode }); }\n\n    /** Tells the patch that a series of changes that constitute a gesture is about to take place\n     *  for the given endpoint. Remember to call sendParameterGestureEnd() after they're done!\n     */\n    sendParameterGestureStart (endpointID)            { this.sendMessageToServer ({ type: \"send_gesture_start\", id: endpointID }); }\n\n    /** Tells the patch that a gesture started by sendParameterGestureStart() has finished.\n     */\n    sendParameterGestureEnd (endpointID)              { this.sendMessageToServer ({ type: \"send_gesture_end\", id: endpointID }); }\n\n    //==============================================================================\n    // Stored state control methods:\n\n    /** Requests a callback to any stored-state value listeners with the current value of a given key-value pair.\n     *  To attach a listener to receive these events, use addStoredStateValueListener().\n     *  @param {string} key\n     */\n    requestStoredStateValue (key)                     { this.sendMessageToServer ({ type: \"req_state_value\", key: key }); }\n\n    /** Modifies a key-value pair in the patch's stored state.\n     *  @param {string} key\n     *  @param {Object} newValue\n     */\n    sendStoredStateValue (key, newValue)              { this.sendMessageToServer ({ type: \"send_state_value\", key: key, value: newValue }); }\n\n    /** Attaches a listener function that will be called when any key-value pair in the stored state is changed.\n     *  The listener function will receive a message parameter with properties 'key' and 'value'.\n     */\n    addStoredStateValueListener (listener)            { this.addEventListener    (\"state_key_value\", listener); }\n\n    /** Removes a listener that was previously added with addStoredStateValueListener().\n     */\n    removeStoredStateValueListener (listener)         { this.removeEventListener (\"state_key_value\", listener); }\n\n    /** Applies a complete stored state to the patch.\n     *  To get the current complete state, use requestFullStoredState().\n     */\n    sendFullStoredState (fullState)                   { this.sendMessageToServer ({ type: \"send_full_state\", value: fullState }); }\n\n    /** Asynchronously requests the full stored state of the patch.\n     *  The listener function that is supplied will be called asynchronously with the state as its argument.\n     */\n    requestFullStoredState (callback)\n    {\n        const replyType = \"fullstate_response_\" + (Math.floor (Math.random() * 100000000)).toString();\n        this.addSingleUseListener (replyType, callback);\n        this.sendMessageToServer ({ type: \"req_full_state\", replyType: replyType });\n    }\n\n    //==============================================================================\n    // Listener methods:\n\n    /** Attaches a listener function that will receive updates with the events or audio data\n     *  that is being sent or received by an endpoint.\n     *\n     *  If the endpoint is an event or value, the callback will be given an argument which is\n     *  the new value.\n     *\n     *  If the endpoint has the right shape to be treated as \"audio\" then the callback will receive\n     *  a stream of updates of the min/max range of chunks of data that is flowing through it.\n     *  There will be one callback per chunk of data, and the size of chunks is specified by\n     *  the optional granularity parameter.\n     *\n     *  @param {string} endpointID\n     *  @param {number} granularity - if defined, this specifies the number of frames per callback\n     *  @param {boolean} sendFullAudioData - if false, the listener will receive an argument object containing\n     *     two properties 'min' and 'max', which are each an array of values, one element per audio\n     *     channel. This allows you to find the highest and lowest samples in that chunk for each channel.\n     *     If sendFullAudioData is true, the listener's argument will have a property 'data' which is an\n     *     array containing one array per channel of raw audio samples data.\n     */\n    addEndpointListener (endpointID, listener, granularity, sendFullAudioData)\n    {\n        listener.eventID = \"event_\" + endpointID + \"_\" + (Math.floor (Math.random() * 100000000)).toString();\n        this.addEventListener (listener.eventID, listener);\n        this.sendMessageToServer ({ type: \"add_endpoint_listener\", endpoint: endpointID, replyType:\n                                    listener.eventID, granularity: granularity, fullAudioData: sendFullAudioData });\n    }\n\n    /** Removes a listener that was previously added with addEndpointListener()\n     *  @param {string} endpointID\n    */\n    removeEndpointListener (endpointID, listener)\n    {\n        this.removeEventListener (listener.eventID, listener);\n        this.sendMessageToServer ({ type: \"remove_endpoint_listener\", endpoint: endpointID, replyType: listener.eventID });\n    }\n\n    /** This will trigger an asynchronous callback to any parameter listeners that are\n     *  attached, providing them with its up-to-date current value for the given endpoint.\n     *  Use addAllParameterListener() to attach a listener to receive the result.\n     *  @param {string} endpointID\n     */\n    requestParameterValue (endpointID)                  { this.sendMessageToServer ({ type: \"req_param_value\", id: endpointID }); }\n\n    /** Attaches a listener function which will be called whenever the value of a specific parameter changes.\n     *  The listener function will be called with an argument which is the new value.\n     *  @param {string} endpointID\n     */\n    addParameterListener (endpointID, listener)         { this.addEventListener (\"param_value_\" + endpointID.toString(), listener); }\n\n    /** Removes a listener that was previously added with addParameterListener()\n     *  @param {string} endpointID\n    */\n    removeParameterListener (endpointID, listener)      { this.removeEventListener (\"param_value_\" + endpointID.toString(), listener); }\n\n    /** Attaches a listener function which will be called whenever the value of any parameter changes in the patch.\n     *  The listener function will be called with an argument object with the fields 'endpointID' and 'value'.\n     */\n    addAllParameterListener (listener)                  { this.addEventListener (\"param_value\", listener); }\n\n    /** Removes a listener that was previously added with addAllParameterListener()\n     */\n    removeAllParameterListener (listener)               { this.removeEventListener (\"param_value\", listener); }\n\n    /** This takes a relative path to an asset within the patch bundle, and converts it to a\n     *  path relative to the root of the browser that is showing the view.\n     *\n     *  You need you use this in your view code to translate your asset URLs to a form that\n     *  can be safely used in your view's HTML DOM (e.g. in its CSS). This is needed because the\n     *  host's HTTP server (which is delivering your view pages) may have a different '/' root\n     *  than the root of your patch (e.g. if a single server is serving multiple patch GUIs).\n     *\n     *  @param {string} path\n     */\n    getResourceAddress (path)                           { return path; }\n\n    //==============================================================================\n    // Private methods follow this point..\n\n    /** @private */\n    deliverMessageFromServer (msg)\n    {\n        if (msg.type === \"status\")\n            this.manifest = msg.message?.manifest;\n\n        if (msg.type == \"param_value\")\n            this.dispatchEvent (\"param_value_\" + msg.message.endpointID, msg.message.value);\n\n        this.dispatchEvent (msg.type, msg.message);\n    }\n}\n",
							"id": "qexwegtZmipZiPqN",
							"mime": "text/javascript"
						},
						{
							"name": "cmaj-parameter-controls.js",
							"type": "file",
							"binary": false,
							"content": "//\n//     ,ad888ba,                              88\n//    d8\"'    \"8b\n//   d8            88,dba,,adba,   ,aPP8A.A8  88\n//   Y8,           88    88    88  88     88  88\n//    Y8a.   .a8P  88    88    88  88,   ,88  88     (C)2024 Cmajor Software Ltd\n//     '\"Y888Y\"'   88    88    88  '\"8bbP\"Y8  88     https://cmajor.dev\n//                                           ,88\n//                                        888P\"\n//\n//  This file may be used under the terms of the ISC license:\n//\n//  Permission to use, copy, modify, and/or distribute this software for any purpose with or\n//  without fee is hereby granted, provided that the above copyright notice and this permission\n//  notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\n//  WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n//  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n//  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\n//  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n//  CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nimport { PatchConnection } from \"./cmaj-patch-connection.js\";\n\n\n//==============================================================================\n/** A base class for parameter controls, which automatically connects to a\n *  PatchConnection to monitor a parameter and provides methods to modify it.\n */\nexport class ParameterControlBase  extends HTMLElement\n{\n    constructor()\n    {\n        super();\n\n        // prevent any clicks from focusing on this element\n        this.onmousedown = e => e.stopPropagation();\n    }\n\n    /** Attaches the control to a given PatchConnection and endpoint.\n     *\n     * @param {PatchConnection} patchConnection - the connection to connect to, or pass\n     *                                            undefined to disconnect the control.\n     * @param {Object} endpointInfo - the endpoint details, as provided by a PatchConnection\n     *                                in its status callback.\n     */\n    setEndpoint (patchConnection, endpointInfo)\n    {\n        this.detachListener();\n\n        this.patchConnection = patchConnection;\n        this.endpointInfo = endpointInfo;\n        this.defaultValue = endpointInfo.annotation?.init || endpointInfo.defaultValue || 0;\n\n        if (this.isConnected)\n            this.attachListener();\n    }\n\n    /** Override this method in a child class, and it will be called when the parameter value changes,\n     *  so you can update the GUI appropriately.\n     */\n    valueChanged (newValue) {}\n\n    /** Your GUI can call this when it wants to change the parameter value. */\n    setValue (value)     { this.patchConnection?.sendEventOrValue (this.endpointInfo.endpointID, value); }\n\n    /** Call this before your GUI begins a modification gesture.\n     *  You might for example call this if the user begins a mouse-drag operation.\n     */\n    beginGesture()       { this.patchConnection?.sendParameterGestureStart (this.endpointInfo.endpointID); }\n\n    /** Call this after your GUI finishes a modification gesture */\n    endGesture()         { this.patchConnection?.sendParameterGestureEnd (this.endpointInfo.endpointID); }\n\n    /** This calls setValue(), but sandwiches it between some start/end gesture calls.\n     *  You should use this to make sure a DAW correctly records automatiion for individual value changes\n     *  that are not part of a gesture.\n     */\n    setValueAsGesture (value)\n    {\n        this.beginGesture();\n        this.setValue (value);\n        this.endGesture();\n    }\n\n    /** Resets the parameter to its default value */\n    resetToDefault()\n    {\n        if (this.defaultValue !== null)\n            this.setValueAsGesture (this.defaultValue);\n    }\n\n    //==============================================================================\n    /** @private */\n    connectedCallback()\n    {\n        this.attachListener();\n    }\n\n    /** @protected */\n    disconnectedCallback()\n    {\n        this.detachListener();\n    }\n\n    /** @private */\n    detachListener()\n    {\n        if (this.listener)\n        {\n            this.patchConnection?.removeParameterListener?.(this.listener.endpointID, this.listener);\n            this.listener = undefined;\n        }\n    }\n\n    /** @private */\n    attachListener()\n    {\n        if (this.patchConnection && this.endpointInfo)\n        {\n            this.detachListener();\n\n            this.listener = newValue => this.valueChanged (newValue);\n            this.listener.endpointID = this.endpointInfo.endpointID;\n\n            this.patchConnection.addParameterListener (this.endpointInfo.endpointID, this.listener);\n            this.patchConnection.requestParameterValue (this.endpointInfo.endpointID);\n        }\n    }\n}\n\n//==============================================================================\n/** A simple rotary parameter knob control. */\nexport class Knob  extends ParameterControlBase\n{\n    constructor (patchConnection, endpointInfo)\n    {\n        super();\n        this.setEndpoint (patchConnection, endpointInfo);\n    }\n\n    setEndpoint (patchConnection, endpointInfo)\n    {\n        super.setEndpoint (patchConnection, endpointInfo);\n\n        this.innerHTML = \"\";\n        this.className = \"knob-container\";\n        const min = endpointInfo?.annotation?.min || 0;\n        const max = endpointInfo?.annotation?.max || 1;\n\n        const createSvgElement = tag => window.document.createElementNS (\"http://www.w3.org/2000/svg\", tag);\n\n        const svg = createSvgElement (\"svg\");\n        svg.setAttribute (\"viewBox\", \"0 0 100 100\");\n\n        const trackBackground = createSvgElement (\"path\");\n        trackBackground.setAttribute (\"d\", \"M20,76 A 40 40 0 1 1 80 76\");\n        trackBackground.classList.add (\"knob-path\");\n        trackBackground.classList.add (\"knob-track-background\");\n\n        const maxKnobRotation = 132;\n        const isBipolar = min + max === 0;\n        const dashLength = isBipolar ? 251.5 : 184;\n        const valueOffset = isBipolar ? 0 : 132;\n        this.getDashOffset = val => dashLength - 184 / (maxKnobRotation * 2) * (val + valueOffset);\n\n        this.trackValue = createSvgElement (\"path\");\n\n        this.trackValue.setAttribute (\"d\", isBipolar ? \"M50.01,10 A 40 40 0 1 1 50 10\"\n                                                     : \"M20,76 A 40 40 0 1 1 80 76\");\n        this.trackValue.setAttribute (\"stroke-dasharray\", dashLength);\n        this.trackValue.classList.add (\"knob-path\");\n        this.trackValue.classList.add (\"knob-track-value\");\n\n        this.dial = document.createElement (\"div\");\n        this.dial.className = \"knob-dial\";\n\n        const dialTick = document.createElement (\"div\");\n        dialTick.className = \"knob-dial-tick\";\n        this.dial.appendChild (dialTick);\n\n        svg.appendChild (trackBackground);\n        svg.appendChild (this.trackValue);\n\n        this.appendChild (svg);\n        this.appendChild (this.dial);\n\n        const remap = (source, sourceFrom, sourceTo, targetFrom, targetTo) =>\n                        (targetFrom + (source - sourceFrom) * (targetTo - targetFrom) / (sourceTo - sourceFrom));\n\n        const toValue = (knobRotation) => remap (knobRotation, -maxKnobRotation, maxKnobRotation, min, max);\n        this.toRotation = (value) => remap (value, min, max, -maxKnobRotation, maxKnobRotation);\n\n        this.rotation = this.toRotation (this.defaultValue);\n        this.setRotation (this.rotation, true);\n\n        const onMouseMove = (event) =>\n        {\n            event.preventDefault(); // avoid scrolling whilst dragging\n\n            const nextRotation = (rotation, delta) =>\n            {\n                const clamp = (v, min, max) => Math.min (Math.max (v, min), max);\n                return clamp (rotation - delta, -maxKnobRotation, maxKnobRotation);\n            };\n\n            const workaroundBrowserIncorrectlyCalculatingMovementY = event.movementY === event.screenY;\n            const movementY = workaroundBrowserIncorrectlyCalculatingMovementY ? event.screenY - this.previousScreenY\n                                                                               : event.movementY;\n            this.previousScreenY = event.screenY;\n\n            const speedMultiplier = event.shiftKey ? 0.25 : 1.5;\n            this.accumulatedRotation = nextRotation (this.accumulatedRotation, movementY * speedMultiplier);\n            this.setValue (toValue (this.accumulatedRotation));\n        };\n\n        const onMouseUp = (event) =>\n        {\n            this.previousScreenY = undefined;\n            this.accumulatedRotation = undefined;\n            window.removeEventListener (\"mousemove\", onMouseMove);\n            window.removeEventListener (\"mouseup\", onMouseUp);\n            this.endGesture();\n        };\n\n        const onMouseDown = (event) =>\n        {\n            this.previousScreenY = event.screenY;\n            this.accumulatedRotation = this.rotation;\n            this.beginGesture();\n            window.addEventListener (\"mousemove\", onMouseMove);\n            window.addEventListener (\"mouseup\", onMouseUp);\n            event.preventDefault();\n        };\n\n        const onTouchStart = (event) =>\n        {\n            this.previousClientY = event.changedTouches[0].clientY;\n            this.accumulatedRotation = this.rotation;\n            this.touchIdentifier = event.changedTouches[0].identifier;\n            this.beginGesture();\n            window.addEventListener (\"touchmove\", onTouchMove);\n            window.addEventListener (\"touchend\", onTouchEnd);\n            event.preventDefault();\n        };\n\n        const onTouchMove = (event) =>\n        {\n            for (const touch of event.changedTouches)\n            {\n                if (touch.identifier == this.touchIdentifier)\n                {\n                    const nextRotation = (rotation, delta) =>\n                    {\n                        const clamp = (v, min, max) => Math.min (Math.max (v, min), max);\n                        return clamp (rotation - delta, -maxKnobRotation, maxKnobRotation);\n                    };\n\n                    const movementY = touch.clientY - this.previousClientY;\n                    this.previousClientY = touch.clientY;\n\n                    const speedMultiplier = event.shiftKey ? 0.25 : 1.5;\n                    this.accumulatedRotation = nextRotation (this.accumulatedRotation, movementY * speedMultiplier);\n                    this.setValue (toValue (this.accumulatedRotation));\n                }\n            }\n        };\n\n        const onTouchEnd = (event) =>\n        {\n            this.previousClientY = undefined;\n            this.accumulatedRotation = undefined;\n            window.removeEventListener (\"touchmove\", onTouchMove);\n            window.removeEventListener (\"touchend\", onTouchEnd);\n            this.endGesture();\n        };\n\n        this.addEventListener (\"mousedown\", onMouseDown);\n        this.addEventListener (\"dblclick\", () => this.resetToDefault());\n        this.addEventListener ('touchstart', onTouchStart);\n    }\n\n    /** Returns true if this type of control is suitable for the given endpoint info */\n    static canBeUsedFor (endpointInfo)\n    {\n        return endpointInfo.purpose === \"parameter\";\n    }\n\n    /** @override */\n    valueChanged (newValue)       { this.setRotation (this.toRotation (newValue), false); }\n\n    /** Returns a string version of the given value */\n    getDisplayValue (v)           { return toFloatDisplayValueWithUnit (v, this.endpointInfo); }\n\n    /** @private */\n    setRotation (degrees, force)\n    {\n        if (force || this.rotation !== degrees)\n        {\n            this.rotation = degrees;\n            this.trackValue.setAttribute (\"stroke-dashoffset\", this.getDashOffset (this.rotation));\n            this.dial.style.transform = `translate(-50%,-50%) rotate(${degrees}deg)`;\n        }\n    }\n\n    /** @private */\n    static getCSS()\n    {\n        return `\n        .knob-container {\n            --knob-track-background-color: var(--background);\n            --knob-track-value-color: var(--foreground);\n\n            --knob-dial-border-color: var(--foreground);\n            --knob-dial-background-color: var(--background);\n            --knob-dial-tick-color: var(--foreground);\n\n            position: relative;\n            display: inline-block;\n            height: 5rem;\n            width: 5rem;\n            margin: 0;\n            padding: 0;\n        }\n\n        .knob-path {\n            fill: none;\n            stroke-linecap: round;\n            stroke-width: 0.15rem;\n        }\n\n        .knob-track-background {\n            stroke: var(--knob-track-background-color);\n        }\n\n        .knob-track-value {\n            stroke: var(--knob-track-value-color);\n        }\n\n        .knob-dial {\n            position: absolute;\n            text-align: center;\n            height: 60%;\n            width: 60%;\n            top: 50%;\n            left: 50%;\n            border: 0.15rem solid var(--knob-dial-border-color);\n            border-radius: 100%;\n            box-sizing: border-box;\n            transform: translate(-50%,-50%);\n            background-color: var(--knob-dial-background-color);\n        }\n\n        .knob-dial-tick {\n            position: absolute;\n            display: inline-block;\n\n            height: 1rem;\n            width: 0.15rem;\n            background-color: var(--knob-dial-tick-color);\n        }`;\n    }\n}\n\n//==============================================================================\n/** A boolean switch control */\nexport class Switch  extends ParameterControlBase\n{\n    constructor (patchConnection, endpointInfo)\n    {\n        super();\n        this.setEndpoint (patchConnection, endpointInfo);\n    }\n\n    setEndpoint (patchConnection, endpointInfo)\n    {\n        super.setEndpoint (patchConnection, endpointInfo);\n\n        const outer = document.createElement (\"div\");\n        outer.classList = \"switch-outline\";\n\n        const inner = document.createElement (\"div\");\n        inner.classList = \"switch-thumb\";\n\n        this.innerHTML = \"\";\n        this.currentValue = this.defaultValue > 0.5;\n        this.valueChanged (this.currentValue);\n        this.classList.add (\"switch-container\");\n\n        outer.appendChild (inner);\n        this.appendChild (outer);\n        this.addEventListener (\"click\", () => this.setValueAsGesture (this.currentValue ? 0 : 1.0));\n    }\n\n    /** Returns true if this type of control is suitable for the given endpoint info */\n    static canBeUsedFor (endpointInfo)\n    {\n        return endpointInfo.purpose === \"parameter\"\n                && endpointInfo.annotation?.boolean;\n    }\n\n    /** @override */\n    valueChanged (newValue)\n    {\n        const b = newValue > 0.5;\n        this.currentValue = b;\n        this.classList.remove (! b ? \"switch-on\" : \"switch-off\");\n        this.classList.add (b ? \"switch-on\" : \"switch-off\");\n    }\n\n    /** Returns a string version of the given value */\n    getDisplayValue (v)   { return `${v > 0.5 ? \"On\" : \"Off\"}`; }\n\n    /** @private */\n    static getCSS()\n    {\n        return `\n        .switch-container {\n            --switch-outline-color: var(--foreground);\n            --switch-thumb-color: var(--foreground);\n            --switch-on-background-color: var(--background);\n            --switch-off-background-color: var(--background);\n\n            position: relative;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            height: 100%;\n            width: 100%;\n            margin: 0;\n            padding: 0;\n        }\n\n        .switch-outline {\n            position: relative;\n            display: inline-block;\n            height: 1.25rem;\n            width: 2.5rem;\n            border-radius: 10rem;\n            box-shadow: 0 0 0 0.15rem var(--switch-outline-color);\n            transition: background-color 0.1s cubic-bezier(0.5, 0, 0.2, 1);\n        }\n\n        .switch-thumb {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%,-50%);\n            height: 1rem;\n            width: 1rem;\n            background-color: var(--switch-thumb-color);\n            border-radius: 100%;\n            transition: left 0.1s cubic-bezier(0.5, 0, 0.2, 1);\n        }\n\n        .switch-off .switch-thumb {\n            left: 25%;\n            background: none;\n            border: var(--switch-thumb-color) solid 0.1rem;\n            height: 0.8rem;\n            width: 0.8rem;\n        }\n        .switch-on .switch-thumb {\n            left: 75%;\n        }\n\n        .switch-off .switch-outline {\n            background-color: var(--switch-on-background-color);\n        }\n        .switch-on .switch-outline {\n            background-color: var(--switch-off-background-color);\n        }`;\n    }\n}\n\n//==============================================================================\nfunction toFloatDisplayValueWithUnit (v, endpointInfo)\n{\n    return `${v.toFixed (2)} ${endpointInfo.annotation?.unit ?? \"\"}`;\n}\n\n//==============================================================================\n/** A control that allows an item to be selected from a drop-down list of options */\nexport class Options  extends ParameterControlBase\n{\n    constructor (patchConnection, endpointInfo)\n    {\n        super();\n        this.setEndpoint (patchConnection, endpointInfo);\n    }\n\n    setEndpoint (patchConnection, endpointInfo)\n    {\n        super.setEndpoint (patchConnection, endpointInfo);\n\n        const toValue = (min, step, index) => min + (step * index);\n        const toStepCount = count => count > 0 ? count - 1 : 1;\n\n        const { min, max, options } = (() =>\n        {\n            if (Options.hasTextOptions (endpointInfo))\n            {\n                const optionList = endpointInfo.annotation.text.split (\"|\");\n                const stepCount = toStepCount (optionList.length);\n                let min = 0, max = stepCount, step = 1;\n\n                if (endpointInfo.annotation.min != null && endpointInfo.annotation.max != null)\n                {\n                    min = endpointInfo.annotation.min;\n                    max = endpointInfo.annotation.max;\n                    step = (max - min) / stepCount;\n                }\n\n                const options = optionList.map ((text, index) => ({ value: toValue (min, step, index), text }));\n\n                return { min, max, options };\n            }\n\n            if (Options.isExplicitlyDiscrete (endpointInfo))\n            {\n                const step = endpointInfo.annotation.step;\n\n                const min = endpointInfo.annotation?.min || 0;\n                const max = endpointInfo.annotation?.max || 1;\n\n                const numDiscreteOptions = (((max - min) / step) | 0) + 1;\n\n                const options = new Array (numDiscreteOptions);\n                for (let i = 0; i < numDiscreteOptions; ++i)\n                {\n                    const value = toValue (min, step, i);\n                    options[i] = { value, text: toFloatDisplayValueWithUnit (value, endpointInfo) };\n                }\n\n                return { min, max, options };\n            }\n        })();\n\n        this.options = options;\n\n        const stepCount = toStepCount (this.options.length);\n        const normalise = value => (value - min) / (max - min);\n        this.toIndex = value => Math.min (stepCount, normalise (value) * this.options.length) | 0;\n\n        this.innerHTML = \"\";\n\n        this.select = document.createElement (\"select\");\n\n        for (const option of this.options)\n        {\n            const optionElement = document.createElement (\"option\");\n            optionElement.innerText = option.text;\n            this.select.appendChild (optionElement);\n        }\n\n        this.selectedIndex = this.toIndex (this.defaultValue);\n\n        this.select.addEventListener (\"change\", (e) =>\n        {\n            const newIndex = e.target.selectedIndex;\n\n            // prevent local state change. the caller will update us when the backend actually applies the update\n            e.target.selectedIndex = this.selectedIndex;\n\n            this.setValueAsGesture (this.options[newIndex].value)\n        });\n\n        this.valueChanged (this.selectedIndex);\n\n        this.className = \"select-container\";\n        this.appendChild (this.select);\n\n        const icon = document.createElement (\"span\");\n        icon.className = \"select-icon\";\n        this.appendChild (icon);\n    }\n\n    /** Returns true if this type of control is suitable for the given endpoint info */\n    static canBeUsedFor (endpointInfo)\n    {\n        return endpointInfo.purpose === \"parameter\"\n                && (this.hasTextOptions (endpointInfo) || this.isExplicitlyDiscrete (endpointInfo));\n    }\n\n    /** @override */\n    valueChanged (newValue)\n    {\n        const index = this.toIndex (newValue);\n        this.selectedIndex = index;\n        this.select.selectedIndex = index;\n    }\n\n    /** Returns a string version of the given value */\n    getDisplayValue (v)    { return this.options[this.toIndex(v)].text; }\n\n    /** @private */\n    static hasTextOptions (endpointInfo)\n    {\n        return endpointInfo.annotation?.text?.split?.(\"|\").length > 1\n    }\n\n    /** @private */\n    static isExplicitlyDiscrete (endpointInfo)\n    {\n        return endpointInfo.annotation?.discrete && endpointInfo.annotation?.step > 0;\n    }\n\n    /** @private */\n    static getCSS()\n    {\n        return `\n        .select-container {\n            position: relative;\n            display: block;\n            font-size: 0.8rem;\n            width: 100%;\n            color: var(--foreground);\n            border: 0.15rem solid var(--foreground);\n            border-radius: 0.6rem;\n            margin: 0;\n            padding: 0;\n        }\n\n        select {\n            background: none;\n            appearance: none;\n            -webkit-appearance: none;\n            font-family: inherit;\n            font-size: 0.8rem;\n\n            overflow: hidden;\n            text-overflow: ellipsis;\n\n            padding: 0 1.5rem 0 0.6rem;\n\n            outline: none;\n            color: var(--foreground);\n            height: 2rem;\n            box-sizing: border-box;\n            margin: 0;\n            border: none;\n\n            width: 100%;\n        }\n\n        select option {\n            background: var(--background);\n            color: var(--foreground);\n        }\n\n        .select-icon {\n            position: absolute;\n            right: 0.3rem;\n            top: 0.5rem;\n            pointer-events: none;\n            background-color: var(--foreground);\n            width: 1.4em;\n            height: 1.4em;\n            mask: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M17,9.17a1,1,0,0,0-1.41,0L12,12.71,8.46,9.17a1,1,0,0,0-1.41,0,1,1,0,0,0,0,1.42l4.24,4.24a1,1,0,0,0,1.42,0L17,10.59A1,1,0,0,0,17,9.17Z'/%3E%3C/svg%3E\");\n            mask-repeat: no-repeat;\n            -webkit-mask: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M17,9.17a1,1,0,0,0-1.41,0L12,12.71,8.46,9.17a1,1,0,0,0-1.41,0,1,1,0,0,0,0,1.42l4.24,4.24a1,1,0,0,0,1.42,0L17,10.59A1,1,0,0,0,17,9.17Z'/%3E%3C/svg%3E\");\n            -webkit-mask-repeat: no-repeat;\n        }`;\n    }\n}\n\n//==============================================================================\n/** A control which wraps a child control, adding a label and value display box below it */\nexport class LabelledControlHolder  extends ParameterControlBase\n{\n    constructor (patchConnection, endpointInfo, childControl)\n    {\n        super();\n        this.childControl = childControl;\n        this.setEndpoint (patchConnection, endpointInfo);\n    }\n\n    setEndpoint (patchConnection, endpointInfo)\n    {\n        super.setEndpoint (patchConnection, endpointInfo);\n\n        this.innerHTML = \"\";\n        this.className = \"labelled-control\";\n\n        const centeredControl = document.createElement (\"div\");\n        centeredControl.className = \"labelled-control-centered-control\";\n\n        centeredControl.appendChild (this.childControl);\n\n        const titleValueHoverContainer = document.createElement (\"div\");\n        titleValueHoverContainer.className = \"labelled-control-label-container\";\n\n        const nameText = document.createElement (\"div\");\n        nameText.classList.add (\"labelled-control-name\");\n        nameText.innerText = endpointInfo.annotation?.name || endpointInfo.name || endpointInfo.endpointID || \"\";\n\n        this.valueText = document.createElement (\"div\");\n        this.valueText.classList.add (\"labelled-control-value\");\n\n        titleValueHoverContainer.appendChild (nameText);\n        titleValueHoverContainer.appendChild (this.valueText);\n\n        this.appendChild (centeredControl);\n        this.appendChild (titleValueHoverContainer);\n    }\n\n    /** @override */\n    valueChanged (newValue)\n    {\n        this.valueText.innerText = this.childControl?.getDisplayValue (newValue);\n    }\n\n    /** @private */\n    static getCSS()\n    {\n        return `\n        .labelled-control {\n            --labelled-control-font-color: var(--foreground);\n            --labelled-control-font-size: 0.8rem;\n\n            position: relative;\n            display: inline-block;\n            margin: 0 0.4rem 0.4rem;\n            vertical-align: top;\n            text-align: left;\n            padding: 0;\n        }\n\n        .labelled-control-centered-control {\n            position: relative;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n\n            width: 5.5rem;\n            height: 5rem;\n        }\n\n        .labelled-control-label-container {\n            position: relative;\n            display: block;\n            max-width: 5.5rem;\n            margin: -0.4rem auto 0.4rem;\n            text-align: center;\n            font-size: var(--labelled-control-font-size);\n            color: var(--labelled-control-font-color);\n            cursor: default;\n        }\n\n        .labelled-control-name {\n            overflow: hidden;\n            text-overflow: ellipsis;\n        }\n\n        .labelled-control-value {\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            opacity: 0;\n        }\n\n        .labelled-control:hover .labelled-control-name,\n        .labelled-control:active .labelled-control-name {\n            opacity: 0;\n        }\n        .labelled-control:hover .labelled-control-value,\n        .labelled-control:active .labelled-control-value {\n            opacity: 1;\n        }`;\n    }\n}\n\nwindow.customElements.define (\"cmaj-knob-control\", Knob);\nwindow.customElements.define (\"cmaj-switch-control\", Switch);\nwindow.customElements.define (\"cmaj-options-control\", Options);\nwindow.customElements.define (\"cmaj-labelled-control-holder\", LabelledControlHolder);\n\n//==============================================================================\n/** Fetches all the CSS for the controls defined in this module */\nexport function getAllCSS()\n{\n    return `\n        ${Options.getCSS()}\n        ${Knob.getCSS()}\n        ${Switch.getCSS()}\n        ${LabelledControlHolder.getCSS()}`;\n}\n\n//==============================================================================\n/** Creates a suitable control for the given endpoint.\n *\n *  @param {PatchConnection} patchConnection - the connection to connect to\n *  @param {Object} endpointInfo - the endpoint details, as provided by a PatchConnection\n *                                 in its status callback.\n*/\nexport function createControl (patchConnection, endpointInfo)\n{\n    if (Switch.canBeUsedFor (endpointInfo))\n        return new Switch (patchConnection, endpointInfo);\n\n    if (Options.canBeUsedFor (endpointInfo))\n        return new Options (patchConnection, endpointInfo);\n\n    if (Knob.canBeUsedFor (endpointInfo))\n        return new Knob (patchConnection, endpointInfo);\n\n    return undefined;\n}\n\n//==============================================================================\n/** Creates a suitable labelled control for the given endpoint.\n *\n *  @param {PatchConnection} patchConnection - the connection to connect to\n *  @param {Object} endpointInfo - the endpoint details, as provided by a PatchConnection\n *                                 in its status callback.\n*/\nexport function createLabelledControl (patchConnection, endpointInfo)\n{\n    const control = createControl (patchConnection, endpointInfo);\n\n    if (control)\n        return new LabelledControlHolder (patchConnection, endpointInfo, control);\n\n    return undefined;\n}\n\n//==============================================================================\n/** Takes a patch connection and its current status object, and tries to create\n *  a control for the given endpoint ID.\n *\n *  @param {PatchConnection} patchConnection - the connection to connect to\n *  @param {Object} status - the connection's current status\n *  @param {string} endpointID - the endpoint you'd like to control\n */\nexport function createLabelledControlForEndpointID (patchConnection, status, endpointID)\n{\n    for (const endpointInfo of status?.details?.inputs)\n        if (endpointInfo.endpointID == endpointID)\n            return createLabelledControl (patchConnection, endpointInfo);\n\n    return undefined;\n}\n",
							"id": "zzL5qncY5VHz4tM5",
							"mime": "text/javascript"
						},
						{
							"name": "cmaj-midi-helpers.js",
							"type": "file",
							"binary": false,
							"content": "//\n//     ,ad888ba,                              88\n//    d8\"'    \"8b\n//   d8            88,dba,,adba,   ,aPP8A.A8  88\n//   Y8,           88    88    88  88     88  88\n//    Y8a.   .a8P  88    88    88  88,   ,88  88     (C)2024 Cmajor Software Ltd\n//     '\"Y888Y\"'   88    88    88  '\"8bbP\"Y8  88     https://cmajor.dev\n//                                           ,88\n//                                        888P\"\n//\n//  This file may be used under the terms of the ISC license:\n//\n//  Permission to use, copy, modify, and/or distribute this software for any purpose with or\n//  without fee is hereby granted, provided that the above copyright notice and this permission\n//  notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\n//  WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n//  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n//  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\n//  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n//  CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n\nexport function getByte0 (message)     { return (message >> 16) & 0xff; }\nexport function getByte1 (message)     { return (message >> 8) & 0xff; }\nexport function getByte2 (message)     { return message & 0xff; }\n\nfunction isVoiceMessage (message, type)     { return ((message >> 16) & 0xf0) == type; }\nfunction get14BitValue (message)            { return getByte1 (message) | (getByte2 (message) << 7); }\n\nexport function getChannel0to15 (message)   { return getByte0 (message) & 0x0f; }\nexport function getChannel1to16 (message)   { return getChannel0to15 (message) + 1; }\n\nexport function getMessageSize (message)\n{\n    const mainGroupLengths = (3 << 0) | (3 << 2) | (3 << 4) | (3 << 6)\n                           | (2 << 8) | (2 << 10) | (3 << 12);\n\n    const lastGroupLengths = (1 <<  0) | (2 <<  2) | (3 <<  4) | (2 <<  6)\n                           | (1 <<  8) | (1 << 10) | (1 << 12) | (1 << 14)\n                           | (1 << 16) | (1 << 18) | (1 << 20) | (1 << 22)\n                           | (1 << 24) | (1 << 26) | (1 << 28) | (1 << 30);\n\n    const firstByte = getByte0 (message);\n    const group = (firstByte >> 4) & 7;\n\n    return (group != 7 ? (mainGroupLengths >> (2 * group))\n                       : (lastGroupLengths >> (2 * (firstByte & 15)))) & 3;\n}\n\nexport function isNoteOn  (message)                         { return isVoiceMessage (message, 0x90) && getVelocity (message) != 0; }\nexport function isNoteOff (message)                         { return isVoiceMessage (message, 0x80) || (isVoiceMessage (message, 0x90) && getVelocity (message) == 0); }\n\nexport function getNoteNumber (message)                     { return getByte1 (message); }\nexport function getVelocity (message)                       { return getByte2 (message); }\n\nexport function isProgramChange (message)                   { return isVoiceMessage (message, 0xc0); }\nexport function getProgramChangeNumber (message)            { return getByte1 (message); }\nexport function isPitchWheel (message)                      { return isVoiceMessage (message, 0xe0); }\nexport function getPitchWheelValue (message)                { return get14BitValue (message); }\nexport function isAftertouch (message)                      { return isVoiceMessage (message, 0xa0); }\nexport function getAfterTouchValue (message)                { return getByte2 (message); }\nexport function isChannelPressure (message)                 { return isVoiceMessage (message, 0xd0); }\nexport function getChannelPressureValue (message)           { return getByte1 (message); }\nexport function isController (message)                      { return isVoiceMessage (message, 0xb0); }\nexport function getControllerNumber (message)               { return getByte1 (message); }\nexport function getControllerValue (message)                { return getByte2 (message); }\nexport function isControllerNumber (message, number)        { return getByte1 (message) == number && isController (message); }\nexport function isAllNotesOff (message)                     { return isControllerNumber (message, 123); }\nexport function isAllSoundOff (message)                     { return isControllerNumber (message, 120); }\nexport function isQuarterFrame (message)                    { return getByte0 (message) == 0xf1; }\nexport function isClock (message)                           { return getByte0 (message) == 0xf8; }\nexport function isStart (message)                           { return getByte0 (message) == 0xfa; }\nexport function isContinue (message)                        { return getByte0 (message) == 0xfb; }\nexport function isStop (message)                            { return getByte0 (message) == 0xfc; }\nexport function isActiveSense (message)                     { return getByte0 (message) == 0xfe; }\nexport function isMetaEvent (message)                       { return getByte0 (message) == 0xff; }\nexport function isSongPositionPointer (message)             { return getByte0 (message) == 0xf2; }\nexport function getSongPositionPointerValue (message)       { return get14BitValue (message); }\n\nexport function getChromaticScaleIndex (note)               { return (note % 12) & 0xf; }\nexport function getOctaveNumber (note, octaveForMiddleC)    { return ((Math.floor (note / 12) + (octaveForMiddleC ? octaveForMiddleC : 3)) & 0xff) - 5; }\nexport function getNoteName (note)                          { const names = [\"C\", \"C#\", \"D\", \"Eb\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"Bb\", \"B\"]; return names[getChromaticScaleIndex (note)]; }\nexport function getNoteNameWithSharps (note)                { const names = [\"C\", \"C#\", \"D\", \"Eb\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"Bb\", \"B\"]; return names[getChromaticScaleIndex (note)]; }\nexport function getNoteNameWithFlats (note)                 { const names = [\"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\", \"A\", \"Bb\", \"B\"]; return names[getChromaticScaleIndex (note)]; }\nexport function getNoteNameWithOctaveNumber (note)          { return getNoteName (note) + getOctaveNumber (note); }\nexport function isNatural (note)                            { const nats = [true, false, true, false, true, true, false, true, false, true, false, true]; return nats[getChromaticScaleIndex (note)]; }\nexport function isAccidental (note)                         { return ! isNatural (note); }\n\nexport function printHexMIDIData (message)\n{\n    const numBytes = getMessageSize (message);\n\n    if (numBytes == 0)\n        return \"[empty]\";\n\n    let s = \"\";\n\n    for (let i = 0; i < numBytes; ++i)\n    {\n        if (i != 0)  s += ' ';\n\n        const byte = message >> (16 - 8 * i) & 0xff;\n        s += \"0123456789abcdef\"[byte >> 4];\n        s += \"0123456789abcdef\"[byte & 15];\n    }\n\n    return s;\n}\n\nexport function getMIDIDescription (message)\n{\n    const channelText = \" Channel \" + getChannel1to16 (message);\n    function getNote (m)   { const s = getNoteNameWithOctaveNumber (getNoteNumber (message)); return s.length < 4 ? s + \" \" : s; };\n\n    if (isNoteOn (message))                return \"Note-On:  \"   + getNote (message) + channelText + \"  Velocity \" + getVelocity (message);\n    if (isNoteOff (message))               return \"Note-Off: \"   + getNote (message) + channelText + \"  Velocity \" + getVelocity (message);\n    if (isAftertouch (message))            return \"Aftertouch: \" + getNote (message) + channelText +  \": \" + getAfterTouchValue (message);\n    if (isPitchWheel (message))            return \"Pitch wheel: \" + getPitchWheelValue (message) + ' ' + channelText;\n    if (isChannelPressure (message))       return \"Channel pressure: \" + getChannelPressureValue (message) + ' ' + channelText;\n    if (isController (message))            return \"Controller:\" + channelText + \": \" + getControllerName (getControllerNumber (message)) + \" = \" + getControllerValue (message);\n    if (isProgramChange (message))         return \"Program change: \" + getProgramChangeNumber (message) + ' ' + channelText;\n    if (isAllNotesOff (message))           return \"All notes off:\" + channelText;\n    if (isAllSoundOff (message))           return \"All sound off:\" + channelText;\n    if (isQuarterFrame (message))          return \"Quarter-frame\";\n    if (isClock (message))                 return \"Clock\";\n    if (isStart (message))                 return \"Start\";\n    if (isContinue (message))              return \"Continue\";\n    if (isStop (message))                  return \"Stop\";\n    if (isMetaEvent (message))             return \"Meta-event: type \" + getByte1 (message);\n    if (isSongPositionPointer (message))   return \"Song Position: \" + getSongPositionPointerValue (message);\n\n    return printHexMIDIData (message);\n}\n\nexport function getControllerName (controllerNumber)\n{\n    if (controllerNumber < 128)\n    {\n        const controllerNames = [\n            \"Bank Select\",                  \"Modulation Wheel (coarse)\",      \"Breath controller (coarse)\",       undefined,\n            \"Foot Pedal (coarse)\",          \"Portamento Time (coarse)\",       \"Data Entry (coarse)\",              \"Volume (coarse)\",\n            \"Balance (coarse)\",             undefined,                        \"Pan position (coarse)\",            \"Expression (coarse)\",\n            \"Effect Control 1 (coarse)\",    \"Effect Control 2 (coarse)\",      undefined,                          undefined,\n            \"General Purpose Slider 1\",     \"General Purpose Slider 2\",       \"General Purpose Slider 3\",         \"General Purpose Slider 4\",\n            undefined,                      undefined,                        undefined,                          undefined,\n            undefined,                      undefined,                        undefined,                          undefined,\n            undefined,                      undefined,                        undefined,                          undefined,\n            \"Bank Select (fine)\",           \"Modulation Wheel (fine)\",        \"Breath controller (fine)\",         undefined,\n            \"Foot Pedal (fine)\",            \"Portamento Time (fine)\",         \"Data Entry (fine)\",                \"Volume (fine)\",\n            \"Balance (fine)\",               undefined,                        \"Pan position (fine)\",              \"Expression (fine)\",\n            \"Effect Control 1 (fine)\",      \"Effect Control 2 (fine)\",        undefined,                          undefined,\n            undefined,                      undefined,                        undefined,                          undefined,\n            undefined,                      undefined,                        undefined,                          undefined,\n            undefined,                      undefined,                        undefined,                          undefined,\n            undefined,                      undefined,                        undefined,                          undefined,\n            \"Hold Pedal\",                   \"Portamento\",                     \"Sustenuto Pedal\",                  \"Soft Pedal\",\n            \"Legato Pedal\",                 \"Hold 2 Pedal\",                   \"Sound Variation\",                  \"Sound Timbre\",\n            \"Sound Release Time\",           \"Sound Attack Time\",              \"Sound Brightness\",                 \"Sound Control 6\",\n            \"Sound Control 7\",              \"Sound Control 8\",                \"Sound Control 9\",                  \"Sound Control 10\",\n            \"General Purpose Button 1\",     \"General Purpose Button 2\",       \"General Purpose Button 3\",         \"General Purpose Button 4\",\n            undefined,                      undefined,                        undefined,                          undefined,\n            undefined,                      undefined,                        undefined,                          \"Reverb Level\",\n            \"Tremolo Level\",                \"Chorus Level\",                   \"Celeste Level\",                    \"Phaser Level\",\n            \"Data Button increment\",        \"Data Button decrement\",          \"Non-registered Parameter (fine)\",  \"Non-registered Parameter (coarse)\",\n            \"Registered Parameter (fine)\",  \"Registered Parameter (coarse)\",  undefined,                          undefined,\n            undefined,                      undefined,                        undefined,                          undefined,\n            undefined,                      undefined,                        undefined,                          undefined,\n            undefined,                      undefined,                        undefined,                          undefined,\n            undefined,                      undefined,                        undefined,                          undefined,\n            \"All Sound Off\",                \"All Controllers Off\",            \"Local Keyboard\",                   \"All Notes Off\",\n            \"Omni Mode Off\",                \"Omni Mode On\",                   \"Mono Operation\",                   \"Poly Operation\"\n        ];\n\n        const name = controllerNames[controllerNumber];\n\n        if (name)\n            return name;\n    }\n\n    return controllerNumber.toString();\n}\n",
							"id": "6iR6Gt95aqgneYLo",
							"mime": "text/javascript"
						},
						{
							"name": "cmaj-event-listener-list.js",
							"type": "file",
							"binary": false,
							"content": "//\n//     ,ad888ba,                              88\n//    d8\"'    \"8b\n//   d8            88,dba,,adba,   ,aPP8A.A8  88\n//   Y8,           88    88    88  88     88  88\n//    Y8a.   .a8P  88    88    88  88,   ,88  88     (C)2024 Cmajor Software Ltd\n//     '\"Y888Y\"'   88    88    88  '\"8bbP\"Y8  88     https://cmajor.dev\n//                                           ,88\n//                                        888P\"\n//\n//  This file may be used under the terms of the ISC license:\n//\n//  Permission to use, copy, modify, and/or distribute this software for any purpose with or\n//  without fee is hereby granted, provided that the above copyright notice and this permission\n//  notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\n//  WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n//  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n//  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\n//  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n//  CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n\n/** This event listener management class allows listeners to be attached and\n *  removed from named event types.\n */\nexport class EventListenerList\n{\n    constructor()\n    {\n        this.listenersPerType = {};\n    }\n\n    /** Adds a listener for a specifc event type.\n     *  If the listener is already registered, this will simply add it again.\n     *  Each call to addEventListener() must be paired with a removeventListener()\n     *  call to remove it.\n     *\n     *  @param {string} type\n     */\n    addEventListener (type, listener)\n    {\n        if (type && listener)\n        {\n            const list = this.listenersPerType[type];\n\n            if (list)\n                list.push (listener);\n            else\n                this.listenersPerType[type] = [listener];\n        }\n    }\n\n    /** Removes a listener that was previously added for the given event type.\n     *  @param {string} type\n     */\n    removeEventListener (type, listener)\n    {\n        if (type && listener)\n        {\n            const list = this.listenersPerType[type];\n\n            if (list)\n            {\n                const i = list.indexOf (listener);\n\n                if (i >= 0)\n                    list.splice (i, 1);\n            }\n        }\n    }\n\n    /** Attaches a callback function that will be automatically unregistered\n     *  the first time it is invoked.\n     *\n     *  @param {string} type\n     */\n    addSingleUseListener (type, listener)\n    {\n        const l = message =>\n        {\n            this.removeEventListener (type, l);\n            listener?.(message);\n        };\n\n        this.addEventListener (type, l);\n    }\n\n    /** Synchronously dispatches an event object to all listeners\n     *  that are registered for the given type.\n     *\n     *  @param {string} type\n     */\n    dispatchEvent (type, event)\n    {\n        const list = this.listenersPerType[type];\n\n        if (list)\n            for (const listener of list)\n                listener?.(event);\n    }\n\n    /** Returns the number of listeners that are currently registered\n     *  for the given type of event.\n     *\n     *  @param {string} type\n     */\n    getNumListenersForType (type)\n    {\n        const list = this.listenersPerType[type];\n        return list ? list.length : 0;\n    }\n}\n",
							"id": "Opf1iSlB7i3V04jf",
							"mime": "text/javascript"
						},
						{
							"name": "cmaj-server-session.js",
							"type": "file",
							"binary": false,
							"content": "//\n//     ,ad888ba,                              88\n//    d8\"'    \"8b\n//   d8            88,dba,,adba,   ,aPP8A.A8  88\n//   Y8,           88    88    88  88     88  88\n//    Y8a.   .a8P  88    88    88  88,   ,88  88     (C)2024 Cmajor Software Ltd\n//     '\"Y888Y\"'   88    88    88  '\"8bbP\"Y8  88     https://cmajor.dev\n//                                           ,88\n//                                        888P\"\n//\n//  This file may be used under the terms of the ISC license:\n//\n//  Permission to use, copy, modify, and/or distribute this software for any purpose with or\n//  without fee is hereby granted, provided that the above copyright notice and this permission\n//  notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\n//  WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n//  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n//  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\n//  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n//  CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nimport { PatchConnection } from \"./cmaj-patch-connection.js\"\nimport { EventListenerList } from \"./cmaj-event-listener-list.js\"\n\n\n//==============================================================================\n/*\n *  This class provides the API and manages the communication protocol between\n *  a javascript application and a Cmajor session running on some kind of server\n *  (which may be local or remote).\n *\n *  This is an abstract base class: some kind of transport layer will create a\n *  subclass of ServerSession which a client application can then use to control\n *  and interact with the server.\n */\nexport class ServerSession   extends EventListenerList\n{\n    /** A server session must be given a unique sessionID.\n     * @param {string} sessionID - this must be a unique string which is safe for\n     *                             use as an identifier or filename\n    */\n    constructor (sessionID)\n    {\n        super();\n\n        this.sessionID = sessionID;\n        this.activePatchConnections = new Set();\n        this.status = { connected: false, loaded: false };\n        this.lastServerMessageTime = Date.now();\n        this.checkForServerTimer = setInterval (() => this.checkServerStillExists(), 2000);\n    }\n\n    /** Call `dispose()` when this session is no longer needed and should be released. */\n    dispose()\n    {\n        if (this.checkForServerTimer)\n        {\n            clearInterval (this.checkForServerTimer);\n            this.checkForServerTimer = undefined;\n        }\n\n        this.status = { connected: false, loaded: false };\n    }\n\n    //==============================================================================\n    // Session status methods:\n\n    /** Attaches a listener function which will be called when the session status changes.\n     *  The listener will be called with an argument object containing lots of properties\n     *  describing the state, including any errors, loaded patch manifest, etc.\n     */\n    addStatusListener (listener)                        { this.addEventListener    (\"session_status\", listener); }\n\n    /** Removes a listener that was previously added by `addStatusListener()`\n     */\n    removeStatusListener (listener)                     { this.removeEventListener (\"session_status\", listener); }\n\n    /** Asks the server to asynchronously send a status update message with the latest status.\n     */\n    requestSessionStatus()                              { this.sendMessageToServer ({ type: \"req_session_status\" }); }\n\n    /** Returns the session's last known status object. */\n    getCurrentStatus()                                  { return this.status; }\n\n    //==============================================================================\n    // Patch loading:\n\n    /** Asks the server to load the specified patch into our session.\n     */\n    loadPatch (patchFileToLoad)\n    {\n        this.currentPatchLocation = patchFileToLoad;\n        this.sendMessageToServer ({ type: \"load_patch\", file: patchFileToLoad });\n    }\n\n    /** Tells the server to asynchronously generate a list of patches that it has access to.\n     *  The function provided will be called back with an array of manifest objects describing\n     *  each of the patches.\n     */\n    requestAvailablePatchList (callbackFunction)\n    {\n        const replyType = this.createReplyID (\"patchlist_\");\n        this.addSingleUseListener (replyType, callbackFunction);\n        this.sendMessageToServer ({ type: \"req_patchlist\",\n                                    replyType: replyType });\n    }\n\n    /** Creates and returns a new PatchConnection object which can be used to control the\n     *  patch that this session has loaded.\n     */\n    createPatchConnection()\n    {\n        class ServerPatchConnection  extends PatchConnection\n        {\n            constructor (session)\n            {\n                super();\n                this.session = session;\n                this.manifest = session.status?.manifest;\n                this.session.activePatchConnections.add (this);\n            }\n\n            dispose()\n            {\n                this.session.activePatchConnections.delete (this);\n                this.session = undefined;\n            }\n\n            sendMessageToServer (message)\n            {\n                this.session?.sendMessageToServer (message);\n            }\n\n            getResourceAddress (path)\n            {\n                if (! this.session?.status?.httpRootURL)\n                    return undefined;\n\n                return this.session.status.httpRootURL\n                        + (path.startsWith (\"/\") ? path.substr (1) : path);\n            }\n        }\n\n        return new ServerPatchConnection (this);\n    }\n\n    //==============================================================================\n    // Audio input source handling:\n\n    /**\n     *  Sets a custom audio input source for a particular endpoint.\n     *\n     *  When a source is changed, a callback is sent to any audio input mode listeners (see\n     *  `addAudioInputModeListener()`)\n     *\n     *  @param {Object} endpointID\n     *  @param {boolean} shouldMute - if true, the endpoint will be muted\n     *  @param {Uint8Array | Array} fileDataToPlay - if this is some kind of array containing\n     *  binary data that can be parsed as an audio file, then it will be sent across for the\n     *  server to play as a looped input sample.\n     */\n    setAudioInputSource (endpointID, shouldMute, fileDataToPlay)\n    {\n        const loopFile = \"_audio_source_\" + endpointID;\n\n        if (fileDataToPlay)\n        {\n            this.registerFile (loopFile,\n            {\n               size: fileDataToPlay.byteLength,\n               read: (start, length) => { return new Blob ([fileDataToPlay.slice (start, start + length)]); }\n            });\n\n            this.sendMessageToServer ({ type: \"set_custom_audio_input\",\n                                        endpoint: endpointID,\n                                        file: loopFile });\n        }\n        else\n        {\n            this.removeFile (loopFile);\n\n            this.sendMessageToServer ({ type: \"set_custom_audio_input\",\n                                        endpoint: endpointID,\n                                        mute: !! shouldMute });\n        }\n    }\n\n    /** Attaches a listener function to be told when the input source for a particular\n     *  endpoint is changed by a call to `setAudioInputSource()`.\n     */\n    addAudioInputModeListener (endpointID, listener)    { this.addEventListener    (\"audio_input_mode_\" + endpointID, listener); }\n\n    /** Removes a listener previously added with `addAudioInputModeListener()` */\n    removeAudioInputModeListener (endpointID, listener) { this.removeEventListener (\"audio_input_mode_\" + endpointID, listener); }\n\n    /** Asks the server to send an update with the latest status to any audio mode listeners that\n     *  are attached to the given endpoint.\n     *  @param {string} endpointID\n     */\n    requestAudioInputMode (endpointID)                  { this.sendMessageToServer ({ type: \"req_audio_input_mode\", endpoint: endpointID }); }\n\n    //==============================================================================\n    // Audio device methods:\n\n    /** Enables or disables audio playback.\n     *  When playback state changes, a status update is sent to any status listeners.\n     * @param {boolean} shouldBeActive\n     */\n    setAudioPlaybackActive (shouldBeActive)             { this.sendMessageToServer ({ type: \"set_audio_playback_active\", active: shouldBeActive }); }\n\n    /** Asks the server to apply a new set of audio device properties.\n     *  The properties object uses the same format as the object that is passed to the listeners\n     *  (see `addAudioDevicePropertiesListener()`).\n     */\n    setAudioDeviceProperties (newProperties)            { this.sendMessageToServer ({ type: \"set_audio_device_props\", properties: newProperties }); }\n\n    /** Attaches a listener function which will be called when the audio device properties are\n     *  changed.\n     *\n     *  You can remove the listener when it's no longer needed with `removeAudioDevicePropertiesListener()`.\n     *\n     *  @param listener - this callback will receive an argument object containing all the\n     *                    details about the device.\n     */\n    addAudioDevicePropertiesListener (listener)         { this.addEventListener    (\"audio_device_properties\", listener); }\n\n    /** Removes a listener that was added with `addAudioDevicePropertiesListener()` */\n    removeAudioDevicePropertiesListener (listener)      { this.removeEventListener (\"audio_device_properties\", listener); }\n\n    /** Causes an asynchronous callback to any audio device listeners that are registered. */\n    requestAudioDeviceProperties()                      { this.sendMessageToServer ({ type: \"req_audio_device_props\" }); }\n\n    //==============================================================================\n    /** Asks the server to asynchronously generate some code from the currently loaded patch.\n     *\n     *  @param {string} codeType - this must be one of the strings that are listed in the\n     *                             status's `codeGenTargets` property. For example, \"cpp\"\n     *                             would request a C++ version of the patch.\n     *  @param {Object} [extraOptions] - this optionally provides target-specific properties.\n     *  @param callbackFunction - this function will be called with the result when it has\n     *                            been generated. Its argument will be an object containing the\n     *                            code, errors and other metadata about the patch.\n     */\n    requestGeneratedCode (codeType, extraOptions, callbackFunction)\n    {\n        const replyType = this.createReplyID (\"codegen_\");\n        this.addSingleUseListener (replyType, callbackFunction);\n        this.sendMessageToServer ({ type: \"req_codegen\",\n                                    codeType: codeType,\n                                    options: extraOptions,\n                                    replyType: replyType });\n    }\n\n    //==============================================================================\n    // File change monitoring:\n\n    /** Attaches a listener to be told when a file change is detected in the currently-loaded\n     *  patch. The function will be called with an object that gives rough details about the\n     *  type of change, i.e. whether it's a manifest or asset file, or a cmajor file, but it\n     *  won't provide any information about exactly which files are involved.\n     */\n    addFileChangeListener (listener)                    { this.addEventListener    (\"patch_source_changed\", listener); }\n\n    /** Removes a listener that was previously added with `addFileChangeListener()`.\n     */\n    removeFileChangeListener (listener)                 { this.removeEventListener (\"patch_source_changed\", listener); }\n\n    //==============================================================================\n    // CPU level monitoring methods:\n\n    /** Attaches a listener function which will be sent messages containing CPU info.\n     *  To remove the listener, call `removeCPUListener()`. To change the rate of these\n     *  messages, use `setCPULevelUpdateRate()`.\n     */\n    addCPUListener (listener)                       { this.addEventListener    (\"cpu_info\", listener); this.updateCPULevelUpdateRate(); }\n\n    /** Removes a listener that was previously attached with `addCPUListener()`. */\n    removeCPUListener (listener)                    { this.removeEventListener (\"cpu_info\", listener); this.updateCPULevelUpdateRate(); }\n\n    /** Changes the frequency at which CPU level update messages are sent to listeners. */\n    setCPULevelUpdateRate (framesPerUpdate)         { this.cpuFramesPerUpdate = framesPerUpdate; this.updateCPULevelUpdateRate(); }\n\n    /** Attaches a listener to be told when a file change is detected in the currently-loaded\n     *  patch. The function will be called with an object that gives rough details about the\n     *  type of change, i.e. whether it's a manifest or asset file, or a cmajor file, but it\n     *  won't provide any information about exactly which files are involved.\n     */\n    addInfiniteLoopListener (listener)              { this.addEventListener    (\"infinite_loop_detected\", listener); }\n\n    /** Removes a listener that was previously added with `addFileChangeListener()`. */\n    removeInfiniteLoopListener (listener)           { this.removeEventListener (\"infinite_loop_detected\", listener); }\n\n    //==============================================================================\n    /** Registers a virtual file with the server, under the given name.\n     *\n     *  @param {string} filename - the full path name of the file\n     *  @param {Object} contentProvider - this object must have a property called `size` which is a\n     *            constant size in bytes for the file, and a method `read (offset, size)` which\n     *            returns an array (or UInt8Array) of bytes for the data in a given chunk of the file.\n     *            The server may repeatedly call this method at any time until `removeFile()` is\n     *            called to deregister the file.\n     */\n    registerFile (filename, contentProvider)\n    {\n        if (! this.files)\n            this.files = new Map();\n\n        this.files.set (filename, contentProvider);\n\n        this.sendMessageToServer ({ type: \"register_file\",\n                                    filename: filename,\n                                    size: contentProvider.size });\n    }\n\n    /** Removes a file that was previously registered with `registerFile()`. */\n    removeFile (filename)\n    {\n        this.sendMessageToServer ({ type: \"remove_file\",\n                                    filename: filename });\n        this.files?.delete (filename);\n    }\n\n    //==============================================================================\n    // Private methods from this point...\n\n    /** An implementation subclass must call this when the session first connects\n     *  @private\n     */\n    handleSessionConnection()\n    {\n        if (! this.status.connected)\n        {\n            this.requestSessionStatus();\n            this.requestAudioDeviceProperties();\n\n            if (this.currentPatchLocation)\n            {\n                this.loadPatch (this.currentPatchLocation);\n                this.currentPatchLocation = undefined;\n            }\n        }\n    }\n\n    /** An implementation subclass must call this when a message arrives\n     *  @private\n     */\n    handleMessageFromServer (msg)\n    {\n        this.lastServerMessageTime = Date.now();\n        const type = msg.type;\n        const message = msg.message;\n\n        switch (type)\n        {\n            case \"cpu_info\":\n            case \"audio_device_properties\":\n            case \"patch_source_changed\":\n            case \"infinite_loop_detected\":\n                this.dispatchEvent (type, message);\n                break;\n\n            case \"session_status\":\n                message.connected = true;\n                this.setNewStatus (message);\n                break;\n\n            case \"req_file_read\":\n                this.handleFileReadRequest (message);\n                break;\n\n            case \"ping\":\n                this.sendMessageToServer ({ type: \"ping\" });\n                break;\n\n            default:\n                if (type.startsWith (\"audio_input_mode_\") || type.startsWith (\"reply_\"))\n                {\n                    this.dispatchEvent (type, message);\n                    break;\n                }\n\n                for (const c of this.activePatchConnections)\n                    c.deliverMessageFromServer (msg);\n\n                break;\n        }\n    }\n\n    /** @private */\n    checkServerStillExists()\n    {\n        if (Date.now() > this.lastServerMessageTime + 10000)\n            this.setNewStatus ({\n                connected: false,\n                loaded: false,\n                status: \"Cannot connect to the Cmajor server\"\n            });\n    }\n\n    /** @private */\n    setNewStatus (newStatus)\n    {\n        this.status = newStatus;\n        this.dispatchEvent (\"session_status\", this.status);\n        this.updateCPULevelUpdateRate();\n    }\n\n    /** @private */\n    updateCPULevelUpdateRate()\n    {\n        const rate = this.getNumListenersForType (\"cpu_info\") > 0 ? (this.cpuFramesPerUpdate || 15000) : 0;\n        this.sendMessageToServer ({ type: \"set_cpu_info_rate\",\n                                    framesPerCallback: rate });\n    }\n\n    /** @private */\n    handleFileReadRequest (request)\n    {\n        const contentProvider = this.files?.get (request?.file);\n\n        if (contentProvider && request.offset !== null && request.size != 0)\n        {\n            const data = contentProvider.read (request.offset, request.size);\n            const reader = new FileReader();\n\n            reader.onloadend = (e) =>\n            {\n                const base64 = e.target?.result?.split?.(\",\", 2)[1];\n\n                if (base64)\n                    this.sendMessageToServer ({ type: \"file_content\",\n                                                file: request.file,\n                                                data: base64,\n                                                start: request.offset });\n            };\n\n            reader.readAsDataURL (data);\n        }\n    }\n\n    /** @private */\n    createReplyID (stem)\n    {\n        return \"reply_\" + stem + this.createRandomID();\n    }\n\n    /** @private */\n    createRandomID()\n    {\n        return (Math.floor (Math.random() * 100000000)).toString();\n    }\n}\n",
							"id": "n6tXTGUu0Qmbno0U",
							"mime": "text/javascript"
						},
						{
							"name": "assets",
							"type": "directory",
							"children": [
								{
									"name": "cmajor-logo.svg",
									"type": "file",
									"binary": true,
									"content": "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjE1MCAxNDAgMTYyMCA2NzAiPgogIDxnPgogICAgPHBhdGgKICAgICAgZD0iTTk0NC41MTEsNDYyLjM3MlY1ODcuMDQ5SDg5Ni41NThWNDY5LjE2NWMwLTI3LjU3Mi0xMy4xODktNDQuNzU3LTM1Ljk2Ni00NC43NTctMjMuNTc3LDAtMzkuOTU4LDE5LjE4My0zOS45NTgsNDYuNzU1VjU4Ny4wNDlINzczLjA3OFY0NjkuMTY1YzAtMjcuNTcyLTEzLjE4NS00NC43NTctMzUuOTYyLTQ0Ljc1Ny0yMi4zNzgsMC0zOS4xNjIsMTkuNTgxLTM5LjE2Miw0Ni43NTVWNTg3LjA0OUg2NTAuNHYtMjAxLjRoNDcuNTUxdjI4Ljc3YzguMzktMTkuNTgxLDI4Ljc3MS0zMi43NjYsNTQuMzQ2LTMyLjc2NiwyNy41NzIsMCw0Ni4zNTMsMTEuNTg5LDU2LjM0MywzNS4xNjYsMTEuNTg5LTIzLjU3NywzMy41Ny0zNS4xNjYsNjUuOTM0LTM1LjE2NkM5MTguOTM3LDM4MS42NTIsOTQ0LjUxMSw0MTIuNDIsOTQ0LjUxMSw0NjIuMzcyWm0xOTMuNDIyLTc2LjcyNGg0Ny45NTN2MjAxLjRoLTQ3Ljk1M1Y1NTcuODc2Yy02Ljc5NCwxOS41ODEtMzEuMTY3LDMzLjU2Ny02NC4zMzUsMzMuNTY3cS00Mi41NTgsMC03MS45MjgtMjkuOTY5Yy0xOS4xODMtMjAuMzgxLTI4Ljc3MS00NS4xNTUtMjguNzcxLTc1LjEyOHM5LjU4OC01NC43NDMsMjguNzcxLTc0LjcyNmMxOS41ODEtMjAuMzc3LDQzLjU1Ni0zMC4zNjYsNzEuOTI4LTMwLjM2NiwzMy4xNjgsMCw1Ny41NDEsMTMuOTg1LDY0LjMzNSwzMy41NjZabTMuNiwxMDAuN2MwLTE3LjU3OS01Ljk5My0zMi4zNjgtMTcuOTgxLTQzLjk1My0xMS41ODktMTEuNTktMjYuMzc0LTE3LjU4My00My41NTktMTcuNTgzcy0zMS4xNjcsNS45OTMtNDIuNzU2LDE3LjU4M2MtMTEuMTg3LDExLjU4NS0xNi43ODMsMjYuMzc0LTE2Ljc4Myw0My45NTNzNS42LDMyLjM2OSwxNi43ODMsNDMuOTU4YzExLjU4OSwxMS41ODksMjUuNTc1LDE3LjU4Myw0Mi43NTYsMTcuNTgzczMxLjk3LTUuOTk0LDQzLjU1OS0xNy41ODNDMTEzNS41MzcsNTE4LjcxNSwxMTQxLjUzLDUwMy45MjksMTE0MS41Myw0ODYuMzQ2Wm04NC4xMzUsMTEzLjQ5YzAsMjEuMTc3LTcuNTk0LDI5LjU3MS0yNS41NzUsMjkuNTcxLTIuOCwwLTcuMTkyLS40LTEzLjE4NS0uOHY0Mi4zNTdjNC4zOTMuOCwxMS4xODcsMS4yLDE5Ljk3OSwxLjIsNDQuMzU1LDAsNjYuNzM0LTIyLjc3Niw2Ni43MzQtNjcuOTMyVjM4NS42NDhoLTQ3Ljk1M1ptMjMuOTc4LTI5NC4xMDhjLTE1Ljk4NywwLTI4Ljc3NCwxMi4zODUtMjguNzc0LDI4LjM3MnMxMi43ODcsMjguMzY5LDI4Ljc3NCwyOC4zNjlhMjguMzcxLDI4LjM3MSwwLDAsMCwwLTU2Ljc0MVptMjM5LjY3NCwxMDQuNjk0YzIxLjE3NywyMC4zODEsMzEuOTY2LDQ1Ljk1NiwzMS45NjYsNzUuOTI0cy0xMC43ODksNTUuNTQ3LTMxLjk2Niw3NS45MjgtNDcuMTU0LDMwLjc2OS03Ny45MjYsMzAuNzY5LTU2Ljc0MS0xMC4zOTItNzcuOTIyLTMwLjc2OS0zMS45NjYtNDUuOTU1LTMxLjk2Ni03NS45MjgsMTAuNzg5LTU1LjU0MywzMS45NjYtNzUuOTI0LDQ3LjE1NC0zMC43NjgsNzcuOTIyLTMwLjc2OFMxNDY4LjEzNiwzOTAuMDQxLDE0ODkuMzE3LDQxMC40MjJabS0xNS41ODUsNzUuOTI0YzAtMTcuOTgxLTUuOTk0LTMyLjc2Ni0xNy45ODUtNDQuNzUzLTExLjk4OC0xMi4zOS0yNi43NzMtMTguMzgzLTQ0LjM1Ni0xOC4zODMtMTcuOTgxLDAtMzIuNzY2LDUuOTkzLTQ0Ljc1NCwxOC4zODMtMTEuNTg5LDExLjk4Ny0xNy41ODMsMjYuNzcyLTE3LjU4Myw0NC43NTNzNS45OTQsMzIuNzcsMTcuNTgzLDQ1LjE1NmMxMS45ODgsMTEuOTg3LDI2Ljc3MywxNy45ODUsNDQuNzU0LDE3Ljk4NXEyNi4zNzQsMCw0NC4zNTYtMTcuOTg1QzE0NjcuNzM4LDUxOS4xMTYsMTQ3My43MzIsNTA0LjMzMSwxNDczLjczMiw0ODYuMzQ2Wm0xODQuMTIyLTEwNC42OTRjLTI4LjM3MywwLTUwLjM0OSwxMi43ODctNTkuOTQxLDMzLjk2NFYzODUuNjQ4aC00Ny41NTF2MjAxLjRoNDcuNTUxdi0xMDUuOWMwLTMzLjE2OSwyMS4xNzctNTMuOTQ4LDU0LjM0NS01My45NDhhMTAyLjU2NiwxMDIuNTY2LDAsMCwxLDE5Ljk3OSwyVjM4Mi44NUE3NC4zNjQsNzQuMzY0LDAsMCwwLDE2NTcuODU0LDM4MS42NTJaTTU4MC43NzcsNTY5LjI1bDMzLjkwOSwzMC4wODdjLTQwLjY0NCw0Ny4wMjctOTIuODkyLDcwLjgyOS0xNTYuMTczLDcwLjgyOS01OC42MzcsMC0xMDguNTY3LTE5LjczNy0xNDkuNzg4LTU5LjhDMjY4LjA4Miw1NzAuMzEsMjQ3Ljc2Myw1MTkuOCwyNDcuNzYzLDQ2MHMyMC4zMTktMTA5LjcyNiw2MC45NjItMTQ5Ljc4NmM0MS4yMjEtNDAuMDU5LDkxLjE1MS02MC4zOCwxNDkuNzg4LTYwLjM4LDYyLjExOSwwLDExMy43ODksMjIuNjQzLDE1NC40MzIsNjguNTA3bC0zMy44NjQsMzAuMTM0Yy0xNi4yNjEtMTkuMDY5LTM1LjI3Mi0zMi45MzMtNTYuOTc4LTQxLjc4M1Y0ODYuMzQ2SDQ5Ni41MzZWNjIxLjFRNTQ2Ljk1NCw2MTAuMjMxLDU4MC43NzcsNTY5LjI1Wm0tMjM3Ljc0LDkuMUExNTAuMjQ3LDE1MC4yNDcsMCwwLDAsMzk2LjUsNjE0LjA0VjQ4Ni4zNDZIMzcwLjkyOVYzMTkuMzg3YTE1OS42MjMsMTU5LjYyMywwLDAsMC0yNy44OTIsMjIuODI5UTI5Ny4xODcsMzg5LjE2LDI5Ny4xODYsNDYwQzI5Ny4xODYsNTA3LjIyOSwzMTIuNDcsNTQ3LjA2LDM0My4wMzcsNTc4LjM1NFptMTE1LjQ3Niw0Ni42NmExODcuMTc4LDE4Ny4xNzgsMCwwLDAsMjcuMjgtMS45NFY0ODYuMzQ2SDQ3NC41NDhWMjk1LjY2NmMtNS4yMzYtLjQyNi0xMC41NjctLjY3Ny0xNi4wMzUtLjY3N2ExNzcuMzg3LDE3Ny4zODcsMCwwLDAtNDAuMDI5LDQuNFY0ODYuMzQ2SDQwNy4yMzl2MTMxLjRBMTc1LjE2MSwxNzUuMTYxLDAsMCwwLDQ1OC41MTMsNjI1LjAxNFoiCiAgICAgIGZpbGw9IiNmZmYiIC8+CiAgPC9nPgo8L3N2Zz4K",
									"id": "PDV6XUZCJ3sZ7Aos",
									"mime": "image/svg+xml"
								}
							],
							"id": "2ecxePxRAOQbgJX8"
						},
						{
							"name": "cmaj-generic-patch-view.js",
							"type": "file",
							"binary": false,
							"content": "//\n//     ,ad888ba,                              88\n//    d8\"'    \"8b\n//   d8            88,dba,,adba,   ,aPP8A.A8  88\n//   Y8,           88    88    88  88     88  88\n//    Y8a.   .a8P  88    88    88  88,   ,88  88     (C)2024 Cmajor Software Ltd\n//     '\"Y888Y\"'   88    88    88  '\"8bbP\"Y8  88     https://cmajor.dev\n//                                           ,88\n//                                        888P\"\n//\n//  This file may be used under the terms of the ISC license:\n//\n//  Permission to use, copy, modify, and/or distribute this software for any purpose with or\n//  without fee is hereby granted, provided that the above copyright notice and this permission\n//  notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\n//  WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n//  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n//  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\n//  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n//  CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nimport * as Controls from \"./cmaj-parameter-controls.js\"\n\n//==============================================================================\n/** A simple, generic view which can control any type of patch */\nclass GenericPatchView extends HTMLElement\n{\n    /** Creates a view for a patch.\n     *  @param {PatchConnection} patchConnection - the connection to the target patch\n     */\n    constructor (patchConnection)\n    {\n        super();\n\n        this.patchConnection = patchConnection;\n\n        this.statusListener = status =>\n        {\n            this.status = status;\n            this.createControlElements();\n        };\n\n        this.attachShadow ({ mode: \"open\" });\n        this.shadowRoot.innerHTML = this.getHTML();\n\n        this.titleElement      = this.shadowRoot.getElementById (\"patch-title\");\n        this.parametersElement = this.shadowRoot.getElementById (\"patch-parameters\");\n    }\n\n    //==============================================================================\n    /** @private */\n    connectedCallback()\n    {\n        this.patchConnection.addStatusListener (this.statusListener);\n        this.patchConnection.requestStatusUpdate();\n    }\n\n    /** @private */\n    disconnectedCallback()\n    {\n        this.patchConnection.removeStatusListener (this.statusListener);\n    }\n\n    /** @private */\n    createControlElements()\n    {\n        this.parametersElement.innerHTML = \"\";\n        this.titleElement.innerText = this.status?.manifest?.name ?? \"Cmajor\";\n\n        for (const endpointInfo of this.status?.details?.inputs)\n        {\n            if (! endpointInfo.annotation?.hidden)\n            {\n                const control = Controls.createLabelledControl (this.patchConnection, endpointInfo);\n\n                if (control)\n                    this.parametersElement.appendChild (control);\n            }\n        }\n    }\n\n    /** @private */\n    getHTML()\n    {\n        return `\n            <style>\n            * {\n                box-sizing: border-box;\n                user-select: none;\n                -webkit-user-select: none;\n                -moz-user-select: none;\n                -ms-user-select: none;\n                font-family: Avenir, 'Avenir Next LT Pro', Montserrat, Corbel, 'URW Gothic', source-sans-pro, sans-serif;\n                font-size: 0.9rem;\n            }\n\n            :host {\n                --header-height: 2.5rem;\n                --foreground: #ffffff;\n                --background: #1a1a1a;\n\n                display: block;\n                height: 100%;\n                background-color: var(--background);\n            }\n\n            .main {\n                background: var(--background);\n                height: 100%;\n            }\n\n            .header {\n                width: 100%;\n                height: var(--header-height);\n                border-bottom: 0.1rem solid var(--foreground);\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n            }\n\n            #patch-title {\n                color: var(--foreground);\n                text-overflow: ellipsis;\n                white-space: nowrap;\n                overflow: hidden;\n                cursor: default;\n                font-size: 140%;\n            }\n\n            .logo {\n                flex: 1;\n                height: 80%;\n                margin-left: 0.3rem;\n                margin-right: 0.3rem;\n                background-color: var(--foreground);\n                mask: url(cmaj_api/assets/cmajor-logo.svg);\n                mask-repeat: no-repeat;\n                -webkit-mask: url(cmaj_api/assets/cmajor-logo.svg);\n                -webkit-mask-repeat: no-repeat;\n                min-width: 6.25rem;\n            }\n\n            .header-filler {\n                flex: 1;\n            }\n\n            #patch-parameters {\n                height: calc(100% - var(--header-height));\n                overflow: auto;\n                padding: 1rem;\n                text-align: center;\n            }\n\n            ${Controls.getAllCSS()}\n\n            </style>\n\n            <div class=\"main\">\n              <div class=\"header\">\n                <span class=\"logo\"></span>\n                <h2 id=\"patch-title\"></h2>\n                <div class=\"header-filler\"></div>\n              </div>\n              <div id=\"patch-parameters\"></div>\n            </div>`;\n    }\n}\n\nwindow.customElements.define (\"cmaj-generic-patch-view\", GenericPatchView);\n\n//==============================================================================\n/** Creates a generic view element which can be used to control any patch.\n *  @param {PatchConnection} patchConnection - the connection to the target patch\n */\nexport default function createPatchView (patchConnection)\n{\n    return new GenericPatchView (patchConnection);\n}\n",
							"id": "G5fJBTUnBfAs1cGL",
							"mime": "text/javascript"
						},
						{
							"name": "cmaj-patch-view.js",
							"type": "file",
							"binary": false,
							"content": "//\n//     ,ad888ba,                              88\n//    d8\"'    \"8b\n//   d8            88,dba,,adba,   ,aPP8A.A8  88\n//   Y8,           88    88    88  88     88  88\n//    Y8a.   .a8P  88    88    88  88,   ,88  88     (C)2024 Cmajor Software Ltd\n//     '\"Y888Y\"'   88    88    88  '\"8bbP\"Y8  88     https://cmajor.dev\n//                                           ,88\n//                                        888P\"\n//\n//  This file may be used under the terms of the ISC license:\n//\n//  Permission to use, copy, modify, and/or distribute this software for any purpose with or\n//  without fee is hereby granted, provided that the above copyright notice and this permission\n//  notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\n//  WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n//  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\n//  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\n//  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n//  CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nimport { PatchConnection } from \"./cmaj-patch-connection.js\"\n\n/** Returns a list of types of view that can be created for this patch.\n */\nexport function getAvailableViewTypes (patchConnection)\n{\n    if (! patchConnection)\n        return [];\n\n    if (patchConnection.manifest?.view?.src)\n        return [\"custom\", \"generic\"];\n\n    return [\"generic\"];\n}\n\n/** Creates and returns a HTMLElement view which can be shown to control this patch.\n *\n *  If no preferredType argument is supplied, this will return either a custom patch-specific\n *  view (if the manifest specifies one), or a generic view if not. The preferredType argument\n *  can be used to choose one of the types of view returned by getAvailableViewTypes().\n *\n *  @param {PatchConnection} patchConnection - the connection to use\n *  @param {string} preferredType - the name of the type of view to open, e.g. \"generic\"\n *                                  or the name of one of the views in the manifest\n *  @returns {HTMLElement} a HTMLElement that can be displayed as the patch GUI\n */\nexport async function createPatchView (patchConnection, preferredType)\n{\n    if (patchConnection?.manifest)\n    {\n        let view = patchConnection.manifest.view;\n\n        if (view && preferredType === \"generic\")\n            if (view.src)\n                view = undefined;\n\n        const viewModuleURL = view?.src ? patchConnection.getResourceAddress (view.src) : \"./cmaj-generic-patch-view.js\";\n        const viewModule = await import (viewModuleURL);\n        const patchView = await viewModule?.default (patchConnection);\n\n        if (patchView)\n        {\n            patchView.style.display = \"block\";\n\n            if (view?.width > 10)\n                patchView.style.width = view.width + \"px\";\n            else\n                patchView.style.width = undefined;\n\n            if (view?.height > 10)\n                patchView.style.height = view.height + \"px\";\n            else\n                patchView.style.height = undefined;\n\n            return patchView;\n        }\n    }\n\n    return undefined;\n}\n\n/** If a patch view declares itself to be scalable, this will attempt to scale it to fit\n *  into a given parent element.\n *\n *  @param {HTMLElement} view - the patch view\n *  @param {HTMLElement} parentToScale - the patch view's direct parent element, to which\n *                                       the scale factor will be applied\n *  @param {HTMLElement} parentContainerToFitTo - an outer parent of the view, whose bounds\n *                                                the view will be made to fit\n */\nexport function scalePatchViewToFit (view, parentToScale, parentContainerToFitTo)\n{\n    function getClientSize (view)\n    {\n        const clientStyle = getComputedStyle (view);\n\n        return {\n            width:  view.clientHeight - parseFloat (clientStyle.paddingTop)  - parseFloat (clientStyle.paddingBottom),\n            height: view.clientWidth  - parseFloat (clientStyle.paddingLeft) - parseFloat (clientStyle.paddingRight)\n        };\n    }\n\n    const scaleLimits = view.getScaleFactorLimits?.();\n\n    if (scaleLimits && (scaleLimits.minScale || scaleLimits.maxScale))\n    {\n        const minScale = scaleLimits.minScale || 0.25;\n        const maxScale = scaleLimits.maxScale || 5.0;\n\n        const targetSize = getClientSize (parentContainerToFitTo);\n        const clientSize = getClientSize (view);\n\n        const scaleW = targetSize.width / clientSize.width;\n        const scaleH = targetSize.height / clientSize.height;\n\n        const scale = Math.min (maxScale, Math.max (minScale, Math.min (scaleW, scaleH)));\n\n        parentToScale.style.transform = `scale(${scale})`;\n    }\n    else\n    {\n        parentToScale.style.transform = \"none\";\n    }\n}\n",
							"id": "sblQtTlICYEk3080",
							"mime": "text/javascript"
						}
					],
					"id": "x1QbU5fmtqw7ISOD"
				},
				{
					"name": "README.md",
					"type": "file",
					"binary": false,
					"content": "### Auto-generated HTML & Javascript for Cmajor Patch \"vafilters\"\n\nThis folder contains some self-contained HTML/Javascript files that play and show a Cmajor\npatch using WebAssembly and WebAudio.\n\nFor `index.html` to display correctly, this folder needs to be served as HTTP, so if you're\nrunning it locally, you'll need to start a webserver that serves this folder, and then\npoint your browser at whatever URL your webserver provides. For example, you could run\n`python3 -m http.server` in this folder, and then browse to the address it chooses.\n\nThe files have all been generated using the Cmajor command-line tool:\n```\ncmaj generate --target=webaudio --output=<location of this folder> <path to the .cmajorpatch file to convert>\n```\n\n- `index.html` is a minimal page that creates the javascript object that implements the patch,\n   connects it to the default audio and MIDI devices, and displays its view.\n- `vafilters.js` - this is the Javascript wrapper class for the patch, encapsulating its\n   DSP as webassembly, and providing an API that is used to both render the audio and\n   control its properties.\n- `cmaj_api` - this folder contains javascript helper modules and resources.\n\nTo learn more about Cmajor, visit [cmajor.dev](cmajor.dev)\n",
					"id": "BMPUBXIDmPRUD4TN",
					"mime": "text/markdown"
				},
				{
					"name": "vafilters.js",
					"type": "file",
					"binary": false,
					"content": "//==============================================================================\n//\n//  This file contains a Javascript/Webassembly/WebAudio export of the Cmajor\n//  patch 'vafilters.cmajorpatch'.\n//\n//  This file was auto-generated by the Cmajor toolkit.\n//\n//  To use it, import this module into your HTML/Javascript code and call\n//  `createAudioWorkletNodePatchConnection()` and\n//  `connectPatchToDefaultAudioAndMIDI()` to create an instance of the\n//  patch and to connect it to the web audio and MIDI devices.\n//\n//  For more details about Cmajor, visit https://cmajor.dev\n//\n//==============================================================================\n\nimport * as helpers from \"./cmaj_api/cmaj_audio_worklet_helper.js\"\n\n\n//==============================================================================\n/** This exports the patch's manifest, in case a caller needs to find out about its properties.\n */\nexport const manifest =\n{\n  \"CmajorVersion\": 1,\n  \"ID\": \"com.OliLarkin.pirklevafilters\",\n  \"version\": \"1.0\",\n  \"name\": \"vafilters\",\n  \"description\": \"vafilters by will pirkle\",\n  \"category\": \"generator\",\n  \"manufacturer\": \"Oli Larkin\",\n  \"isInstrument\": true,\n  \"source\": \"vafilters.cmajor\"\n};\n\n/** Returns the patch's output endpoint list */\nexport function getOutputEndpoints() { return FilterTester.prototype.getOutputEndpoints(); }\n\n/** Returns the patch's input endpoint list */\nexport function getInputEndpoints()  { return FilterTester.prototype.getInputEndpoints(); }\n\n//==============================================================================\n/**  Creates an audio worklet node for the patch with the given name, attaches it\n *   to the audio context provided, and returns an object containing the node\n *   and a PatchConnection class to control it.\n *\n *   @param {AudioContext} audioContext - a web audio AudioContext object\n *   @param {string} workletName - the name to give the new worklet that is created\n *   @returns {Object} an object containing the new AudioWorkletNode and PatchConnection\n */\nexport async function createAudioWorkletNodePatchConnection (audioContext, workletName)\n{\n  const node = await helpers.createAudioWorkletNode (FilterTester, audioContext, workletName, Date.now() & 0x7fffffff);\n  const connection = new helpers.AudioWorkletPatchConnection (node, manifest);\n\n  if (manifest.worker?.length > 0)\n  {\n    connection.readResource = async (path) =>\n    {\n      return fetch (path);\n    };\n\n    connection.readResourceAsAudioData = async (path) =>\n    {\n      const response = await connection.readResource (path);\n      const buffer = await audioContext.decodeAudioData (await response.arrayBuffer());\n\n      let frames = [];\n\n      for (let i = 0; i < buffer.length; ++i)\n        frames.push ([]);\n\n      for (let chan = 0; chan < buffer.numberOfChannels; ++chan)\n      {\n        const src = buffer.getChannelData (chan);\n\n        for (let i = 0; i < buffer.length; ++i)\n          frames[i].push (src[i]);\n      }\n\n      return {\n        frames,\n        sampleRate: buffer.sampleRate\n      }\n    };\n\n    import (connection.getResourceAddress (manifest.worker)).then (module =>\n    {\n      module.default (connection);\n    });\n  }\n\n  return { node, connection };\n}\n\n//==============================================================================\n/**  Takes an audio node and connection that were returned by `createAudioWorkletNodePatchConnection()`\n *   and attempts to hook them up to the default audio and MIDI channels.\n *\n *   @param {AudioWorkletNode} node - the audio node\n *   @param {PatchConnection} connection - the PatchConnection object created by `createAudioWorkletNodePatchConnection()`\n *   @param {AudioContext} audioContext - a web audio AudioContext object\n */\nexport async function connectPatchToDefaultAudioAndMIDI (node, connection, audioContext)\n{\n  helpers.connectDefaultAudioAndMIDI ({ node, connection, audioContext, patchInputList: getInputEndpoints() });\n}\n\n/***********************************************************************************\n *\n *   A Javascript/Webassembly implementation of the Cmajor processor 'FilterTester'.\n *\n *   This class was auto-generated by the Cmajor toolkit.\n *\n *   To use it, construct an instance of this class, and call `initialise()` to\n *   asynchronously prepare it for use. Once initialised, the class provides\n *   appropriate setter/getter methods for reading/writing data to its endpoints,\n *   and an `advance()` method to render the next block.\n *\n *   This roughly mirrors functionality of the cmajor Performer API - see the\n *   C++ API classes and Cmajor docs for more information about how this is used.\n */\nclass FilterTester\n{\n  /** After constructing one of these objects, call its\n   *  initialise() method to prepare it for use.\n   */\n  constructor()\n  {\n  }\n\n  //==============================================================================\n  /** Prepares this processor for use.\n   *\n   *  @param {number} sessionID - A unique integer ID which will be used for `processor.session`.\n   *  @param {number} frequency - The frequency in Hz that the processor will be expected to run at.\n   */\n  async initialise (sessionID, frequency)\n  {\n    if (! ((sessionID ^ 0) > 1))\n      throw new Error (\"initialise() requires a valid non-zero session ID argument\");\n\n    if (! (frequency > 1))\n      throw new Error (\"initialise() requires a valid frequency argument\");\n\n    const memory = new WebAssembly.Memory ({ initial: 3 });\n    const stack = new WebAssembly.Global ({ value: \"i32\", mutable: true }, 81856);\n\n    const imports = {\n      env: {\n        __linear_memory: memory,\n        __memory_base: 0,\n        __stack_pointer: stack,\n        __table_base: 0,\n        memcpy:  (dst, src, len) => { this.byteMemory.copyWithin (dst, src, src + len); return dst; },\n        memmove: (dst, src, len) => { this.byteMemory.copyWithin (dst, src, src + len); return dst; },\n        memset:  (dst, value, len) => { this.byteMemory.fill (value, dst, dst + len); return dst; }\n      },\n    };\n\n    const result = await WebAssembly.instantiate (this._getWasmBytes(), imports);\n    this.instance = result.instance;\n    const exports = this.instance.exports;\n\n    const memoryBuffer = exports.memory?.buffer || memory.buffer;\n    this.byteMemory = new Uint8Array (memoryBuffer);\n    this.memoryDataView = new DataView (memoryBuffer);\n\n    if (exports.advanceBlock)\n      this._advance = numFrames => exports.advanceBlock (81856, 82160, numFrames);\n    else\n      this._advance = () => exports.advanceOneFrame (81856, 82160);\n\n    exports.initialise?.(81856, sessionID, frequency);\n    return true;\n  }\n\n  //==============================================================================\n  /** Advances the processor by a number of frames.\n   *\n   *  Before calling `advance()` you should use the appropriate functions to\n   *  push data and events into the processor's input endpoints. After calling\n   *  `advance()` you can use its output endpoint access functions to read the\n   *  results.\n   *\n   *  @param {number} numFrames - An integer number of frames to advance.\n   *                              This must be greater than zero.\n   */\n  advance (numFrames)\n  {\n    this.byteMemory.fill (0, 82160, 82160 + numFrames * 4);\n    this._advance (numFrames);\n  }\n\n  //==============================================================================\n  /** Returns an object which encapsulates the state of the patch at this point.\n   *  The state can be restored by passing this object to `restoreState()`.\n   */\n  getState()\n  {\n    return { memory: this.byteMemory.slice(0) };\n  }\n\n  /** Restores the patch to a state that was previously saved by a call to `getState()`\n   */\n  restoreState (savedState)\n  {\n    if (savedState?.memory && savedState.memory?.length === this.byteMemory.length)\n      this.byteMemory.set (savedState.memory);\n    else\n      throw Error (\"restoreState(): not a valid state object\");\n  }\n\n  /** Returns a list of the output endpoints that this processor exposes.\n   *  @returns {Array}\n   */\n  getOutputEndpoints()\n  {\n    return [\n      {\n        \"endpointID\": \"out\",\n        \"endpointType\": \"stream\",\n        \"dataType\": {\n          \"type\": \"float32\"\n        },\n        \"purpose\": \"audio out\",\n        \"numAudioChannels\": 1\n      }\n    ];\n  }\n\n  /** Returns a list of the input endpoints that this processor exposes.\n   *  @returns {Array}\n   */\n  getInputEndpoints()\n  {\n    return [\n      {\n        \"endpointID\": \"testSignalShape\",\n        \"endpointType\": \"event\",\n        \"dataType\": {\n          \"type\": \"float32\"\n        },\n        \"annotation\": {\n          \"name\": \"Test Signal Shape\",\n          \"min\": 0,\n          \"max\": 4,\n          \"init\": 0,\n          \"text\": \"Sine|Triangle|Square|Ramp Up|Ramp Down\"\n        },\n        \"purpose\": \"parameter\"\n      },\n      {\n        \"endpointID\": \"testSignalFrequency\",\n        \"endpointType\": \"event\",\n        \"dataType\": {\n          \"type\": \"float32\"\n        },\n        \"annotation\": {\n          \"name\": \"Test Signal Frequency\",\n          \"min\": 10,\n          \"max\": 200,\n          \"init\": 50,\n          \"unit\": \"Hz\"\n        },\n        \"purpose\": \"parameter\"\n      },\n      {\n        \"endpointID\": \"volume\",\n        \"endpointType\": \"event\",\n        \"dataType\": {\n          \"type\": \"float32\"\n        },\n        \"annotation\": {\n          \"name\": \"Test Signal volume\",\n          \"unit\": \"dB\",\n          \"min\": -85,\n          \"max\": 6,\n          \"init\": 0\n        },\n        \"purpose\": \"parameter\"\n      },\n      {\n        \"endpointID\": \"frequencyIn\",\n        \"endpointType\": \"event\",\n        \"dataType\": {\n          \"type\": \"float32\"\n        },\n        \"annotation\": {\n          \"name\": \"Filter Base Frequency\",\n          \"min\": 10,\n          \"max\": 10000,\n          \"init\": 1000,\n          \"unit\": \"Hz\"\n        },\n        \"purpose\": \"parameter\"\n      },\n      {\n        \"endpointID\": \"qualityIn\",\n        \"endpointType\": \"event\",\n        \"dataType\": {\n          \"type\": \"float32\"\n        },\n        \"annotation\": {\n          \"name\": \"Filter Q\",\n          \"min\": 1,\n          \"max\": 10,\n          \"init\": 1,\n          \"step\": 0.01\n        },\n        \"purpose\": \"parameter\"\n      },\n      {\n        \"endpointID\": \"modeIn\",\n        \"endpointType\": \"event\",\n        \"dataType\": {\n          \"type\": \"float32\"\n        },\n        \"annotation\": {\n          \"name\": \"Filter Mode\",\n          \"min\": 0,\n          \"max\": 1,\n          \"init\": 0,\n          \"text\": \"Lowpass|Highpass\"\n        },\n        \"purpose\": \"parameter\"\n      },\n      {\n        \"endpointID\": \"nlIn\",\n        \"endpointType\": \"event\",\n        \"dataType\": {\n          \"type\": \"float32\"\n        },\n        \"annotation\": {\n          \"name\": \"Filter NonLinearites\",\n          \"min\": 0,\n          \"max\": 1,\n          \"init\": 0,\n          \"text\": \"Off|On\"\n        },\n        \"purpose\": \"parameter\"\n      },\n      {\n        \"endpointID\": \"satIn\",\n        \"endpointType\": \"event\",\n        \"dataType\": {\n          \"type\": \"float32\"\n        },\n        \"annotation\": {\n          \"name\": \"Filter Saturation\",\n          \"min\": 1,\n          \"max\": 10,\n          \"init\": 1,\n          \"step\": 0.01\n        },\n        \"purpose\": \"parameter\"\n      },\n      {\n        \"endpointID\": \"rateHzIn\",\n        \"endpointType\": \"event\",\n        \"dataType\": {\n          \"type\": \"float32\"\n        },\n        \"annotation\": {\n          \"name\": \"LFO Rate (Hz)\",\n          \"min\": 0.01,\n          \"max\": 10,\n          \"init\": 1,\n          \"step\": 0.01,\n          \"unit\": \"Hz\"\n        },\n        \"purpose\": \"parameter\"\n      },\n      {\n        \"endpointID\": \"modDepthIn\",\n        \"endpointType\": \"event\",\n        \"dataType\": {\n          \"type\": \"float32\"\n        },\n        \"annotation\": {\n          \"name\": \"LFO Depth\",\n          \"min\": 0.0,\n          \"max\": 48,\n          \"init\": 0.0,\n          \"unit\": \"Semi\"\n        },\n        \"purpose\": \"parameter\"\n      },\n      {\n        \"endpointID\": \"shapeIn\",\n        \"endpointType\": \"event\",\n        \"dataType\": {\n          \"type\": \"float32\"\n        },\n        \"annotation\": {\n          \"name\": \"LFO Shape\",\n          \"min\": 0,\n          \"max\": 5,\n          \"init\": 0,\n          \"text\": \"Sine|Triangle|Square|Ramp Up|Ramp Down|Random\"\n        },\n        \"purpose\": \"parameter\"\n      }\n    ];\n  }\n\n  /** Sends an event of type `float32` to endpoint \"testSignalShape\".\n   *  @param {number} eventValue - The event to be added to the queue for this endpoint.\n   */\n  sendInputEvent_testSignalShape (eventValue)\n  {\n    this.instance.exports._sendEvent_testSignalShape (81856, eventValue);\n  }\n\n  /** Sends an event of type `float32` to endpoint \"testSignalFrequency\".\n   *  @param {number} eventValue - The event to be added to the queue for this endpoint.\n   */\n  sendInputEvent_testSignalFrequency (eventValue)\n  {\n    this.instance.exports._sendEvent_testSignalFrequency (81856, eventValue);\n  }\n\n  /** Sends an event of type `float32` to endpoint \"volume\".\n   *  @param {number} eventValue - The event to be added to the queue for this endpoint.\n   */\n  sendInputEvent_volume (eventValue)\n  {\n    this.instance.exports._sendEvent_volume (81856, eventValue);\n  }\n\n  /** Sends an event of type `float32` to endpoint \"frequencyIn\".\n   *  @param {number} eventValue - The event to be added to the queue for this endpoint.\n   */\n  sendInputEvent_frequencyIn (eventValue)\n  {\n    this.instance.exports._sendEvent_frequencyIn (81856, eventValue);\n  }\n\n  /** Sends an event of type `float32` to endpoint \"qualityIn\".\n   *  @param {number} eventValue - The event to be added to the queue for this endpoint.\n   */\n  sendInputEvent_qualityIn (eventValue)\n  {\n    this.instance.exports._sendEvent_qualityIn (81856, eventValue);\n  }\n\n  /** Sends an event of type `float32` to endpoint \"modeIn\".\n   *  @param {number} eventValue - The event to be added to the queue for this endpoint.\n   */\n  sendInputEvent_modeIn (eventValue)\n  {\n    this.instance.exports._sendEvent_modeIn (81856, eventValue);\n  }\n\n  /** Sends an event of type `float32` to endpoint \"nlIn\".\n   *  @param {number} eventValue - The event to be added to the queue for this endpoint.\n   */\n  sendInputEvent_nlIn (eventValue)\n  {\n    this.instance.exports._sendEvent_nlIn (81856, eventValue);\n  }\n\n  /** Sends an event of type `float32` to endpoint \"satIn\".\n   *  @param {number} eventValue - The event to be added to the queue for this endpoint.\n   */\n  sendInputEvent_satIn (eventValue)\n  {\n    this.instance.exports._sendEvent_satIn (81856, eventValue);\n  }\n\n  /** Sends an event of type `float32` to endpoint \"rateHzIn\".\n   *  @param {number} eventValue - The event to be added to the queue for this endpoint.\n   */\n  sendInputEvent_rateHzIn (eventValue)\n  {\n    this.instance.exports._sendEvent_rateHzIn (81856, eventValue);\n  }\n\n  /** Sends an event of type `float32` to endpoint \"modDepthIn\".\n   *  @param {number} eventValue - The event to be added to the queue for this endpoint.\n   */\n  sendInputEvent_modDepthIn (eventValue)\n  {\n    this.instance.exports._sendEvent_modDepthIn (81856, eventValue);\n  }\n\n  /** Sends an event of type `float32` to endpoint \"shapeIn\".\n   *  @param {number} eventValue - The event to be added to the queue for this endpoint.\n   */\n  sendInputEvent_shapeIn (eventValue)\n  {\n    this.instance.exports._sendEvent_shapeIn (81856, eventValue);\n  }\n\n  /** Returns a frame from the output stream \"out\"\n   *\n   * @param {number} frameIndex - the index of the frame to fetch\n   */\n  getOutputFrame_out (frameIndex)\n  {\n    return this.memoryDataView.getFloat32 (82160 + frameIndex * 4, true);\n  }\n\n  /** Copies frames from the output stream \"out\" into a destination array.\n   *\n   * @param {Array} destChannelArrays - An array of arrays (one per channel) into\n   *                                    which the samples will be copied\n   * @param {number} maxNumFramesToRead - The maximum number of frames to copy\n   */\n  getOutputFrames_out (destChannelArrays, maxNumFramesToRead)\n  {\n    let source = 82160;\n    let numDestChans = destChannelArrays.length;\n\n    if (maxNumFramesToRead > 512)\n      maxNumFramesToRead = 512;\n\n    if (numDestChans < 1)\n    {\n      for (let frame = 0; frame < maxNumFramesToRead; ++frame)\n      {\n        for (let channel = 0; channel < numDestChans; ++channel)\n          destChannelArrays[channel][frame] = this.memoryDataView.getFloat32 (source + 4 * channel, true);\n\n        source += 4;\n      }\n    }\n    else if (numDestChans > 1)\n    {\n      for (let frame = 0; frame < maxNumFramesToRead; ++frame)\n      {\n        let lastSample;\n\n        for (let channel = 0; channel < 1; ++channel)\n        {\n          lastSample = this.memoryDataView.getFloat32 (source + 4 * channel, true);\n          destChannelArrays[channel][frame] = lastSample;\n        }\n\n        for (let channel = 1; channel < numDestChans; ++channel)\n          destChannelArrays[channel][frame] = lastSample;\n\n        source += 4;\n      }\n    }\n    else\n    {\n      for (let frame = 0; frame < maxNumFramesToRead; ++frame)\n      {\n        for (let channel = 0; channel < 1; ++channel)\n          destChannelArrays[channel][frame] = this.memoryDataView.getFloat32 (source + 4 * channel, true);\n\n        source += 4;\n      }\n    }\n  }\n\n  //==============================================================================\n  // Code beyond this point is private internal implementation detail\n\n  //==============================================================================\n  /** @access private */\n  _getWasmBytes()\n  {\n    return new Uint8Array([0,97,115,109,1,0,0,0,1,191,128,128,128,0,10,96,2,127,125,0,96,3,127,124,124,0,96,2,125,125,1,125,96,2,125,127,1,125,96,3,127,127,124,0,96,3,127,127,127,0,96,1,125,1,125,96,1,127,\n      1,125,96,7,127,124,124,124,127,127,127,0,96,3,127,127,127,1,127,2,201,128,128,128,0,4,3,101,110,118,15,95,95,108,105,110,101,97,114,95,109,101,109,111,114,121,2,0,1,3,101,110,118,15,95,95,115,116,97,99,\n      107,95,112,111,105,110,116,101,114,3,127,1,3,101,110,118,6,109,101,109,99,112,121,0,9,3,101,110,118,6,109,101,109,115,101,116,0,9,3,149,128,128,128,0,20,0,0,1,0,2,3,0,0,0,0,0,0,0,0,4,5,6,7,8,6,7,155,130,\n      128,128,0,13,26,95,115,101,110,100,69,118,101,110,116,95,116,101,115,116,83,105,103,110,97,108,83,104,97,112,101,0,2,30,95,115,101,110,100,69,118,101,110,116,95,116,101,115,116,83,105,103,110,97,108,70,\n      114,101,113,117,101,110,99,121,0,3,17,95,115,101,110,100,69,118,101,110,116,95,118,111,108,117,109,101,0,5,22,95,115,101,110,100,69,118,101,110,116,95,102,114,101,113,117,101,110,99,121,73,110,0,8,20,95,\n      115,101,110,100,69,118,101,110,116,95,113,117,97,108,105,116,121,73,110,0,9,17,95,115,101,110,100,69,118,101,110,116,95,109,111,100,101,73,110,0,10,15,95,115,101,110,100,69,118,101,110,116,95,110,108,73,\n      110,0,11,16,95,115,101,110,100,69,118,101,110,116,95,115,97,116,73,110,0,12,19,95,115,101,110,100,69,118,101,110,116,95,114,97,116,101,72,122,73,110,0,13,21,95,115,101,110,100,69,118,101,110,116,95,109,\n      111,100,68,101,112,116,104,73,110,0,14,18,95,115,101,110,100,69,118,101,110,116,95,115,104,97,112,101,73,110,0,15,10,105,110,105,116,105,97,108,105,115,101,0,16,12,97,100,118,97,110,99,101,66,108,111,99,\n      107,0,17,12,129,128,128,128,0,2,10,136,242,128,128,0,20,58,1,1,127,2,64,2,64,32,1,142,34,1,139,67,0,0,0,79,93,69,13,0,32,1,168,33,2,12,1,11,65,128,128,128,128,120,33,2,11,32,0,65,36,106,32,2,65,4,32,2,\n      65,4,73,27,54,2,0,11,25,0,32,0,65,24,106,65,0,43,3,128,128,128,128,0,32,1,187,16,132,128,128,128,0,11,237,3,4,1,126,1,127,2,126,1,127,2,64,2,64,32,2,32,1,163,34,1,189,34,3,66,52,136,167,65,255,15,113,34,\n      4,65,255,15,71,13,0,32,1,32,1,163,33,1,12,1,11,2,64,32,3,66,255,255,255,255,255,255,255,255,255,0,131,34,5,66,128,128,128,128,128,128,128,248,63,86,13,0,32,1,68,0,0,0,0,0,0,0,0,162,32,1,32,5,66,128,128,\n      128,128,128,128,128,248,63,81,27,33,1,12,1,11,2,64,2,64,32,4,13,0,65,0,33,4,2,64,32,3,66,12,134,34,5,66,0,83,13,0,3,64,32,4,65,127,106,33,4,32,5,66,1,134,34,5,66,127,85,13,0,11,11,32,3,65,1,32,4,107,173,\n      134,33,5,12,1,11,32,3,66,255,255,255,255,255,255,255,7,131,66,128,128,128,128,128,128,128,8,132,33,5,11,2,64,2,64,2,64,32,4,65,128,8,72,13,0,32,4,65,1,106,33,4,3,64,2,64,32,5,66,128,128,128,128,128,128,\n      128,120,124,34,6,66,0,83,13,0,32,6,33,5,32,6,80,13,3,11,32,5,66,1,134,33,5,32,4,65,127,106,34,4,65,128,8,74,13,0,11,65,255,7,33,4,11,2,64,2,64,2,64,2,64,32,5,66,128,128,128,128,128,128,128,120,124,34,6,\n      66,0,83,13,0,32,6,33,5,32,6,80,13,1,11,32,5,66,255,255,255,255,255,255,255,7,88,13,1,32,5,33,6,12,2,11,32,1,68,0,0,0,0,0,0,0,0,162,33,1,12,4,11,3,64,32,4,65,127,106,33,4,32,5,66,128,128,128,128,128,128,\n      128,4,84,33,7,32,5,66,1,134,34,6,33,5,32,7,13,0,11,11,32,3,66,128,128,128,128,128,128,128,128,128,127,131,33,5,2,64,32,4,65,1,72,13,0,32,6,66,128,128,128,128,128,128,128,120,124,32,4,173,66,52,134,132,\n      33,6,12,2,11,32,6,65,1,32,4,107,173,135,33,6,12,1,11,32,1,68,0,0,0,0,0,0,0,0,162,33,1,12,1,11,32,6,32,5,132,191,33,1,11,32,0,32,1,182,56,2,4,11,187,1,3,1,127,2,125,2,127,32,0,65,48,106,67,0,0,32,65,32,\n      1,67,205,204,76,61,148,16,134,128,128,128,0,67,0,0,0,0,32,1,67,0,0,200,194,94,27,34,1,56,2,0,32,0,65,44,106,34,2,42,2,0,33,3,32,2,32,1,56,2,0,2,64,2,64,67,205,204,204,61,68,0,0,0,0,0,0,240,63,65,0,43,3,\n      128,128,128,128,0,163,182,149,34,4,139,67,0,0,0,79,93,69,13,0,32,4,168,33,2,12,1,11,65,128,128,128,128,120,33,2,11,32,0,65,56,106,34,5,40,2,0,33,6,32,5,32,2,65,1,32,2,65,1,74,27,34,2,54,2,0,32,0,65,52,\n      106,34,0,32,1,32,3,32,0,42,2,0,32,6,178,148,147,147,32,2,178,149,56,2,0,11,129,13,3,1,125,7,127,4,125,67,0,0,128,63,33,2,2,64,32,1,188,34,3,65,255,255,255,255,7,113,34,4,69,13,0,32,0,188,34,5,65,128,128,\n      128,252,3,70,13,0,2,64,2,64,32,5,65,255,255,255,255,7,113,34,6,65,128,128,128,252,7,75,13,0,32,4,65,129,128,128,252,7,73,13,1,11,32,0,32,1,146,15,11,2,64,2,64,32,5,65,127,76,13,0,65,0,33,7,12,1,11,65,2,\n      33,7,32,4,65,128,128,128,220,4,79,13,0,2,64,32,4,65,128,128,128,252,3,79,13,0,65,0,33,7,12,1,11,65,0,33,7,32,4,65,150,1,32,4,65,23,118,107,34,8,118,34,9,32,8,116,32,4,71,13,0,65,2,32,9,65,1,113,107,33,\n      7,11,2,64,2,64,32,4,65,128,128,128,252,3,70,13,0,32,4,65,128,128,128,252,7,71,13,1,32,6,65,128,128,128,252,3,70,13,2,2,64,32,6,65,129,128,128,252,3,73,13,0,32,1,67,0,0,0,0,32,3,65,127,74,27,15,11,67,0,\n      0,0,0,32,1,140,32,3,65,127,74,27,15,11,67,0,0,128,63,32,0,149,32,0,32,3,65,0,72,27,15,11,2,64,2,64,32,3,65,128,128,128,248,3,70,13,0,32,3,65,128,128,128,128,4,71,13,1,32,0,32,0,148,15,11,32,5,65,0,72,13,\n      0,32,0,145,15,11,32,0,139,33,2,2,64,2,64,2,64,32,5,65,127,74,13,0,32,5,65,128,128,128,128,120,70,13,1,32,5,65,128,128,128,252,123,70,13,1,32,5,65,128,128,128,124,70,13,1,12,2,11,32,5,69,13,0,32,5,65,128,\n      128,128,252,7,70,13,0,32,5,65,128,128,128,252,3,71,13,1,11,67,0,0,128,63,32,2,149,32,2,32,3,65,0,72,27,33,2,32,5,65,0,78,13,1,2,64,32,7,32,6,65,128,128,128,132,124,106,114,13,0,32,2,32,2,147,34,1,32,1,\n      149,15,11,32,2,140,32,2,32,7,65,1,70,27,15,11,67,0,0,128,63,33,10,2,64,32,5,65,0,78,13,0,2,64,2,64,32,7,14,2,0,1,2,11,32,0,32,0,147,34,1,32,1,149,15,11,67,0,0,128,191,33,10,11,2,64,2,64,2,64,2,64,2,64,\n      2,64,32,4,65,128,128,128,232,4,77,13,0,32,6,65,248,255,255,251,3,79,13,1,32,10,67,202,242,73,113,148,67,202,242,73,113,148,32,10,67,96,66,162,13,148,67,96,66,162,13,148,32,3,65,0,72,27,15,11,32,2,67,0,\n      0,128,75,148,188,32,6,32,6,65,128,128,128,4,73,34,7,27,34,6,65,255,255,255,3,113,34,5,65,128,128,128,252,3,114,33,4,65,233,126,65,129,127,32,7,27,32,6,65,23,117,106,33,6,65,0,33,7,32,5,65,242,136,243,0,\n      79,13,1,65,1,33,5,12,2,11,2,64,32,6,65,136,128,128,252,3,73,13,0,32,10,67,202,242,73,113,148,67,202,242,73,113,148,32,10,67,96,66,162,13,148,67,96,66,162,13,148,32,3,65,0,74,27,15,11,32,2,67,0,0,128,191,\n      146,34,0,67,112,165,236,54,148,32,0,32,0,148,67,0,0,0,63,32,0,32,0,67,0,0,128,190,148,67,171,170,170,62,146,148,147,148,67,59,170,184,191,148,146,34,2,32,2,32,0,67,0,170,184,63,148,34,11,146,188,65,128,\n      96,113,190,34,0,32,11,147,147,33,11,12,3,11,2,64,32,5,65,215,231,246,2,79,13,0,67,0,0,192,63,33,0,65,0,33,5,65,128,128,128,1,33,7,12,2,11,32,5,65,128,128,128,248,3,114,33,4,65,1,33,5,32,6,65,1,106,33,6,\n      65,0,33,7,11,67,0,0,128,63,33,0,11,67,0,0,0,0,67,220,207,209,53,32,5,27,67,0,0,128,63,32,0,32,4,190,34,12,146,149,34,2,32,12,32,0,147,34,11,32,4,65,1,118,65,128,224,255,255,1,113,32,7,106,65,128,128,128,\n      130,2,106,190,34,13,32,11,32,2,148,34,11,188,65,128,96,113,190,34,2,148,147,32,12,32,13,32,0,147,147,32,2,148,147,148,34,0,32,2,32,2,148,34,12,67,0,0,64,64,146,32,0,32,11,32,2,146,148,32,11,32,11,148,34,\n      0,32,0,148,32,0,32,0,32,0,32,0,32,0,67,66,241,83,62,148,67,85,50,108,62,146,148,67,5,163,139,62,146,148,67,171,170,170,62,146,148,67,183,109,219,62,146,148,67,154,153,25,63,146,148,146,34,13,146,188,65,\n      128,96,113,190,34,0,148,32,11,32,13,32,0,67,0,0,64,192,146,32,12,147,147,148,146,34,11,32,11,32,2,32,0,148,34,2,146,188,65,128,96,113,190,34,0,32,2,147,147,67,79,56,118,63,148,32,0,67,198,35,246,184,148,\n      146,146,34,2,67,0,0,0,0,67,0,192,21,63,32,5,27,34,11,32,2,32,0,67,0,64,118,63,148,34,12,146,146,32,6,178,34,2,146,188,65,128,96,113,190,34,0,32,2,147,32,11,147,32,12,147,147,33,11,11,2,64,32,0,32,3,65,\n      128,96,113,190,34,2,148,34,12,32,11,32,1,148,32,1,32,2,147,32,0,148,146,34,1,146,34,0,188,34,4,65,128,128,128,152,4,76,13,0,32,10,67,202,242,73,113,148,67,202,242,73,113,148,15,11,2,64,2,64,2,64,32,4,65,\n      128,128,128,152,4,71,13,0,65,128,128,128,152,4,33,5,32,1,67,60,170,56,51,146,32,0,32,12,147,94,69,13,1,32,10,67,202,242,73,113,148,67,202,242,73,113,148,15,11,2,64,2,64,32,4,65,255,255,255,255,7,113,34,\n      5,65,128,128,216,152,4,75,13,0,32,4,65,128,128,216,152,124,71,13,1,32,1,32,0,32,12,147,95,69,13,1,32,10,67,96,66,162,13,148,67,96,66,162,13,148,15,11,32,10,67,96,66,162,13,148,67,96,66,162,13,148,15,11,\n      65,0,33,3,32,5,65,128,128,128,248,3,77,13,1,11,65,0,65,128,128,128,4,32,5,65,23,118,65,130,127,106,118,32,4,106,34,5,65,255,255,255,3,113,65,128,128,128,4,114,65,150,1,32,5,65,23,118,65,255,1,113,34,6,\n      107,118,34,3,107,32,3,32,4,65,0,72,27,33,3,32,1,32,12,65,128,128,128,124,32,6,65,129,127,106,117,32,5,113,190,147,34,12,146,188,33,4,11,2,64,32,3,65,23,116,32,4,65,128,128,126,113,190,34,0,67,0,114,49,\n      63,148,34,2,32,0,67,140,190,191,53,148,32,1,32,0,32,12,147,147,67,24,114,49,63,148,146,34,11,146,34,1,32,1,32,1,32,1,32,1,148,34,0,32,0,32,0,32,0,32,0,67,76,187,49,51,148,67,14,234,221,181,146,148,67,85,\n      179,138,56,146,148,67,97,11,54,187,146,148,67,171,170,42,62,146,148,147,34,0,148,32,0,67,0,0,0,192,146,149,32,11,32,1,32,2,147,147,34,0,32,1,32,0,148,146,147,147,67,0,0,128,63,146,34,1,188,106,34,4,65,\n      255,255,255,3,74,13,0,32,10,32,1,32,3,16,135,128,128,128,0,148,15,11,32,10,32,4,190,148,33,2,11,32,2,11,164,1,1,1,127,2,64,2,64,2,64,32,1,65,128,1,72,13,0,32,0,67,0,0,0,127,148,33,0,32,1,65,129,127,106,\n      34,2,65,255,0,75,13,1,32,2,33,1,12,2,11,32,1,65,130,127,78,13,1,32,0,67,0,0,128,12,148,33,0,2,64,32,1,65,155,126,77,13,0,32,1,65,230,0,106,33,1,12,2,11,32,0,67,0,0,128,12,148,33,0,32,1,65,182,125,32,1,\n      65,182,125,74,27,65,204,1,106,33,1,12,1,11,32,0,67,0,0,0,127,148,33,0,32,1,65,253,2,32,1,65,253,2,72,27,65,130,126,106,33,1,11,32,0,32,1,65,23,116,65,128,128,128,252,3,106,190,148,11,13,0,32,0,65,128,1,\n      106,32,1,56,2,0,11,24,0,32,0,65,156,1,106,65,1,58,0,0,32,0,65,144,1,106,32,1,56,2,0,11,56,0,32,0,65,156,1,106,65,1,58,0,0,32,0,65,152,1,106,33,0,2,64,32,1,139,67,0,0,0,79,93,69,13,0,32,0,32,1,168,54,2,\n      0,15,11,32,0,65,128,128,128,128,120,54,2,0,11,30,0,32,0,65,156,1,106,65,1,58,0,0,32,0,65,157,1,106,32,1,67,0,0,0,63,94,58,0,0,11,24,0,32,0,65,156,1,106,65,1,58,0,0,32,0,65,148,1,106,32,1,56,2,0,11,34,0,\n      32,0,65,232,0,106,68,0,0,0,0,0,0,240,63,65,0,43,3,128,128,128,128,0,163,182,32,1,148,56,2,0,11,13,0,32,0,65,132,1,106,32,1,56,2,0,11,59,1,1,127,2,64,2,64,32,1,142,34,1,139,67,0,0,0,79,93,69,13,0,32,1,168,\n      33,2,12,1,11,65,128,128,128,128,120,33,2,11,32,0,65,192,0,106,32,2,65,5,32,2,65,5,73,27,54,2,0,11,149,2,0,65,0,32,2,57,3,128,128,128,128,0,32,0,65,36,106,65,3,54,2,0,32,0,65,24,106,32,2,68,0,0,0,0,0,0,\n      89,64,16,132,128,128,128,0,32,0,65,248,0,106,65,1,54,2,0,32,0,65,52,106,66,0,55,2,0,32,0,65,44,106,66,128,128,128,252,131,128,128,192,63,55,2,0,65,0,32,2,57,3,128,128,128,128,0,32,0,65,192,0,106,65,0,54,\n      2,0,32,0,65,232,0,106,68,0,0,0,0,0,0,240,63,32,2,163,34,2,182,67,0,0,200,66,148,56,2,0,32,0,65,204,0,106,66,0,55,2,0,32,0,65,196,0,106,66,128,128,128,252,131,128,128,192,63,55,2,0,32,0,65,128,1,106,66,\n      128,128,232,163,4,55,2,0,32,0,65,240,0,106,66,201,3,55,3,0,32,0,65,140,1,106,65,128,128,241,176,4,54,2,0,32,0,65,152,1,106,65,0,54,2,0,32,0,65,156,1,106,65,1,59,0,0,32,0,65,144,1,106,66,128,128,128,252,\n      131,128,128,192,63,55,2,0,32,0,65,236,0,106,32,2,68,0,0,0,0,0,0,78,64,163,182,67,0,0,240,66,148,56,2,0,11,157,43,11,6,127,3,125,1,127,2,125,1,126,2,124,1,127,1,124,1,127,4,124,1,127,35,128,128,128,128,\n      0,65,32,107,34,3,36,128,128,128,128,0,2,64,32,0,40,2,0,32,2,70,13,0,32,0,65,136,2,106,33,4,32,0,65,236,1,106,33,5,32,0,65,208,1,106,33,6,32,0,65,180,1,106,33,7,32,0,65,24,106,33,8,3,64,67,0,0,0,0,33,9,\n      2,64,32,0,40,2,40,65,127,70,13,0,67,0,0,0,0,33,9,2,64,2,64,2,64,2,64,2,64,2,64,32,0,40,2,36,14,5,0,1,2,3,4,5,11,32,0,32,0,42,2,24,34,9,32,0,42,2,28,146,34,10,67,0,0,128,191,146,32,10,32,10,67,0,0,128,63,\n      96,27,56,2,24,32,9,67,219,15,201,64,148,16,146,128,128,128,0,67,0,0,0,0,146,33,9,12,4,11,32,0,32,8,16,147,128,128,128,0,32,0,42,2,28,34,10,148,32,0,42,2,32,32,10,67,0,0,128,190,148,67,0,0,128,63,146,148,\n      146,34,10,56,2,32,32,10,67,0,0,128,64,148,67,0,0,0,0,146,33,9,12,3,11,32,8,16,147,128,128,128,0,67,0,0,0,0,146,33,9,12,2,11,32,0,32,0,42,2,24,34,10,32,0,42,2,28,34,9,146,34,11,67,0,0,128,191,146,32,11,\n      32,11,67,0,0,128,63,96,27,56,2,24,2,64,2,64,32,10,32,9,93,69,13,0,32,10,32,9,149,34,9,32,9,146,32,9,32,9,148,147,67,0,0,128,191,146,33,11,12,1,11,67,0,0,0,0,33,11,67,0,0,128,63,32,9,147,32,10,93,69,13,\n      0,32,10,67,0,0,128,191,146,32,9,149,34,9,32,9,146,32,9,32,9,148,146,67,0,0,128,63,146,33,11,11,32,10,32,10,146,67,0,0,128,191,146,32,11,147,67,0,0,0,0,146,33,9,12,1,11,32,0,32,0,42,2,24,34,10,32,0,42,2,\n      28,34,9,146,34,11,67,0,0,128,191,146,32,11,32,11,67,0,0,128,63,96,27,56,2,24,2,64,2,64,32,10,32,9,93,69,13,0,32,10,32,9,149,34,9,32,9,146,32,9,32,9,148,147,67,0,0,128,191,146,33,11,12,1,11,67,0,0,0,0,33,\n      11,67,0,0,128,63,32,9,147,32,10,93,69,13,0,32,10,67,0,0,128,191,146,32,9,149,34,9,32,9,146,32,9,32,9,148,146,67,0,0,128,63,146,33,11,11,32,11,32,10,32,10,146,67,0,0,128,191,146,147,67,0,0,0,0,146,33,9,\n      11,32,0,65,1,54,2,40,11,67,0,0,0,0,33,11,2,64,32,0,40,2,60,65,127,70,13,0,2,64,2,64,32,0,40,2,56,34,12,65,1,72,13,0,32,0,32,12,65,127,106,34,12,54,2,56,32,0,42,2,44,32,0,42,2,52,32,12,178,148,147,33,10,\n      12,1,11,32,0,42,2,44,33,10,11,32,0,65,1,54,2,60,32,10,67,0,0,0,0,146,33,11,11,67,0,0,0,0,33,10,2,64,32,0,40,2,124,65,127,70,13,0,2,64,2,64,32,0,40,2,80,34,12,65,1,72,13,0,32,0,32,12,65,127,106,34,12,54,\n      2,80,32,0,42,2,68,32,0,42,2,76,32,12,178,148,147,33,10,12,1,11,32,0,42,2,68,33,10,11,2,64,2,64,32,0,40,2,64,34,12,65,5,71,13,0,32,10,32,0,42,2,100,148,67,0,0,0,0,146,33,13,12,1,11,32,0,42,2,96,33,13,2,\n      64,2,64,2,64,2,64,2,64,32,12,65,127,106,14,4,0,1,2,3,4,11,32,10,67,0,0,128,64,148,32,13,148,33,14,2,64,32,13,67,0,0,0,63,94,69,13,0,32,10,67,0,0,64,64,148,67,0,0,0,0,146,32,14,147,33,13,12,5,11,67,0,0,\n      0,0,32,10,147,32,14,146,33,13,12,4,11,32,10,140,32,10,32,13,67,0,0,0,63,94,27,67,0,0,0,0,146,33,13,12,3,11,67,0,0,0,0,32,10,147,32,10,32,10,146,32,13,148,146,33,13,12,2,11,32,10,67,0,0,0,0,146,32,10,32,\n      10,146,32,13,148,147,33,13,12,1,11,32,10,32,13,67,219,15,201,64,148,16,146,128,128,128,0,148,67,0,0,0,0,146,33,13,11,32,0,32,0,42,2,104,32,0,42,2,96,146,34,10,56,2,96,2,64,32,10,67,0,0,128,63,96,69,13,\n      0,3,64,32,0,32,10,67,0,0,128,191,146,34,10,56,2,96,2,64,32,0,40,2,64,65,5,71,13,0,32,0,32,0,41,3,112,66,237,156,153,142,4,126,66,185,224,0,124,34,15,66,255,255,255,255,7,131,55,3,112,32,0,32,15,167,65,\n      255,255,255,255,7,113,178,67,0,0,128,48,148,67,0,0,128,191,146,56,2,100,32,0,42,2,96,33,10,11,32,10,67,0,0,128,63,96,13,0,11,11,32,13,67,0,0,0,0,146,33,10,32,0,65,1,54,2,124,11,2,64,32,0,40,2,136,1,65,\n      127,70,13,0,67,0,0,0,64,32,10,32,0,42,2,132,1,148,67,0,0,64,65,149,16,134,128,128,128,0,33,10,32,0,65,1,58,0,156,1,32,0,65,1,54,2,136,1,32,0,32,10,32,0,42,2,128,1,148,56,2,140,1,11,2,64,2,64,32,0,40,2,\n      172,2,34,12,65,127,71,13,0,67,0,0,0,0,33,10,12,1,11,32,9,67,0,0,0,0,146,32,11,67,0,0,0,0,146,148,33,10,2,64,32,12,65,0,74,13,0,32,0,66,128,128,128,128,128,128,128,192,63,55,2,192,1,32,0,66,128,128,128,\n      252,3,55,2,184,1,32,0,66,128,128,128,252,3,55,2,176,1,32,0,66,138,174,143,225,3,55,2,160,2,32,0,65,128,128,128,252,3,54,2,224,1,32,0,66,0,55,2,216,1,32,0,66,128,128,128,128,128,128,128,192,63,55,2,208,\n      1,32,0,66,128,128,128,128,128,128,128,192,63,55,2,200,1,32,0,65,128,128,128,252,3,54,2,252,1,32,0,66,0,55,2,244,1,32,0,66,128,128,128,128,128,128,128,192,63,55,2,236,1,32,0,66,128,128,128,128,128,128,128,\n      192,63,55,2,228,1,32,0,66,0,55,2,160,1,32,0,66,128,128,128,128,128,128,128,192,63,55,2,128,2,32,0,66,128,128,128,128,128,128,128,192,63,55,2,136,2,32,0,66,0,55,2,144,2,32,0,65,128,128,128,252,3,54,2,152,\n      2,32,0,65,0,54,2,168,1,32,0,65,0,54,2,156,2,32,0,65,0,54,2,172,1,11,32,10,67,0,0,0,0,146,33,9,2,64,2,64,2,64,2,64,2,64,2,64,2,64,3,64,2,64,32,12,65,0,74,13,0,32,0,45,0,156,1,69,13,7,32,0,65,0,58,0,156,\n      1,32,0,67,0,0,0,64,32,0,42,2,144,1,34,10,187,68,0,0,0,0,0,0,240,63,165,68,0,0,0,0,0,0,240,191,160,68,215,163,112,61,10,215,255,63,162,68,0,0,0,0,0,0,34,64,163,68,123,20,174,71,225,122,132,63,160,182,32,\n      10,67,0,0,32,65,94,27,56,2,160,2,68,0,0,0,0,0,0,0,64,68,0,0,0,0,0,0,240,63,65,0,43,3,128,128,128,128,0,163,34,16,163,33,17,32,0,40,2,152,1,33,18,2,64,32,16,68,139,230,83,94,149,156,251,64,32,0,42,2,140,\n      1,34,10,187,68,0,0,0,0,0,0,84,64,165,68,24,45,68,84,251,33,25,64,162,32,10,67,0,160,140,70,94,27,162,68,0,0,0,0,0,0,224,63,162,34,19,189,34,15,66,32,136,167,34,20,65,255,255,255,255,7,113,34,12,65,251,\n      195,164,255,3,75,13,0,32,12,65,128,128,128,242,3,73,13,7,65,0,33,20,2,64,32,15,66,128,128,128,128,128,255,255,255,255,0,131,66,129,128,128,128,240,132,229,242,63,84,34,12,13,0,68,24,45,68,84,251,33,233,\n      63,32,19,154,32,19,32,15,66,0,83,27,161,68,7,92,20,51,38,166,129,60,160,33,19,32,15,66,63,136,167,33,20,11,32,19,32,19,32,19,32,19,162,34,21,162,34,22,68,99,85,85,85,85,85,213,63,162,32,21,32,22,32,21,\n      32,21,162,34,23,32,23,32,23,32,23,32,23,68,115,83,96,219,203,117,243,190,162,68,166,146,55,160,136,126,20,63,160,162,68,1,101,242,242,216,68,67,63,160,162,68,40,3,86,201,34,109,109,63,160,162,68,55,214,\n      6,132,244,100,150,63,160,162,68,122,254,16,17,17,17,193,63,160,32,21,32,23,32,23,32,23,32,23,32,23,68,212,122,191,116,112,42,251,62,162,68,233,167,240,50,15,184,18,63,160,162,68,104,16,141,26,247,38,48,\n      63,160,162,68,21,131,224,254,200,219,87,63,160,162,68,147,132,110,233,227,38,130,63,160,162,68,254,65,179,27,186,161,171,63,160,162,160,162,68,0,0,0,0,0,0,0,0,160,162,68,0,0,0,0,0,0,0,0,160,160,34,21,160,\n      33,23,2,64,32,12,69,13,0,32,23,33,19,12,8,11,68,0,0,0,0,0,0,240,63,32,19,32,21,32,23,32,23,162,32,23,68,0,0,0,0,0,0,240,63,160,163,161,160,34,19,32,19,160,161,34,19,154,32,19,32,20,27,33,19,12,7,11,32,\n      12,65,255,255,191,255,7,75,13,5,2,64,32,12,65,250,212,189,128,4,75,13,0,2,64,32,20,65,255,255,63,113,65,251,195,36,71,13,0,2,64,32,12,65,20,118,34,12,32,19,32,19,68,131,200,201,109,48,95,228,63,162,68,\n      0,0,0,0,0,0,56,67,160,68,0,0,0,0,0,0,56,195,160,34,21,68,0,0,64,84,251,33,249,191,162,160,34,19,32,21,68,49,99,98,26,97,180,208,61,162,34,22,161,34,23,189,66,52,136,167,65,255,15,113,107,65,17,72,13,0,\n      2,64,32,12,32,19,32,21,68,0,0,96,26,97,180,208,61,162,34,23,161,34,24,32,21,68,115,112,3,46,138,25,163,59,162,32,19,32,24,161,32,23,161,161,34,22,161,34,23,189,66,52,136,167,65,255,15,113,107,65,50,78,\n      13,0,32,24,33,19,12,1,11,32,24,32,21,68,0,0,0,46,138,25,163,59,162,34,23,161,34,19,32,21,68,193,73,32,37,154,131,123,57,162,32,24,32,19,161,32,23,161,161,34,22,161,33,23,11,32,19,32,23,161,32,22,161,33,\n      22,2,64,32,21,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,21,170,33,12,12,7,11,65,128,128,128,128,120,33,12,12,6,11,2,64,32,12,65,252,178,139,128,4,75,13,0,2,64,32,15,66,127,87,13,0,32,19,68,0,0,64,84,251,\n      33,249,191,160,34,19,32,19,68,49,99,98,26,97,180,208,189,160,34,23,161,68,49,99,98,26,97,180,208,189,160,33,22,65,1,33,12,12,7,11,32,19,68,0,0,64,84,251,33,249,63,160,34,19,32,19,68,49,99,98,26,97,180,\n      208,61,160,34,23,161,68,49,99,98,26,97,180,208,61,160,33,22,65,127,33,12,12,6,11,32,15,66,127,85,13,4,32,19,68,0,0,64,84,251,33,9,64,160,34,19,32,19,68,49,99,98,26,97,180,224,61,160,34,23,161,68,49,99,\n      98,26,97,180,224,61,160,33,22,65,126,33,12,12,5,11,2,64,2,64,2,64,2,64,32,12,65,188,140,241,128,4,73,13,0,32,12,65,251,195,228,137,4,79,13,3,32,12,65,20,118,34,12,32,19,32,19,68,131,200,201,109,48,95,228,\n      63,162,68,0,0,0,0,0,0,56,67,160,68,0,0,0,0,0,0,56,195,160,34,21,68,0,0,64,84,251,33,249,191,162,160,34,19,32,21,68,49,99,98,26,97,180,208,61,162,34,22,161,34,23,189,66,52,136,167,65,255,15,113,107,65,17,\n      72,13,2,32,12,32,19,32,21,68,0,0,96,26,97,180,208,61,162,34,23,161,34,24,32,21,68,115,112,3,46,138,25,163,59,162,32,19,32,24,161,32,23,161,161,34,22,161,34,23,189,66,52,136,167,65,255,15,113,107,65,50,\n      78,13,1,32,24,33,19,12,2,11,2,64,2,64,2,64,2,64,32,12,65,189,251,215,128,4,73,13,0,32,12,65,251,195,228,128,4,71,13,3,32,19,32,19,68,131,200,201,109,48,95,228,63,162,68,0,0,0,0,0,0,56,67,160,68,0,0,0,0,\n      0,0,56,195,160,34,21,68,0,0,64,84,251,33,249,191,162,160,34,19,32,21,68,49,99,98,26,97,180,208,61,162,34,22,161,34,23,189,66,128,128,128,128,128,128,128,248,255,0,131,66,255,255,255,255,255,255,255,135,\n      63,86,13,2,32,19,32,21,68,0,0,96,26,97,180,208,61,162,34,23,161,34,24,32,21,68,115,112,3,46,138,25,163,59,162,32,19,32,24,161,32,23,161,161,34,22,161,34,23,189,66,128,128,128,128,128,128,128,128,255,0,\n      131,66,255,255,255,255,255,255,255,255,60,88,13,1,32,24,33,19,12,2,11,32,12,65,252,178,203,128,4,70,13,8,2,64,32,15,66,0,83,13,0,32,19,68,0,0,48,127,124,217,18,192,160,34,19,32,19,68,202,148,147,167,145,\n      14,233,189,160,34,23,161,68,202,148,147,167,145,14,233,189,160,33,22,65,3,33,12,12,11,11,32,19,68,0,0,48,127,124,217,18,64,160,34,19,32,19,68,202,148,147,167,145,14,233,61,160,34,23,161,68,202,148,147,\n      167,145,14,233,61,160,33,22,65,125,33,12,12,10,11,32,24,32,21,68,0,0,0,46,138,25,163,59,162,34,23,161,34,19,32,21,68,193,73,32,37,154,131,123,57,162,32,24,32,19,161,32,23,161,161,34,22,161,33,23,11,32,\n      19,32,23,161,32,22,161,33,22,2,64,32,21,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,21,170,33,12,12,9,11,65,128,128,128,128,120,33,12,12,8,11,2,64,32,15,66,0,83,13,0,32,19,68,0,0,64,84,251,33,25,192,160,34,\n      19,32,19,68,49,99,98,26,97,180,240,189,160,34,23,161,68,49,99,98,26,97,180,240,189,160,33,22,65,4,33,12,12,8,11,32,19,68,0,0,64,84,251,33,25,64,160,34,19,32,19,68,49,99,98,26,97,180,240,61,160,34,23,161,\n      68,49,99,98,26,97,180,240,61,160,33,22,65,124,33,12,12,7,11,32,24,32,21,68,0,0,0,46,138,25,163,59,162,34,23,161,34,19,32,21,68,193,73,32,37,154,131,123,57,162,32,24,32,19,161,32,23,161,161,34,22,161,33,\n      23,11,32,19,32,23,161,32,22,161,33,22,2,64,32,21,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,21,170,33,12,12,6,11,65,128,128,128,128,120,33,12,12,5,11,2,64,2,64,32,15,66,255,255,255,255,255,255,255,7,131,66,\n      128,128,128,128,128,128,128,176,193,0,132,191,34,19,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,19,170,33,20,12,1,11,65,128,128,128,128,120,33,20,11,2,64,2,64,32,19,32,20,183,34,23,161,68,0,0,0,0,0,0,112,65,\n      162,34,19,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,19,170,33,25,12,1,11,65,128,128,128,128,120,33,25,11,32,3,65,8,106,32,23,32,25,183,34,21,32,19,32,21,161,68,0,0,0,0,0,0,112,65,162,34,19,32,12,65,20,118,\n      65,234,119,106,65,3,65,2,32,20,65,0,71,32,25,27,32,19,68,0,0,0,0,0,0,0,0,100,32,19,68,0,0,0,0,0,0,0,0,99,114,27,65,1,16,148,128,128,128,0,32,3,43,3,24,33,22,32,3,43,3,16,33,23,32,3,40,2,8,33,12,32,15,66,\n      127,85,13,4,65,0,32,12,107,33,12,32,22,154,33,22,32,23,154,33,23,12,4,11,32,0,32,0,40,2,168,2,65,127,106,34,18,54,2,168,2,65,0,33,12,32,18,65,0,72,13,0,12,7,11,11,2,64,32,19,32,19,68,131,200,201,109,48,\n      95,228,63,162,68,0,0,0,0,0,0,56,67,160,68,0,0,0,0,0,0,56,195,160,34,21,68,0,0,64,84,251,33,249,191,162,160,34,19,32,21,68,49,99,98,26,97,180,208,61,162,34,22,161,34,23,189,66,128,128,128,128,128,128,128,\n      248,255,0,131,66,255,255,255,255,255,255,255,135,63,86,13,0,2,64,32,19,32,21,68,0,0,96,26,97,180,208,61,162,34,23,161,34,24,32,21,68,115,112,3,46,138,25,163,59,162,32,19,32,24,161,32,23,161,161,34,22,161,\n      34,23,189,66,128,128,128,128,128,128,128,128,255,0,131,66,255,255,255,255,255,255,255,255,60,88,13,0,32,24,33,19,12,1,11,32,24,32,21,68,0,0,0,46,138,25,163,59,162,34,23,161,34,19,32,21,68,193,73,32,37,\n      154,131,123,57,162,32,24,32,19,161,32,23,161,161,34,22,161,33,23,11,32,19,32,23,161,32,22,161,33,22,2,64,32,21,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,21,170,33,12,12,2,11,65,128,128,128,128,120,33,12,\n      12,1,11,32,19,68,0,0,64,84,251,33,9,192,160,34,19,32,19,68,49,99,98,26,97,180,224,189,160,34,23,161,68,49,99,98,26,97,180,224,189,160,33,22,65,2,33,12,11,65,0,33,25,2,64,32,23,189,34,15,66,128,128,128,\n      128,128,255,255,255,255,0,131,66,129,128,128,128,240,132,229,242,63,84,34,20,13,0,68,24,45,68,84,251,33,233,63,32,23,154,32,23,32,15,66,0,83,34,25,27,161,68,7,92,20,51,38,166,129,60,32,22,154,32,22,32,\n      25,27,161,160,33,23,32,15,66,63,136,167,33,25,68,0,0,0,0,0,0,0,0,33,22,11,32,12,65,1,113,33,12,32,23,32,23,32,23,32,23,162,34,21,162,34,24,68,99,85,85,85,85,85,213,63,162,32,22,32,21,32,22,32,24,32,21,\n      32,21,162,34,19,32,19,32,19,32,19,32,19,68,115,83,96,219,203,117,243,190,162,68,166,146,55,160,136,126,20,63,160,162,68,1,101,242,242,216,68,67,63,160,162,68,40,3,86,201,34,109,109,63,160,162,68,55,214,\n      6,132,244,100,150,63,160,162,68,122,254,16,17,17,17,193,63,160,32,21,32,19,32,19,32,19,32,19,32,19,68,212,122,191,116,112,42,251,62,162,68,233,167,240,50,15,184,18,63,160,162,68,104,16,141,26,247,38,48,\n      63,160,162,68,21,131,224,254,200,219,87,63,160,162,68,147,132,110,233,227,38,130,63,160,162,68,254,65,179,27,186,161,171,63,160,162,160,162,160,162,160,160,34,21,160,33,19,2,64,32,20,13,0,65,1,32,12,65,\n      1,116,107,183,34,22,32,23,32,21,32,19,32,19,162,32,19,32,22,160,163,161,160,34,19,32,19,160,161,34,19,154,32,19,32,25,27,33,19,12,2,11,32,12,69,13,1,68,0,0,0,0,0,0,240,191,32,19,163,34,22,32,19,189,66,\n      128,128,128,128,112,131,191,34,24,32,22,189,66,128,128,128,128,112,131,191,34,19,162,68,0,0,0,0,0,0,240,63,160,32,21,32,24,32,23,161,161,32,19,162,160,162,32,19,160,33,19,12,1,11,32,19,32,19,161,33,19,\n      11,32,0,32,16,32,17,32,19,162,162,68,0,0,0,0,0,0,224,63,162,182,187,34,19,32,19,68,0,0,0,0,0,0,240,63,160,34,19,163,182,34,10,56,2,132,2,32,0,32,10,56,2,232,1,32,0,32,10,56,2,204,1,32,0,32,10,56,2,176,\n      1,32,0,68,0,0,0,0,0,0,240,63,68,0,0,0,0,0,0,240,63,32,0,42,2,160,2,32,10,148,34,11,187,161,32,11,32,10,148,187,160,163,182,56,2,164,2,2,64,2,64,32,18,13,0,32,0,42,2,160,2,34,11,32,11,32,10,148,147,187,\n      33,16,68,0,0,0,0,0,0,240,191,33,23,32,6,33,12,32,5,33,18,12,1,11,32,10,187,154,33,16,68,0,0,0,0,0,0,240,63,33,23,32,4,33,12,32,7,33,18,11,32,18,32,23,32,19,163,182,56,2,0,32,12,32,16,32,19,163,182,56,2,\n      0,11,32,0,65,15,54,2,168,2,11,32,0,42,2,148,1,33,11,32,0,45,0,157,1,33,12,2,64,2,64,32,0,40,2,152,1,13,0,32,0,32,0,42,2,176,1,32,0,42,2,196,1,32,9,32,0,42,2,184,1,148,32,0,42,2,200,1,34,9,146,32,0,42,2,\n      192,1,32,0,42,2,180,1,32,0,42,2,160,1,34,10,32,9,32,0,42,2,188,1,148,146,148,148,146,148,32,10,147,148,34,9,32,10,32,9,146,34,10,146,56,2,160,1,32,0,42,2,164,2,32,10,32,0,42,2,236,1,32,0,42,2,168,1,32,\n      0,42,2,128,2,32,0,42,2,244,1,148,146,148,32,0,42,2,208,1,32,0,42,2,164,1,32,0,42,2,228,1,32,0,42,2,216,1,148,146,148,146,146,148,33,10,2,64,32,12,65,1,113,69,13,0,32,11,32,10,148,16,149,128,128,128,0,33,\n      10,11,32,0,32,0,42,2,204,1,32,0,42,2,224,1,32,10,32,0,42,2,212,1,148,32,0,42,2,228,1,34,9,146,32,0,42,2,220,1,32,0,42,2,208,1,32,0,42,2,164,1,34,10,32,9,32,0,42,2,216,1,148,146,148,148,146,148,32,10,147,\n      148,34,9,32,10,32,9,146,34,10,146,56,2,164,1,32,0,32,0,42,2,232,1,32,0,42,2,252,1,32,0,42,2,128,2,34,11,32,0,42,2,240,1,32,0,42,2,160,2,32,10,148,34,10,148,146,32,0,42,2,248,1,32,0,42,2,236,1,32,0,42,2,\n      168,1,34,9,32,11,32,0,42,2,244,1,148,146,148,148,146,148,32,9,147,148,34,11,32,9,32,11,146,146,56,2,168,1,12,1,11,32,0,32,0,42,2,232,1,32,0,42,2,252,1,32,9,32,0,42,2,240,1,148,32,0,42,2,128,2,34,9,146,\n      32,0,42,2,248,1,32,0,42,2,236,1,32,0,42,2,168,1,34,10,32,9,32,0,42,2,244,1,148,146,148,148,146,34,9,148,32,10,147,148,34,13,32,10,32,13,146,34,10,146,56,2,168,1,32,0,42,2,160,2,32,9,32,10,147,32,0,42,2,\n      164,2,148,32,0,42,2,136,2,32,0,42,2,172,1,32,0,42,2,156,2,32,0,42,2,144,2,148,146,148,32,0,42,2,180,1,32,0,42,2,160,1,32,0,42,2,200,1,32,0,42,2,188,1,148,146,148,146,146,148,33,10,2,64,32,12,65,1,113,69,\n      13,0,32,11,32,10,148,16,149,128,128,128,0,33,10,11,32,0,32,0,42,2,132,2,32,0,42,2,152,2,32,10,32,0,42,2,140,2,148,32,0,42,2,156,2,34,11,146,32,0,42,2,148,2,32,0,42,2,136,2,32,0,42,2,172,1,34,9,32,11,32,\n      0,42,2,144,2,148,146,148,148,146,34,11,148,32,9,147,148,34,13,32,9,32,13,146,34,9,146,56,2,172,1,32,0,32,0,42,2,176,1,32,0,42,2,196,1,32,0,42,2,200,1,34,13,32,0,42,2,184,1,32,11,32,9,147,148,146,32,0,42,\n      2,192,1,32,0,42,2,180,1,32,0,42,2,160,1,34,9,32,13,32,0,42,2,188,1,148,146,148,148,146,148,32,9,147,148,34,11,32,9,32,11,146,146,56,2,160,1,11,2,64,32,0,42,2,160,2,34,9,67,0,0,0,0,94,69,13,0,32,10,67,0,\n      0,128,63,32,9,149,148,33,10,11,32,0,65,1,54,2,172,2,32,10,67,0,0,0,0,146,33,10,11,32,1,32,0,40,2,0,65,2,116,106,32,10,67,0,0,0,0,146,56,2,0,32,0,32,0,40,2,0,65,1,106,34,12,54,2,0,32,12,32,2,71,13,0,11,\n      11,32,0,65,0,54,2,0,32,3,65,32,106,36,128,128,128,128,0,11,205,10,3,3,127,3,124,1,127,35,128,128,128,128,0,65,32,107,34,1,36,128,128,128,128,0,2,64,2,64,32,0,188,34,2,65,255,255,255,255,7,113,34,3,65,218,\n      159,164,250,3,75,13,0,32,0,32,0,187,34,4,32,4,162,34,5,32,4,162,34,6,32,5,32,5,162,162,32,5,68,167,70,59,140,135,205,198,62,162,68,116,231,202,226,249,0,42,191,160,162,32,6,32,5,68,178,251,110,137,16,17,\n      129,63,162,68,119,172,203,84,85,85,197,191,160,162,32,4,160,160,182,32,3,65,128,128,128,204,3,73,27,33,0,12,1,11,2,64,2,64,2,64,2,64,32,3,65,210,167,237,131,4,73,13,0,32,3,65,214,227,136,135,4,79,13,2,\n      32,0,187,33,5,32,3,65,224,219,191,133,4,79,13,1,68,0,0,0,0,0,0,240,63,32,5,68,210,33,51,127,124,217,18,64,160,34,4,32,4,162,34,4,68,129,94,12,253,255,255,223,63,162,161,32,4,32,4,162,34,6,68,66,58,5,225,\n      83,85,165,63,162,160,32,4,32,6,162,32,4,68,105,80,238,224,66,147,249,62,162,68,39,30,15,232,135,192,86,191,160,162,160,182,68,0,0,0,0,0,0,240,63,32,5,68,210,33,51,127,124,217,18,192,160,34,5,32,5,162,34,\n      5,68,129,94,12,253,255,255,223,63,162,161,32,5,32,5,162,34,4,68,66,58,5,225,83,85,165,63,162,160,32,5,32,4,162,32,5,68,105,80,238,224,66,147,249,62,162,68,39,30,15,232,135,192,86,191,160,162,160,182,140,\n      32,2,65,0,72,27,33,0,12,4,11,32,0,187,33,5,32,3,65,228,151,219,128,4,73,13,2,68,24,45,68,84,251,33,9,64,68,24,45,68,84,251,33,9,192,32,2,65,0,72,27,32,5,160,34,4,32,4,162,34,5,32,4,154,162,34,6,32,5,32,\n      5,162,162,32,5,68,167,70,59,140,135,205,198,62,162,68,116,231,202,226,249,0,42,191,160,162,32,6,32,5,68,178,251,110,137,16,17,129,63,162,68,119,172,203,84,85,85,197,191,160,162,32,4,161,160,182,33,0,12,\n      3,11,68,24,45,68,84,251,33,25,64,68,24,45,68,84,251,33,25,192,32,2,65,0,72,27,32,5,160,34,4,32,4,32,4,162,34,5,162,34,6,32,5,32,5,162,162,32,5,68,167,70,59,140,135,205,198,62,162,68,116,231,202,226,249,\n      0,42,191,160,162,32,4,32,6,32,5,68,178,251,110,137,16,17,129,63,162,68,119,172,203,84,85,85,197,191,160,162,160,160,182,33,0,12,2,11,2,64,32,3,65,255,255,255,251,7,75,13,0,2,64,2,64,32,3,65,218,159,164,\n      238,4,75,13,0,32,0,187,34,5,32,5,68,131,200,201,109,48,95,228,63,162,68,0,0,0,0,0,0,56,67,160,68,0,0,0,0,0,0,56,195,160,34,4,68,0,0,0,80,251,33,249,191,162,160,32,4,68,99,98,26,97,180,16,81,190,162,160,\n      33,5,2,64,32,4,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,4,170,33,3,12,2,11,65,128,128,128,128,120,33,3,12,1,11,32,1,65,8,106,32,3,32,3,65,23,118,65,234,126,106,34,7,65,23,116,107,190,187,68,0,0,0,0,0,0,\n      0,0,68,0,0,0,0,0,0,0,0,32,7,65,1,65,0,16,148,128,128,128,0,32,1,43,3,16,33,5,32,1,40,2,8,33,3,32,2,65,127,74,13,0,65,0,32,3,107,33,3,32,5,154,33,5,11,2,64,2,64,2,64,2,64,32,3,65,3,113,14,3,0,1,2,3,11,32,\n      5,32,5,32,5,162,34,4,162,34,6,32,4,32,4,162,162,32,4,68,167,70,59,140,135,205,198,62,162,68,116,231,202,226,249,0,42,191,160,162,32,5,32,6,32,4,68,178,251,110,137,16,17,129,63,162,68,119,172,203,84,85,\n      85,197,191,160,162,160,160,182,33,0,12,5,11,32,5,32,5,162,34,5,68,129,94,12,253,255,255,223,191,162,68,0,0,0,0,0,0,240,63,160,32,5,32,5,162,34,4,68,66,58,5,225,83,85,165,63,162,160,32,5,32,4,162,32,5,68,\n      105,80,238,224,66,147,249,62,162,68,39,30,15,232,135,192,86,191,160,162,160,182,33,0,12,4,11,32,5,32,5,162,34,4,32,5,154,162,34,6,32,4,32,4,162,162,32,4,68,167,70,59,140,135,205,198,62,162,68,116,231,202,\n      226,249,0,42,191,160,162,32,6,32,4,68,178,251,110,137,16,17,129,63,162,68,119,172,203,84,85,85,197,191,160,162,32,5,161,160,182,33,0,12,3,11,32,5,32,5,162,34,5,68,129,94,12,253,255,255,223,191,162,68,0,\n      0,0,0,0,0,240,63,160,32,5,32,5,162,34,4,68,66,58,5,225,83,85,165,63,162,160,32,5,32,4,162,32,5,68,105,80,238,224,66,147,249,62,162,68,39,30,15,232,135,192,86,191,160,162,160,182,140,33,0,12,2,11,32,0,32,\n      0,147,33,0,12,1,11,68,0,0,0,0,0,0,240,63,32,5,68,24,45,68,84,251,33,249,63,160,34,4,32,4,162,34,4,68,129,94,12,253,255,255,223,63,162,161,32,4,32,4,162,34,6,68,66,58,5,225,83,85,165,63,162,160,32,4,32,\n      6,162,32,4,68,105,80,238,224,66,147,249,62,162,68,39,30,15,232,135,192,86,191,160,162,160,182,140,68,0,0,0,0,0,0,240,63,32,5,68,24,45,68,84,251,33,249,191,160,34,5,32,5,162,34,5,68,129,94,12,253,255,255,\n      223,63,162,161,32,5,32,5,162,34,4,68,66,58,5,225,83,85,165,63,162,160,32,5,32,4,162,32,5,68,105,80,238,224,66,147,249,62,162,68,39,30,15,232,135,192,86,191,160,162,160,182,32,2,65,0,72,27,33,0,11,32,1,\n      65,32,106,36,128,128,128,128,0,32,0,11,162,5,3,4,125,4,127,1,125,32,0,32,0,42,2,0,34,1,32,0,42,2,4,34,2,146,34,3,67,0,0,128,191,146,32,3,32,3,67,0,0,128,63,96,27,56,2,0,2,64,2,64,32,1,32,2,93,69,13,0,32,\n      1,32,2,149,34,3,32,3,146,32,3,32,3,148,147,67,0,0,128,191,146,33,4,12,1,11,67,0,0,0,0,33,4,67,0,0,128,63,32,2,147,32,1,93,69,13,0,32,1,67,0,0,128,191,146,32,2,149,34,3,32,3,146,32,3,32,3,148,146,67,0,0,\n      128,63,146,33,4,11,2,64,2,64,32,1,67,0,0,0,63,146,34,3,188,34,5,65,23,118,65,255,1,113,34,6,65,255,1,71,13,0,32,3,32,3,149,33,3,12,1,11,2,64,32,5,65,255,255,255,255,7,113,34,0,65,128,128,128,252,3,75,13,\n      0,32,3,67,0,0,0,0,148,32,3,32,0,65,128,128,128,252,3,70,27,33,3,12,1,11,2,64,2,64,32,6,13,0,65,0,33,6,2,64,32,5,65,9,116,34,0,65,0,72,13,0,65,0,33,6,3,64,32,6,65,127,106,33,6,32,0,65,1,116,34,0,65,127,\n      74,13,0,11,11,32,5,65,1,32,6,107,116,33,0,12,1,11,32,5,65,255,255,255,3,113,65,128,128,128,4,114,33,0,11,2,64,2,64,2,64,32,6,65,128,1,72,13,0,32,6,65,1,106,33,7,3,64,2,64,32,0,65,128,128,128,124,106,34,\n      6,65,0,72,13,0,32,6,33,0,32,6,69,13,3,11,32,0,65,1,116,33,0,32,7,65,127,106,34,7,65,128,1,74,13,0,11,65,255,0,33,6,11,2,64,2,64,2,64,2,64,32,0,65,128,128,128,124,106,34,7,65,0,72,13,0,32,7,33,0,32,7,69,\n      13,1,11,32,0,65,255,255,255,3,77,13,1,32,0,33,8,12,2,11,32,3,67,0,0,0,0,148,33,3,12,4,11,3,64,32,6,65,127,106,33,6,32,0,65,128,128,128,2,73,33,7,32,0,65,1,116,34,8,33,0,32,7,13,0,11,11,32,5,65,128,128,\n      128,128,120,113,33,0,2,64,32,6,65,1,72,13,0,32,8,65,128,128,128,124,106,32,6,65,23,116,114,33,6,12,2,11,32,8,65,1,32,6,107,117,33,6,12,1,11,32,3,67,0,0,0,0,148,33,3,12,1,11,32,6,32,0,114,190,33,3,11,2,\n      64,2,64,32,3,32,2,93,69,13,0,32,3,32,2,149,34,2,32,2,146,32,2,32,2,148,147,67,0,0,128,191,146,33,9,12,1,11,67,0,0,0,0,33,9,67,0,0,128,63,32,2,147,32,3,93,69,13,0,32,3,67,0,0,128,191,146,32,2,149,34,2,32,\n      2,146,32,2,32,2,148,146,67,0,0,128,63,146,33,9,11,67,0,0,128,191,67,0,0,128,63,32,1,67,0,0,0,63,93,27,32,4,147,32,9,146,11,240,25,7,10,127,1,124,3,127,1,124,10,127,1,124,3,127,35,128,128,128,128,0,65,192,\n      6,107,34,7,36,128,128,128,128,0,32,7,65,184,4,106,65,144,128,128,128,0,65,136,2,16,128,128,128,128,0,26,32,7,66,128,128,128,128,208,227,252,180,53,55,3,176,4,32,7,66,128,128,128,128,168,196,224,241,54,\n      55,3,168,4,32,7,66,128,128,128,128,132,164,137,189,56,55,3,160,4,32,7,66,128,128,128,128,184,240,134,248,57,55,3,152,4,32,7,66,128,128,128,128,150,138,179,188,59,55,3,144,4,32,7,66,128,128,128,128,136,\n      211,145,252,60,55,3,136,4,32,7,66,128,128,128,128,208,133,145,186,62,55,3,128,4,32,7,66,128,128,128,128,180,191,200,252,63,55,3,248,3,65,0,33,8,32,7,65,248,2,106,65,0,65,128,1,16,129,128,128,128,0,26,32,\n      7,65,248,1,106,65,0,65,128,1,16,129,128,128,128,0,26,32,7,65,248,0,106,65,0,65,128,1,16,129,128,128,128,0,26,32,4,65,125,106,65,24,109,34,9,65,0,32,9,65,0,74,27,34,10,65,104,108,32,4,106,33,11,2,64,32,\n      6,65,3,106,34,12,32,5,65,127,106,34,13,106,34,14,65,0,72,13,0,32,10,65,2,116,32,5,65,2,116,107,32,7,65,184,4,106,106,65,4,106,33,9,32,10,32,13,107,34,15,33,4,3,64,32,4,65,194,0,110,33,16,2,64,2,64,32,15,\n      32,8,106,65,127,74,13,0,68,0,0,0,0,0,0,0,0,33,17,12,1,11,32,9,32,16,65,248,125,108,106,40,2,0,183,33,17,11,32,7,65,248,2,106,32,8,65,15,113,65,3,116,106,32,17,57,3,0,32,9,65,4,106,33,9,32,4,65,1,106,33,\n      4,32,8,65,1,106,34,8,32,14,76,13,0,11,11,32,11,65,104,106,33,18,2,64,32,12,65,127,76,13,0,65,0,33,8,2,64,32,5,65,0,74,13,0,3,64,32,7,65,248,0,106,32,8,65,15,113,65,3,116,106,66,0,55,3,0,32,8,65,1,106,34,\n      8,32,12,76,13,0,12,2,11,11,65,0,33,16,3,64,68,0,0,0,0,0,0,0,0,33,17,32,7,65,224,0,106,33,8,32,13,33,4,65,0,33,9,3,64,32,7,32,3,57,3,112,32,7,32,2,57,3,104,32,7,32,1,57,3,96,32,17,32,8,32,9,65,3,110,65,\n      104,108,106,43,3,0,32,7,65,248,2,106,32,16,32,4,106,65,15,113,65,3,116,106,43,3,0,162,160,33,17,32,8,65,8,106,33,8,32,9,65,1,106,33,9,32,4,65,127,106,34,4,65,127,71,13,0,11,32,7,65,248,0,106,32,16,65,15,\n      113,65,3,116,106,32,17,57,3,0,32,16,65,1,106,34,16,32,12,76,13,0,11,11,32,7,65,216,0,106,66,0,55,3,0,32,7,65,32,106,65,48,106,66,0,55,3,0,32,7,65,200,0,106,66,0,55,3,0,32,7,65,192,0,106,66,0,55,3,0,32,\n      7,65,56,106,66,0,55,3,0,32,7,65,48,106,66,0,55,3,0,32,7,65,32,106,65,8,106,66,0,55,3,0,32,7,66,0,55,3,32,32,18,32,11,65,177,7,106,34,19,32,18,65,129,120,74,34,8,27,33,20,68,0,0,0,0,0,0,240,63,68,0,0,0,\n      0,0,0,96,3,32,8,27,33,21,32,6,65,2,106,33,22,65,47,32,11,107,33,23,65,48,32,11,107,33,24,32,18,65,128,8,72,33,25,32,11,65,233,119,106,34,26,65,255,7,75,33,27,32,11,65,103,106,33,28,32,18,65,184,112,74,\n      33,29,32,18,65,130,120,72,33,30,32,12,33,14,2,64,3,64,32,7,65,248,0,106,32,14,34,16,65,15,113,34,31,65,3,116,106,43,3,0,33,17,2,64,32,16,65,1,72,34,15,13,0,32,16,65,15,106,33,8,65,0,33,4,3,64,32,4,65,15,\n      113,65,2,116,33,9,2,64,2,64,32,17,68,0,0,0,0,0,0,112,62,162,34,32,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,32,170,33,14,12,1,11,65,128,128,128,128,120,33,14,11,32,7,65,32,106,32,9,106,33,9,2,64,2,64,32,\n      17,32,14,183,34,32,68,0,0,0,0,0,0,112,193,162,160,34,17,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,17,170,33,14,12,1,11,65,128,128,128,128,120,33,14,11,32,9,32,14,54,2,0,32,7,65,248,0,106,32,8,65,15,113,65,\n      3,116,106,43,3,0,32,32,160,33,17,32,4,65,1,106,33,4,32,8,65,127,106,34,8,65,15,71,13,0,11,11,2,64,2,64,2,64,2,64,32,25,13,0,32,17,68,0,0,0,0,0,0,224,127,162,33,17,32,27,13,1,32,26,33,8,12,3,11,32,30,13,\n      1,32,18,33,8,12,2,11,32,17,68,0,0,0,0,0,0,224,127,162,33,17,32,18,65,253,23,32,18,65,253,23,72,27,65,130,112,106,33,8,12,1,11,32,17,68,0,0,0,0,0,0,96,3,162,33,17,2,64,32,18,65,184,112,77,13,0,32,19,33,\n      8,12,1,11,32,17,68,0,0,0,0,0,0,96,3,162,33,17,32,18,65,240,104,32,18,65,240,104,74,27,65,146,15,106,33,8,11,2,64,2,64,32,17,32,8,65,255,7,106,173,66,52,134,191,162,34,17,32,17,68,0,0,0,0,0,0,192,63,162,\n      156,68,0,0,0,0,0,0,32,192,162,160,34,17,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,17,170,33,13,12,1,11,65,128,128,128,128,120,33,13,11,32,17,32,13,183,161,33,17,2,64,2,64,2,64,2,64,2,64,32,18,65,1,72,34,\n      33,13,0,32,7,65,32,106,32,16,65,127,106,65,15,113,65,2,116,106,34,8,32,8,40,2,0,34,8,32,8,32,24,117,34,8,32,24,116,107,34,4,54,2,0,32,4,32,23,117,33,34,32,8,32,13,106,33,13,12,1,11,2,64,32,18,13,0,32,7,\n      65,32,106,32,16,65,127,106,65,15,113,65,2,116,106,40,2,0,65,23,117,33,34,12,1,11,65,2,33,34,65,0,33,35,32,17,68,0,0,0,0,0,0,224,63,102,69,13,3,12,1,11,32,34,65,0,76,13,1,11,2,64,2,64,32,15,69,13,0,65,0,\n      33,14,12,1,11,65,0,33,8,65,0,33,14,3,64,32,7,65,32,106,32,8,65,15,113,65,2,116,106,34,15,40,2,0,33,4,65,255,255,255,7,33,9,2,64,2,64,32,14,65,1,113,13,0,65,128,128,128,8,33,9,32,4,13,0,65,0,33,14,12,1,\n      11,32,15,32,9,32,4,107,54,2,0,65,1,33,14,11,32,16,32,8,65,1,106,34,8,71,13,0,11,11,2,64,32,33,13,0,65,255,255,255,3,33,8,2,64,2,64,32,28,14,2,1,0,2,11,65,255,255,255,1,33,8,11,32,7,65,32,106,32,16,65,127,\n      106,65,15,113,65,2,116,106,34,4,32,4,40,2,0,32,8,113,54,2,0,11,32,13,65,1,106,33,13,32,34,65,2,71,13,0,68,0,0,0,0,0,0,240,63,32,17,161,33,17,65,2,33,35,32,14,69,13,1,2,64,2,64,32,25,13,0,68,0,0,0,0,0,0,\n      224,127,33,32,32,26,33,8,32,27,69,13,1,32,18,65,253,23,32,18,65,253,23,72,27,65,130,112,106,33,8,68,0,0,0,0,0,0,240,127,33,32,12,1,11,32,21,33,32,32,20,33,8,32,29,13,0,32,18,65,240,104,32,18,65,240,104,\n      74,27,65,146,15,106,33,8,68,0,0,0,0,0,0,0,0,33,32,11,32,17,32,32,32,8,65,255,7,106,173,66,52,134,191,162,161,33,17,12,1,11,32,34,33,35,11,2,64,32,17,68,0,0,0,0,0,0,0,0,98,13,0,2,64,32,16,65,127,106,34,\n      8,32,12,72,13,0,65,0,33,4,3,64,32,7,65,32,106,32,8,65,15,113,65,2,116,106,40,2,0,32,4,114,33,4,32,8,65,127,106,34,8,32,12,78,13,0,11,32,4,69,13,0,32,18,33,11,3,64,32,11,65,104,106,33,11,32,7,65,32,106,\n      32,16,65,127,106,34,16,65,15,113,65,2,116,106,40,2,0,69,13,0,12,4,11,11,32,22,33,8,32,16,33,14,3,64,32,14,65,1,106,33,14,32,8,65,15,113,33,4,32,8,65,127,106,33,8,32,7,65,32,106,32,4,65,2,116,106,40,2,0,\n      69,13,0,11,32,16,65,1,106,34,15,32,14,74,13,1,3,64,32,7,65,248,2,106,32,16,32,5,106,65,15,113,65,3,116,106,32,7,65,184,4,106,32,15,32,10,106,65,194,0,111,34,8,65,194,0,106,32,8,32,8,65,0,72,27,65,2,116,\n      106,40,2,0,183,57,3,0,68,0,0,0,0,0,0,0,0,33,17,2,64,32,5,65,1,72,13,0,65,0,33,8,32,7,65,8,106,33,4,32,5,33,9,3,64,32,7,32,3,57,3,24,32,7,32,2,57,3,16,32,7,32,1,57,3,8,32,17,32,4,32,8,65,3,110,65,104,108,\n      106,43,3,0,32,7,65,248,2,106,32,16,32,9,106,65,15,113,65,3,116,106,43,3,0,162,160,33,17,32,4,65,8,106,33,4,32,8,65,1,106,33,8,32,9,65,127,106,34,9,13,0,11,11,32,7,65,248,0,106,32,15,65,15,113,65,3,116,\n      106,32,17,57,3,0,32,16,65,1,106,33,16,32,15,65,1,106,34,15,32,14,74,13,2,12,0,11,11,11,2,64,2,64,2,64,65,24,32,11,107,34,8,65,128,8,72,13,0,32,17,68,0,0,0,0,0,0,224,127,162,33,17,65,153,120,32,11,107,34,\n      4,65,255,7,75,13,1,32,4,33,8,12,2,11,32,8,65,130,120,78,13,1,32,17,68,0,0,0,0,0,0,96,3,162,33,17,2,64,32,8,65,184,112,77,13,0,65,225,7,32,11,107,33,8,12,2,11,32,17,68,0,0,0,0,0,0,96,3,162,33,17,32,8,65,\n      240,104,32,8,65,240,104,74,27,65,146,15,106,33,8,12,1,11,32,17,68,0,0,0,0,0,0,224,127,162,33,17,32,8,65,253,23,32,8,65,253,23,72,27,65,130,112,106,33,8,11,2,64,2,64,32,17,32,8,65,255,7,106,173,66,52,134,\n      191,162,34,17,68,0,0,0,0,0,0,112,65,102,69,13,0,32,31,65,2,116,33,4,2,64,2,64,32,17,68,0,0,0,0,0,0,112,62,162,34,3,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,3,170,33,8,12,1,11,65,128,128,128,128,120,33,8,\n      11,32,7,65,32,106,32,4,106,33,4,2,64,2,64,32,17,32,8,183,68,0,0,0,0,0,0,112,193,162,160,34,17,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,17,170,33,9,12,1,11,65,128,128,128,128,120,33,9,11,32,4,32,9,54,2,0,\n      32,16,65,1,106,34,16,65,15,113,33,31,12,1,11,2,64,2,64,32,17,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,17,170,33,8,12,1,11,65,128,128,128,128,120,33,8,11,32,18,33,11,11,32,7,65,32,106,32,31,65,2,116,106,\n      32,8,54,2,0,11,2,64,2,64,32,11,65,128,8,72,13,0,68,0,0,0,0,0,0,224,127,33,17,32,11,65,129,120,106,34,8,65,255,7,77,13,1,32,11,65,253,23,32,11,65,253,23,72,27,65,130,112,106,33,8,68,0,0,0,0,0,0,240,127,\n      33,17,12,1,11,68,0,0,0,0,0,0,240,63,33,17,2,64,32,11,65,130,120,72,13,0,32,11,33,8,12,1,11,2,64,32,11,65,184,112,77,13,0,32,11,65,201,7,106,33,8,68,0,0,0,0,0,0,96,3,33,17,12,1,11,32,11,65,240,104,32,11,\n      65,240,104,74,27,65,146,15,106,33,8,68,0,0,0,0,0,0,0,0,33,17,11,68,0,0,0,0,0,0,0,0,33,2,68,0,0,0,0,0,0,0,0,33,3,2,64,32,16,65,0,72,13,0,32,17,32,8,65,255,7,106,173,66,52,134,191,162,33,17,32,16,33,8,3,\n      64,32,7,65,248,0,106,32,8,65,15,113,34,4,65,3,116,106,32,17,32,7,65,32,106,32,4,65,2,116,106,40,2,0,183,162,57,3,0,32,17,68,0,0,0,0,0,0,112,62,162,33,17,32,8,65,127,106,34,8,65,127,71,13,0,11,68,0,0,0,\n      0,0,0,0,0,33,3,32,16,65,0,72,13,0,2,64,2,64,32,12,65,127,76,13,0,32,16,33,8,3,64,2,64,2,64,32,16,32,8,34,4,107,34,9,65,0,78,13,0,68,0,0,0,0,0,0,0,0,33,17,12,1,11,68,0,0,0,0,0,0,0,0,33,17,65,0,33,8,3,64,\n      32,17,32,7,65,248,3,106,32,8,65,7,113,65,3,116,106,43,3,0,32,7,65,248,0,106,32,4,32,8,106,65,15,113,65,3,116,106,43,3,0,162,160,33,17,32,8,65,1,106,34,8,32,12,74,13,1,32,8,32,9,76,13,0,11,11,32,7,65,248,\n      1,106,32,9,65,15,113,65,3,116,106,32,17,57,3,0,32,4,65,127,106,33,8,32,4,65,0,74,13,0,12,2,11,11,32,16,65,1,106,33,4,65,0,33,8,3,64,32,7,65,248,1,106,32,8,65,15,113,65,3,116,106,66,0,55,3,0,32,4,32,8,65,\n      1,106,34,8,71,13,0,11,11,68,0,0,0,0,0,0,0,0,33,3,32,16,65,0,72,13,0,68,0,0,0,0,0,0,0,0,33,3,32,16,33,8,3,64,32,3,32,7,65,248,1,106,32,8,65,15,113,65,3,116,106,43,3,0,160,33,3,32,8,65,127,106,34,8,65,127,\n      71,13,0,11,11,2,64,32,6,69,13,0,32,7,43,3,248,1,32,3,161,33,17,2,64,32,16,65,1,72,13,0,65,1,33,8,3,64,32,17,32,7,65,248,1,106,32,8,65,15,113,65,3,116,106,43,3,0,160,33,17,32,8,65,1,106,34,8,32,16,76,13,\n      0,11,11,32,17,154,32,17,32,35,27,33,2,11,32,0,32,2,57,3,16,32,0,32,13,65,7,113,54,2,0,32,0,32,3,154,32,3,32,35,27,57,3,8,32,7,65,192,6,106,36,128,128,128,128,0,11,187,4,5,1,125,2,127,1,125,1,124,1,125,\n      2,64,2,64,2,64,2,64,2,64,2,64,2,64,32,0,67,0,0,160,65,32,0,67,0,0,160,65,93,27,34,0,32,0,146,34,1,188,34,2,65,255,255,255,255,7,113,34,3,65,208,216,186,149,4,73,13,0,2,64,32,3,65,128,128,128,252,7,77,13,\n      0,32,1,33,0,12,7,11,2,64,32,2,65,0,72,13,0,32,3,65,152,228,197,149,4,73,13,0,32,1,67,0,0,0,127,148,33,0,12,7,11,32,2,65,127,74,13,1,67,0,0,0,0,33,0,32,3,65,181,227,191,150,4,73,13,1,12,6,11,2,64,32,3,65,\n      152,228,197,245,3,75,13,0,32,3,65,128,128,128,200,3,77,13,3,65,0,33,3,67,0,0,0,0,33,4,32,1,33,0,12,5,11,32,3,65,146,171,148,252,3,77,13,1,11,2,64,68,0,0,0,0,0,0,224,63,68,0,0,0,0,0,0,224,191,32,2,65,127,\n      74,27,32,1,67,59,170,184,63,148,187,160,34,5,153,68,0,0,0,0,0,0,224,65,99,69,13,0,32,5,170,33,3,12,3,11,65,128,128,128,128,120,33,3,12,2,11,65,1,65,127,32,2,65,127,74,27,33,3,12,1,11,32,1,67,0,0,128,63,\n      146,33,0,12,2,11,32,1,32,3,178,34,0,67,0,114,49,191,148,146,34,1,32,0,67,142,190,191,53,148,34,4,147,33,0,11,32,1,32,0,32,0,32,0,32,0,148,34,6,32,6,67,21,82,53,187,148,67,143,170,42,62,146,148,147,34,6,\n      148,67,0,0,0,64,32,6,147,149,32,4,147,146,67,0,0,128,63,146,33,0,2,64,2,64,32,3,65,128,1,72,13,0,32,0,67,0,0,0,127,148,33,1,32,3,65,129,127,106,34,2,65,255,0,77,13,1,32,1,67,0,0,0,127,148,33,1,32,3,65,\n      253,2,32,3,65,253,2,72,27,65,130,126,106,33,2,12,1,11,32,0,33,1,32,3,33,2,32,3,65,130,127,78,13,0,32,0,67,0,0,128,12,148,33,1,2,64,32,3,65,155,126,77,13,0,32,3,65,230,0,106,33,2,12,1,11,32,1,67,0,0,128,\n      12,148,33,1,32,3,65,182,125,32,3,65,182,125,74,27,65,204,1,106,33,2,11,32,1,32,2,65,23,116,65,128,128,128,252,3,106,190,148,32,0,32,3,27,33,0,11,32,0,67,0,0,128,191,146,32,0,67,0,0,128,63,146,149,11,11,\n      156,130,128,128,0,2,0,65,0,11,8,0,0,0,0,0,0,0,0,0,65,16,11,136,2,131,249,162,0,68,78,110,0,252,41,21,0,209,87,39,0,221,52,245,0,98,219,192,0,60,153,149,0,65,144,67,0,99,81,254,0,187,222,171,0,183,97,197,\n      0,58,110,36,0,210,77,66,0,73,6,224,0,9,234,46,0,28,146,209,0,235,29,254,0,41,177,28,0,232,62,167,0,245,53,130,0,68,187,46,0,156,233,132,0,180,38,112,0,65,126,95,0,214,145,57,0,83,131,57,0,156,244,57,0,\n      139,95,132,0,40,249,189,0,248,31,59,0,222,255,151,0,15,152,5,0,17,47,239,0,10,90,139,0,109,31,109,0,207,126,54,0,9,203,39,0,70,79,183,0,158,102,63,0,45,234,95,0,186,39,117,0,229,235,199,0,61,123,241,0,\n      247,57,7,0,146,82,138,0,251,107,234,0,31,177,95,0,8,93,141,0,48,3,86,0,123,252,70,0,240,171,107,0,32,188,207,0,54,244,154,0,227,169,29,0,94,97,145,0,8,27,230,0,133,153,101,0,160,20,95,0,141,64,104,0,128,\n      216,255,0,39,115,77,0,6,6,49,0,202,86,21,0,201,168,115,0,123,226,96,0,107,140,192,0,0,138,134,128,128,0,7,108,105,110,107,105,110,103,2,8,200,133,128,128,0,25,0,32,2,26,95,115,101,110,100,69,118,101,110,\n      116,95,116,101,115,116,83,105,103,110,97,108,83,104,97,112,101,0,32,3,30,95,115,101,110,100,69,118,101,110,116,95,116,101,115,116,83,105,103,110,97,108,70,114,101,113,117,101,110,99,121,1,2,12,46,76,95,\n      102,114,101,113,117,101,110,99,121,0,0,8,0,2,4,32,46,76,115,116,100,95,95,111,115,99,105,108,108,97,116,111,114,115,95,95,115,101,116,70,114,101,113,117,101,110,99,121,0,32,5,17,95,115,101,110,100,69,118,\n      101,110,116,95,118,111,108,117,109,101,0,2,6,54,46,76,115,116,100,95,95,105,110,116,114,105,110,115,105,99,115,95,95,105,110,116,101,114,110,97,108,95,95,109,97,116,104,95,105,109,112,108,101,109,101,110,\n      116,97,116,105,111,110,115,95,95,112,111,119,0,2,7,67,46,76,115,116,100,95,95,105,110,116,114,105,110,115,105,99,115,95,95,105,110,116,101,114,110,97,108,95,95,109,97,116,104,95,105,109,112,108,101,109,\n      101,110,116,97,116,105,111,110,115,95,95,104,101,108,112,101,114,115,95,95,115,99,97,108,98,110,102,0,32,8,22,95,115,101,110,100,69,118,101,110,116,95,102,114,101,113,117,101,110,99,121,73,110,0,32,9,20,\n      95,115,101,110,100,69,118,101,110,116,95,113,117,97,108,105,116,121,73,110,0,32,10,17,95,115,101,110,100,69,118,101,110,116,95,109,111,100,101,73,110,0,32,11,15,95,115,101,110,100,69,118,101,110,116,95,\n      110,108,73,110,0,32,12,16,95,115,101,110,100,69,118,101,110,116,95,115,97,116,73,110,0,32,13,19,95,115,101,110,100,69,118,101,110,116,95,114,97,116,101,72,122,73,110,0,32,14,21,95,115,101,110,100,69,118,\n      101,110,116,95,109,111,100,68,101,112,116,104,73,110,0,32,15,18,95,115,101,110,100,69,118,101,110,116,95,115,104,97,112,101,73,110,0,32,16,10,105,110,105,116,105,97,108,105,115,101,0,32,17,12,97,100,118,\n      97,110,99,101,66,108,111,99,107,2,16,0,0,2,18,54,46,76,115,116,100,95,95,105,110,116,114,105,110,115,105,99,115,95,95,105,110,116,101,114,110,97,108,95,95,109,97,116,104,95,105,109,112,108,101,109,101,\n      110,116,97,116,105,111,110,115,95,95,115,105,110,0,2,19,30,46,76,115,116,100,95,95,111,115,99,105,108,108,97,116,111,114,115,95,95,110,101,120,116,83,113,117,97,114,101,0,2,20,81,46,76,115,116,100,95,95,\n      105,110,116,114,105,110,115,105,99,115,95,95,105,110,116,101,114,110,97,108,95,95,109,97,116,104,95,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,95,95,104,101,108,112,101,114,115,95,95,114,\n      101,109,97,105,110,100,101,114,80,105,79,118,101,114,50,76,97,114,103,101,0,2,21,23,46,76,115,116,100,95,95,105,110,116,114,105,110,115,105,99,115,95,95,116,97,110,104,1,2,13,46,76,95,95,99,111,110,115,\n      116,97,110,116,95,1,0,136,2,0,16,0,0,16,1,5,173,128,128,128,0,2,17,46,98,115,115,46,46,76,95,102,114,101,113,117,101,110,99,121,3,0,21,46,114,111,100,97,116,97,46,46,76,95,95,99,111,110,115,116,97,110,\n      116,95,4,0,0,150,129,128,128,0,10,114,101,108,111,99,46,67,79,68,69,5,33,3,71,2,0,0,80,3,0,225,4,5,3,162,5,2,0,0,241,18,6,3,216,21,2,0,3,185,22,2,0,0,217,22,3,3,139,23,2,0,7,225,24,17,7,236,24,17,0,136,\n      26,18,0,157,26,19,0,218,26,19,0,159,32,18,0,237,33,5,3,214,37,2,0,0,228,52,20,0,208,62,21,0,189,65,21,7,224,67,17,7,240,67,17,7,251,67,17,0,240,73,20,7,173,78,17,7,235,83,17,7,247,83,17,4,131,84,22,0,0,\n      140,84,23,0,162,85,24,0,180,85,24,0,198,85,24,7,197,109,17,]);\n  }\n}\n",
					"id": "nGK5QDwKLS7gl3s1",
					"mime": "text/javascript"
				}
			],
			"id": "hRpktgq9cordWErT"
		},
		{
			"name": "biquads.cmajor",
			"type": "file",
			"binary": false,
			"content": "/** \n    Biquad-based Filters by Will Pirkle\n    The filters in this namespace are ported from the C++ projects in Will Pirkle's \"Designing Audio Effect Plug-Ins in C++\"\n    and the application notes on his website\n\n    - https://www.willpirkle.com/about/books/\n    - https://www.willpirkle.com/app-notes/\n*/\n\nnamespace pirkle_biquads (using SampleType = float32, using CoeffType  = float64, int updateInterval = 16)\n{\n    let kSqrtTwo = sqrt (2.0);\n\n    //==============================================================================\n    /** Biquadratic (two-pole-two-zero) IIR filter building block.\n\n        Direct Form I (DFI):\n\n            y[n] = b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] - a1 * y[n-1] - a2 * y[n-2]\n\n        Transposed Direct Form II (TDFII):\n\n            y[n] = b0 * x[n] + s1\n            s1 = b1 * x[n] + a1 * y[n] + s2\n            s2 = b2 * x[n] + a2 * y[n]\n    */\n    namespace Biquad\n    {\n        // Coefficients and related functions\n\n        /** Holds a set of filter coefficients. */\n        struct Coeffs\n        {\n            CoeffType<3> b, /**< feed-forward, numerator, zero, FIR coefficients */\n                         a; /**< feed-back, denominator, pole, IIR coefficients */\n        }\n\n        /** Initialises a set of coefficients. */\n        void set (Coeffs &c,\n                  CoeffType b0, CoeffType b1, CoeffType b2,\n                  CoeffType a0, CoeffType a1, CoeffType a2)\n        {\n            c.b[0] = b0; c.b[1] = b1; c.b[2] = b2; c.a[0] = a0; c.a[1] = a1; c.a[2] = a2;\n        }\n\n        /** Sets the coefficients, normalising based on the first feedback coefficient v.a[0] */\n        void setNonNormalised (Coeffs &c, const Coeffs& v)\n        {\n            let oneOverA0 = 1.0 / v.a[0];\n            c.b = v.b * oneOverA0;\n            c.a = v.a * oneOverA0;\n            c.a[0] = v.a[0]; // keep original a0\n        }\n\n        /** Sets the coefficients, assuming v is already normalised. */\n        void setNormalised (Coeffs &c, Coeffs v)\n        {\n            c = v;\n        }\n\n        /** Clears a set of coefficients. */\n        void clear (Coeffs &c)\n        {\n            c.b = CoeffType();\n            c.a = CoeffType();\n        }\n\n        /** Holds the filter state. */\n        struct State\n        {\n            SampleType[2] x;\n            SampleType[2] y;\n        }\n\n        /** Resets a filter state. */\n        void reset (State &s)\n        {\n            s.x[0] = SampleType();\n            s.x[1] = SampleType();\n            s.y[0] = SampleType();\n            s.y[1] = SampleType();\n        }\n\n        /** */\n        SampleType processDFI (State& s, SampleType x, Coeffs& c)\n        {\n            let y  = SampleType (c.b[0] * x\n                               + c.b[1] * s.x[0]\n                               + c.b[2] * s.x[1]\n                               - c.a[1] * s.y[0]\n                               - c.a[2] * s.y[1]);\n\n            s.x[1] = s.x[0];\n            s.x[0] = x;\n            s.y[1] = s.y[0];\n            s.y[0] = y;\n\n            return y;\n        }\n\n        /** See https://www.earlevel.com/DigitalAudio/images/BiquadTDFII.gif */\n        SampleType processTDFII (State& s, SampleType x, Coeffs& c)\n        {\n            let y  = s.x[0] + SampleType (c.b[0]) * x;\n            s.x[0] = s.y[0] + SampleType (c.b[1]) * x - SampleType (c.a[1]) * y;\n            s.y[0] = SampleType (c.b[2]) * x - SampleType (c.a[2]) * y;\n            return y;\n        }\n\n        /** Like processTDFII, but optimised for c.b[2] and c.a[2] == 0. */\n        SampleType processOnePole (State& s, SampleType x, Coeffs& c)\n        {\n            let y  = s.x[0] + SampleType (c.b[0]) * x;\n            s.x[0] = SampleType (c.b[1]) * x - SampleType (c.a[1]) * y;\n            return y;\n        }\n\n        /** */\n        SampleType processCascadeDFI<StateArrayType, CoeffsArrayType> (SampleType x,\n                                                                       StateArrayType& s,\n                                                                       CoeffsArrayType& c)\n        {\n            static_assert (StateArrayType.isArray, \"states argument is not an array\");\n            static_assert (CoeffsArrayType.isArray, \"coeffs argument is not an array\");\n            static_assert (s.size == c.size, \"states and coeffs arrays are not the same size\");\n\n            var y = x;\n\n            for (wrap<s.size> i)\n                y = processDFI (s[i], y, c[i]);\n\n            return y;\n        }\n\n        /** */\n        SampleType processCascadeTDFII<StateArrayType, CoeffsArrayType> (SampleType x,\n                                                                         StateArrayType& s,\n                                                                         CoeffsArrayType& c)\n        {\n            static_assert (StateArrayType.isArray, \"states argument is not an array\");\n            static_assert (CoeffsArrayType.isArray, \"coeffs argument is not an array\");\n            static_assert (s.size == c.size, \"states and coeffs arrays are not the same size\");\n\n            var y = x;\n\n            for (wrap<s.size> i)\n                y = processTDFII (s[i], y, c[i]);\n\n            return y;\n        }\n    }\n\n    namespace Mode \n    {\n        let kLPF1P       = 0;\n        let kLPF1        = 1; \n        let kHPF1        = 2; \n        let kLPF2        = 3; \n        let kHPF2        = 4; \n        let kBPF2        = 5; \n        let kBSF2        = 6; \n        let kButterLPF2  = 7; \n        let kButterHPF2  = 8;\n        let kButterBPF2  = 9;\n        let kButterBSF2  = 10; \n        let kMMALPF2     = 11; \n        let kMMALPF2B    = 12; \n        let kLowShelf    = 13; \n        let kHiShelf     = 14; \n        let kNCQParaEQ   = 15; \n        let kCQParaEQ    = 16; \n        let kLWRLPF2     = 17; \n        let kLWRHPF2     = 18;\n        let kAPF1        = 19; \n        let kAPF2        = 20; \n        let kResonA      = 21; \n        let kResonB      = 22; \n        let kMatchLP2A   = 23; \n        let kMatchLP2B   = 24; \n        let kMatchBP2A   = 25; \n        let kMatchBP2B   = 26;\n        let kImpInvLP1   = 27; \n        let kImpInvLP2   = 28;\n    }\n\n    void update (Biquad::Coeffs& c, float64& wet, float64& dry, float64 sampleRate, int mode, float64 freqHz, float64 Q, float64 boostCut_dB)\n    {\n        Biquad::Coeffs nc; //normalized coefficients\n\n        // --- set default pass-through\n        nc.b[0] = 1.0;\n        wet = 1.0;\n        dry = 0.0;\n\n        // --- decode filter type and calculate accordingly\n        // --- impulse invariant LPF, matches closely with one-pole version,\n        //     but diverges at VHF\n        if (mode == Mode::kImpInvLP1)\n        {\n            float64 T = 1.0 / sampleRate;\n            float64 omega = 2.0*pi*freqHz;\n            float64 eT = exp(-T*omega);\n\n            nc.b[0] = 1.0 - eT; // <--- normalized by 1-e^aT\n            nc.b[1] = 0.0;\n            nc.b[2] = 0.0;\n            nc.a[1] = -eT;\n            nc.a[2] = 0.0;\n        }\n        else if (mode == Mode::kImpInvLP2)\n        {\n            float64 alpha = 2.0*pi*freqHz / sampleRate;\n            float64 p_Re = -alpha / (2.0*Q);\n            float64 zeta = 1.0 / (2.0 * Q);\n            float64 p_Im = alpha*pow((1.0 - (zeta*zeta)), 0.5);\n            float64 c_Re = 0.0;\n            float64 c_Im = alpha / (2.0*pow((1.0 - (zeta*zeta)), 0.5));\n\n            float64 eP_re = exp(p_Re);\n            nc.b[0] = c_Re;\n            nc.b[1] = -2.0*(c_Re*cos(p_Im) + c_Im*sin(p_Im))*exp(p_Re);\n            nc.b[2] = 0.0;\n            nc.a[1] = -2.0*eP_re*cos(p_Im);\n            nc.a[2] = eP_re*eP_re;\n        }\n        // --- kMatchLP2A = TIGHT fit LPF vicanek algo\n        else if (mode == Mode::kMatchLP2A)\n        {\n            // http://vicanek.de/articles/BiquadFits.pdf\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n\n            float64 q = 1.0 / (2.0*Q);\n\n            // --- impulse invariant\n            float64 a_1 = 0.0;\n            float64 a_2 = exp(-2.0*q*theta_c);\n            if (q <= 1.0)\n            {\n                a_1 = -2.0*exp(-q*theta_c)*cos(pow((1.0 - q*q), 0.5)*theta_c);\n            }\n            else\n            {\n                a_1 = -2.0*exp(-q*theta_c)*cosh(pow((q*q - 1.0), 0.5)*theta_c);\n            }\n\n            // --- TIGHT FIT --- //\n            float64 B0 = (1.0 + a_1 + a_2)*(1.0 + a_1 + a_2);\n            float64 B1 = (1.0 - a_1 + a_2)*(1.0 - a_1 + a_2);\n            float64 B2 = -4.0*a_2;\n\n            float64 phi_0 = 1.0 - sin(theta_c / 2.0)*sin(theta_c / 2.0);\n            float64 phi_1 = sin(theta_c / 2.0)*sin(theta_c / 2.0);\n            float64 phi_2 = 4.0*phi_0*phi_1;\n\n            float64 R1 = (B0*phi_0 + B1*phi_1 + B2*phi_2)*(Q*Q);\n            float64 A0 = B0;\n            float64 A1 = (R1 - A0*phi_0) / phi_1;\n\n            if (A0 < 0.0)\n                A0 = 0.0;\n            if (A1 < 0.0)\n                A1 = 0.0;\n\n            float64 b_0 = 0.5*(pow(A0, 0.5) + pow(A1, 0.5));\n            float64 b_1 = pow(A0, 0.5) - b_0;\n            float64 b_2 = 0.0;\n\n            nc.b[0] = b_0;\n            nc.b[1] = b_1;\n            nc.b[2] = b_2;\n            nc.a[1] = a_1;\n            nc.a[2] = a_2;\n        }\n        // --- kMatchLP2B = LOOSE fit LPF vicanek algo\n        else if (mode == Mode::kMatchLP2B)\n        {\n            // http://vicanek.de/articles/BiquadFits.pdf\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 q = 1.0 / (2.0*Q);\n\n            // --- impulse invariant\n            float64 a_1 = 0.0;\n            float64 a_2 = exp(-2.0*q*theta_c);\n            if (q <= 1.0)\n            {\n                a_1 = -2.0*exp(-q*theta_c)*cos(pow((1.0 - q*q), 0.5)*theta_c);\n            }\n            else\n            {\n                a_1 = -2.0*exp(-q*theta_c)*cosh(pow((q*q - 1.0), 0.5)*theta_c);\n            }\n\n            // --- LOOSE FIT --- //\n            float64 f0 = theta_c / pi; // note f0 = fraction of pi, so that f0 = 1.0 = pi = Nyquist\n\n            float64 r0 = 1.0 + a_1 + a_2;\n            float64 denom = (1.0 - f0*f0)*(1.0 - f0*f0) + (f0*f0) / (Q*Q);\n            denom = pow(denom, 0.5);\n            float64 r1 = ((1.0 - a_1 + a_2)*f0*f0) / (denom);\n\n            float64 b_0 = (r0 + r1) / 2.0;\n            float64 b_1 = r0 - b_0;\n            float64 b_2 = 0.0;\n\n            nc.b[0] = b_0;\n            nc.b[1] = b_1;\n            nc.b[2] = b_2;\n            nc.a[1] = a_1;\n            nc.a[2] = a_2;\n        }\n        // --- kMatchBP2A = TIGHT fit BPF vicanek algo\n        else if (mode == Mode::kMatchBP2A)\n        {\n            // http://vicanek.de/articles/BiquadFits.pdf\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 q = 1.0 / (2.0*Q);\n\n            // --- impulse invariant\n            float64 a_1 = 0.0;\n            float64 a_2 = exp(-2.0*q*theta_c);\n            if (q <= 1.0)\n            {\n                a_1 = -2.0*exp(-q*theta_c)*cos(pow((1.0 - q*q), 0.5)*theta_c);\n            }\n            else\n            {\n                a_1 = -2.0*exp(-q*theta_c)*cosh(pow((q*q - 1.0), 0.5)*theta_c);\n            }\n\n            // --- TIGHT FIT --- //\n            float64 B0 = (1.0 + a_1 + a_2)*(1.0 + a_1 + a_2);\n            float64 B1 = (1.0 - a_1 + a_2)*(1.0 - a_1 + a_2);\n            float64 B2 = -4.0*a_2;\n\n            float64 phi_0 = 1.0 - sin(theta_c / 2.0)*sin(theta_c / 2.0);\n            float64 phi_1 = sin(theta_c / 2.0)*sin(theta_c / 2.0);\n            float64 phi_2 = 4.0*phi_0*phi_1;\n\n            float64 R1 = B0*phi_0 + B1*phi_1 + B2*phi_2;\n            float64 R2 = -B0 + B1 + 4.0*(phi_0 - phi_1)*B2;\n\n            float64 A2 = (R1 - R2*phi_1) / (4.0*phi_1*phi_1);\n            float64 A1 = R2 + 4.0*(phi_1 - phi_0)*A2;\n\n            float64 b_1 = -0.5*(pow(A1, 0.5));\n            float64 b_0 = 0.5*(pow((A2 + (b_1*b_1)), 0.5) - b_1);\n            float64 b_2 = -b_0 - b_1;\n\n            nc.b[0] = b_0;\n            nc.b[1] = b_1;\n            nc.b[2] = b_2;\n            nc.a[1] = a_1;\n            nc.a[2] = a_2;\n        }\n        // --- kMatchBP2B = LOOSE fit BPF vicanek algo\n        else if (mode == Mode::kMatchBP2B)\n        {\n            // http://vicanek.de/articles/BiquadFits.pdf\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 q = 1.0 / (2.0*Q);\n\n            // --- impulse invariant\n            float64 a_1 = 0.0;\n            float64 a_2 = exp(-2.0*q*theta_c);\n            if (q <= 1.0)\n            {\n                a_1 = -2.0*exp(-q*theta_c)*cos(pow((1.0 - q*q), 0.5)*theta_c);\n            }\n            else\n            {\n                a_1 = -2.0*exp(-q*theta_c)*cosh(pow((q*q - 1.0), 0.5)*theta_c);\n            }\n\n            // --- LOOSE FIT --- //\n            float64 f0 = theta_c / pi; // note f0 = fraction of pi, so that f0 = 1.0 = pi = Nyquist\n\n            float64 r0 = (1.0 + a_1 + a_2) / (pi*f0*Q);\n            float64 denom = (1.0 - f0*f0)*(1.0 - f0*f0) + (f0*f0) / (Q*Q);\n            denom = pow(denom, 0.5);\n\n            float64 r1 = ((1.0 - a_1 + a_2)*(f0 / Q)) / (denom);\n\n            float64 b_1 = -r1 / 2.0;\n            float64 b_0 = (r0 - b_1) / 2.0;\n            float64 b_2 = -b_0 - b_1;\n\n            nc.b[0] = b_0;\n            nc.b[1] = b_1;\n            nc.b[2] = b_2;\n            nc.a[1] = a_1;\n            nc.a[2] = a_2;\n        }\n        else if (mode == Mode::kLPF1P)\n        {\n            // --- see book for formulae\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 gamma = 2.0 - cos(theta_c);\n\n            float64 filter_a1 = pow((gamma*gamma - 1.0), 0.5) - gamma;\n            float64 filter_b0 = 1.0 + filter_a1;\n\n            // --- update coeffs\n            nc.b[0] = filter_b0;\n            nc.b[1] = 0.0;\n            nc.b[2] = 0.0;\n            nc.a[1] = filter_a1;\n            nc.a[2] = 0.0;\n        }\n        else if (mode == Mode::kLPF1)\n        {\n            // --- see book for formulae\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 gamma = cos(theta_c) / (1.0 + sin(theta_c));\n\n            // --- update coeffs\n            nc.b[0] = (1.0 - gamma) / 2.0;\n            nc.b[1] = (1.0 - gamma) / 2.0;\n            nc.b[2] = 0.0;\n            nc.a[1] = -gamma;\n            nc.a[2] = 0.0;\n        }\n        else if (mode == Mode::kHPF1)\n        {\n            // --- see book for formulae\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 gamma = cos(theta_c) / (1.0 + sin(theta_c));\n\n            // --- update coeffs\n            nc.b[0] = (1.0 + gamma) / 2.0;\n            nc.b[1] = -(1.0 + gamma) / 2.0;\n            nc.b[2] = 0.0;\n            nc.a[1] = -gamma;\n            nc.a[2] = 0.0;\n        }\n        else if (mode == Mode::kLPF2)\n        {\n            // --- see book for formulae\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 d = 1.0 / Q;\n            float64 betaNumerator = 1.0 - ((d / 2.0)*(sin(theta_c)));\n            float64 betaDenominator = 1.0 + ((d / 2.0)*(sin(theta_c)));\n\n            float64 beta = 0.5*(betaNumerator / betaDenominator);\n            float64 gamma = (0.5 + beta)*(cos(theta_c));\n            float64 alpha = (0.5 + beta - gamma) / 2.0;\n\n            // --- update coeffs\n            nc.b[0] = alpha;\n            nc.b[1] = 2.0*alpha;\n            nc.b[2] = alpha;\n            nc.a[1] = -2.0*gamma;\n            nc.a[2] = 2.0*beta;\n\n        //\tfloat64 mag = getMagResponse(theta_c, nc.b[0], nc.b[1], nc.b[2], nc.a[1], nc.a[2]);\n        }\n        else if (mode == Mode::kHPF2)\n        {\n            // --- see book for formulae\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 d = 1.0 / Q;\n\n            float64 betaNumerator = 1.0 - ((d / 2.0)*(sin(theta_c)));\n            float64 betaDenominator = 1.0 + ((d / 2.0)*(sin(theta_c)));\n\n            float64 beta = 0.5*(betaNumerator / betaDenominator);\n            float64 gamma = (0.5 + beta)*(cos(theta_c));\n            float64 alpha = (0.5 + beta + gamma) / 2.0;\n\n            // --- update coeffs\n            nc.b[0] = alpha;\n            nc.b[1] = -2.0*alpha;\n            nc.b[2] = alpha;\n            nc.a[1] = -2.0*gamma;\n            nc.a[2] = 2.0*beta;\n        }\n        else if (mode == Mode::kBPF2)\n        {\n            // --- see book for formulae\n            float64 K = tan(pi*freqHz / sampleRate);\n            float64 delta = K*K*Q + K + Q;\n\n            // --- update coeffs\n            nc.b[0] = K / delta;;\n            nc.b[1] = 0.0;\n            nc.b[2] = -K / delta;\n            nc.a[1] = 2.0*Q*(K*K - 1) / delta;\n            nc.a[2] = (K*K*Q - K + Q) / delta;\n        }\n        else if (mode == Mode::kBSF2)\n        {\n            // --- see book for formulae\n            float64 K = tan(pi*freqHz / sampleRate);\n            float64 delta = K*K*Q + K + Q;\n\n            // --- update coeffs\n            nc.b[0] = Q*(1 + K*K) / delta;\n            nc.b[1] = 2.0*Q*(K*K - 1) / delta;\n            nc.b[2] = Q*(1 + K*K) / delta;\n            nc.a[1] = 2.0*Q*(K*K - 1) / delta;\n            nc.a[2] = (K*K*Q - K + Q) / delta;\n        }\n        else if (mode == Mode::kButterLPF2)\n        {\n            // --- see book for formulae\n            float64 theta_c = pi*freqHz / sampleRate;\n            float64 C = 1.0 / tan(theta_c);\n\n            // --- update coeffs\n            nc.b[0] = 1.0 / (1.0 + kSqrtTwo*C + C*C);\n            nc.b[1] = 2.0*nc.b[0];\n            nc.b[2] = nc.b[0];\n            nc.a[1] = 2.0*nc.b[0] * (1.0 - C*C);\n            nc.a[2] = nc.b[0] * (1.0 - kSqrtTwo*C + C*C);\n        }\n        else if (mode == Mode::kButterHPF2)\n        {\n            // --- see book for formulae\n            float64 theta_c = pi*freqHz / sampleRate;\n            float64 C = tan(theta_c);\n\n            // --- update coeffs\n            nc.b[0] = 1.0 / (1.0 + kSqrtTwo*C + C*C);\n            nc.b[1] = -2.0*nc.b[0];\n            nc.b[2] = nc.b[0];\n            nc.a[1] = 2.0*nc.b[0] * (C*C - 1.0);\n            nc.a[2] = nc.b[0] * (1.0 - kSqrtTwo*C + C*C);\n        }\n        else if (mode == Mode::kButterBPF2)\n        {\n            // --- see book for formulae\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 BW = freqHz / Q;\n            float64 deltb_c = pi*BW / sampleRate;\n            if (deltb_c >= 0.95*pi / 2.0) deltb_c = 0.95*pi / 2.0;\n\n            float64 C = 1.0 / tan(deltb_c);\n            float64 D = 2.0*cos(theta_c);\n\n            // --- update coeffs\n            nc.b[0] = 1.0 / (1.0 + C);\n            nc.b[1] = 0.0;\n            nc.b[2] = -nc.b[0];\n            nc.a[1] = -nc.b[0] * (C*D);\n            nc.a[2] = nc.b[0] * (C - 1.0);\n        }\n        else if (mode == Mode::kButterBSF2)\n        {\n            // --- see book for formulae\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 BW = freqHz / Q;\n            float64 deltb_c = pi*BW / sampleRate;\n            if (deltb_c >= 0.95*pi / 2.0) deltb_c = 0.95*pi / 2.0;\n\n            float64 C = tan(deltb_c);\n            float64 D = 2.0*cos(theta_c);\n\n            // --- update coeffs\n            nc.b[0] = 1.0 / (1.0 + C);\n            nc.b[1] = -nc.b[0] * D;\n            nc.b[2] = nc.b[0];\n            nc.a[1] = -nc.b[0] * D;\n            nc.a[2] = nc.b[0] * (1.0 - C);\n        }\n        else if (mode == Mode::kMMALPF2 || mode == Mode::kMMALPF2B)\n        {\n            // --- see book for formulae\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 resonance_dB = 0;\n\n            if (Q > 0.707)\n            {\n                float64 peak = Q*Q / pow(Q*Q - 0.25, 0.5);\n                resonance_dB = 20.0*log10(peak);\n            }\n\n            // --- intermediate vars\n            float64 resonance = (cos(theta_c) + (sin(theta_c) * sqrt(pow(10.0, (resonance_dB / 10.0)) - 1))) / ((pow(10.0, (resonance_dB / 20.0)) * sin(theta_c)) + 1);\n            float64 g = pow(10.0, (-resonance_dB / 40.0));\n\n            // --- kMMALPF2B disables the GR with increase in Q\n            if (mode == Mode::kMMALPF2B)\n                g = 1.0;\n\n            float64 filter_a1 = (-2.0) * resonance * cos(theta_c);\n            float64 filter_a2 = resonance * resonance;\n            float64 filter_b0 = g * (1 + filter_a1 + filter_a2);\n\n            // --- update coeffs\n            nc.b[0] = filter_b0;\n            nc.b[1] = 0.0;\n            nc.b[2] = 0.0;\n            nc.a[1] = filter_a1;\n            nc.a[2] = filter_a2;\n        }\n        else if (mode == Mode::kLowShelf)\n        {\n            // --- see book for formulae\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 mu = pow(10.0, boostCut_dB / 20.0);\n\n            float64 beta = 4.0 / (1.0 + mu);\n            float64 delta = beta*tan(theta_c / 2.0);\n            float64 gamma = (1.0 - delta) / (1.0 + delta);\n\n            // --- update coeffs\n            nc.b[0] = (1.0 - gamma) / 2.0;\n            nc.b[1] = (1.0 - gamma) / 2.0;\n            nc.b[2] = 0.0;\n            nc.a[1] = -gamma;\n            nc.a[2] = 0.0;\n\n            wet = mu - 1.0;\n            dry = 1.0;\n        }\n        else if (mode == Mode::kHiShelf)\n        {\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 mu = pow(10.0, boostCut_dB / 20.0);\n\n            float64 beta = (1.0 + mu) / 4.0;\n            float64 delta = beta*tan(theta_c / 2.0);\n            float64 gamma = (1.0 - delta) / (1.0 + delta);\n\n            nc.b[0] = (1.0 + gamma) / 2.0;\n            nc.b[1] = -nc.b[0];\n            nc.b[2] = 0.0;\n            nc.a[1] = -gamma;\n            nc.a[2] = 0.0;\n\n            wet = mu - 1.0;\n            dry = 1.0;\n        }\n        else if (mode == Mode::kCQParaEQ)\n        {\n            // --- see book for formulae\n            float64 K = tan(pi*freqHz / sampleRate);\n            float64 Vo = pow(10.0, boostCut_dB / 20.0);\n            bool bBoost = boostCut_dB >= 0 ? true : false;\n\n            float64 d0 = 1.0 + (1.0 / Q)*K + K*K;\n            float64 e0 = 1.0 + (1.0 / (Vo*Q))*K + K*K;\n            float64 alpha = 1.0 + (Vo / Q)*K + K*K;\n            float64 beta = 2.0*(K*K - 1.0);\n            float64 gamma = 1.0 - (Vo / Q)*K + K*K;\n            float64 delta = 1.0 - (1.0 / Q)*K + K*K;\n            float64 eta = 1.0 - (1.0 / (Vo*Q))*K + K*K;\n\n            // --- update coeffs\n            nc.b[0] = bBoost ? alpha / d0 : d0 / e0;\n            nc.b[1] = bBoost ? beta / d0 : beta / e0;\n            nc.b[2] = bBoost ? gamma / d0 : delta / e0;\n            nc.a[1] = bBoost ? beta / d0 : beta / e0;\n            nc.a[2] = bBoost ? delta / d0 : eta / e0;\n        }\n        else if (mode == Mode::kNCQParaEQ)\n        {\n            // --- see book for formulae\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 mu = pow(10.0, boostCut_dB / 20.0);\n\n            // --- clamp to 0.95 pi/2 (you can experiment with this)\n            float64 tanArg = theta_c / (2.0 * Q);\n            if (tanArg >= 0.95*pi / 2.0) tanArg = 0.95*pi / 2.0;\n\n            // --- intermediate variables (you can condense this if you wish)\n            float64 zeta = 4.0 / (1.0 + mu);\n            float64 betaNumerator = 1.0 - zeta*tan(tanArg);\n            float64 betaDenominator = 1.0 + zeta*tan(tanArg);\n\n            float64 beta = 0.5*(betaNumerator / betaDenominator);\n            float64 gamma = (0.5 + beta)*(cos(theta_c));\n            float64 alpha = (0.5 - beta);\n\n            // --- update coeffs\n            nc.b[0] = alpha;\n            nc.b[1] = 0.0;\n            nc.b[2] = -alpha;\n            nc.a[1] = -2.0*gamma;\n            nc.a[2] = 2.0*beta;\n\n            wet = mu - 1.0;\n            dry = 1.0;\n        \n        }\n        else if (mode == Mode::kLWRLPF2)\n        {\n            // --- see book for formulae\n            float64 omegb_c = pi*freqHz;\n            float64 theta_c = pi*freqHz / sampleRate;\n\n            float64 k = omegb_c / tan(theta_c);\n            float64 denominator = k*k + omegb_c*omegb_c + 2.0*k*omegb_c;\n            float64 a1_Num = -2.0*k*k + 2.0*omegb_c*omegb_c;\n            float64 a2_Num = -2.0*k*omegb_c + k*k + omegb_c*omegb_c;\n\n            // --- update coeffs\n            nc.b[0] = omegb_c*omegb_c / denominator;\n            nc.b[1] = 2.0*omegb_c*omegb_c / denominator;\n            nc.b[2] = nc.b[0];\n            nc.a[1] = a1_Num / denominator;\n            nc.a[2] = a2_Num / denominator;\n        }\n        else if (mode == Mode::kLWRHPF2)\n        {\n            // --- see book for formulae\n            float64 omegb_c = pi*freqHz;\n            float64 theta_c = pi*freqHz / sampleRate;\n\n            float64 k = omegb_c / tan(theta_c);\n            float64 denominator = k*k + omegb_c*omegb_c + 2.0*k*omegb_c;\n            float64 a1_Num = -2.0*k*k + 2.0*omegb_c*omegb_c;\n            float64 a2_Num = -2.0*k*omegb_c + k*k + omegb_c*omegb_c;\n\n            // --- update coeffs\n            nc.b[0] = k*k / denominator;\n            nc.b[1] = -2.0*k*k / denominator;\n            nc.b[2] = nc.b[0];\n            nc.a[1] = a1_Num / denominator;\n            nc.a[2] = a2_Num / denominator;\n        }\n        else if (mode == Mode::kAPF1)\n        {\n            // --- see book for formulae\n            float64 alphaNumerator = tan((pi*freqHz) / sampleRate) - 1.0;\n            float64 alphaDenominator = tan((pi*freqHz) / sampleRate) + 1.0;\n            float64 alpha = alphaNumerator / alphaDenominator;\n\n            // --- update coeffs\n            nc.b[0] = alpha;\n            nc.b[1] = 1.0;\n            nc.b[2] = 0.0;\n            nc.a[1] = alpha;\n            nc.a[2] = 0.0;\n        }\n        else if (mode == Mode::kAPF2)\n        {\n            // --- see book for formulae\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 BW = freqHz / Q;\n            float64 argTan = pi*BW / sampleRate;\n            if (argTan >= 0.95*pi / 2.0) argTan = 0.95*pi / 2.0;\n\n            float64 alphaNumerator = tan(argTan) - 1.0;\n            float64 alphaDenominator = tan(argTan) + 1.0;\n            float64 alpha = alphaNumerator / alphaDenominator;\n            float64 beta = -cos(theta_c);\n\n            // --- update coeffs\n            nc.b[0] = -alpha;\n            nc.b[1] = beta*(1.0 - alpha);\n            nc.b[2] = 1.0;\n            nc.a[1] = beta*(1.0 - alpha);\n            nc.a[2] = -alpha;\n        }\n        else if (mode == Mode::kResonA)\n        {\n            // --- see book for formulae\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 BW = freqHz / Q;\n            float64 filter_a2 = exp(-2.0*pi*(BW / sampleRate));\n            float64 filter_a1 = ((-4.0*filter_a2) / (1.0 + filter_a2))*cos(theta_c);\n            float64 filter_b0 = (1.0 - filter_a2)*pow((1.0 - (filter_a1*filter_a1) / (4.0 * filter_a2)), 0.5);\n\n            // --- update coeffs\n            nc.b[0] = filter_b0;\n            nc.b[1] = 0.0;\n            nc.b[2] = 0.0;\n            nc.a[1] = filter_a1;\n            nc.a[2] = filter_a2;\n        }\n        else if (mode == Mode::kResonB)\n        {\n            // --- see book for formulae\n            float64 theta_c = 2.0*pi*freqHz / sampleRate;\n            float64 BW = freqHz / Q;\n            float64 filter_a2 = exp(-2.0*pi*(BW / sampleRate));\n            float64 filter_a1 = ((-4.0*filter_a2) / (1.0 + filter_a2))*cos(theta_c);\n            float64 filter_b0 = 1.0 - pow(filter_a2, 0.5); // (1.0 - filter_a2)*pow((1.0 - (filter_a1*filter_a1) / (4.0 * filter_a2)), 0.5);\n\n            // --- update coeffs\n            nc.b[0] = filter_b0;\n            nc.b[1] = 0.0;\n            nc.b[2] = -filter_b0;\n            nc.a[1] = filter_a1;\n            nc.a[2] = filter_a2;\n        }\n\n        c.setNormalised(nc);\n    }\n\n    processor Processor\n    {\n        input stream SampleType in;\n        output stream SampleType out;\n\n        input event\n        {\n            float frequencyIn   [[ name: \"Frequency\", min: 10,    max: 22000, init: 1000 ]]; \n            float qualityIn     [[ name: \"Q\",         min: 0.01,  max: 10.0,  init: 1.0, step: 0.01]];\n            float gainIn        [[ name: \"Gain\",      min: -36.0, max: 36.0,  init: 0.0 ]]; \n            float modeIn        [[ name: \"Mode\",      min: 0,     max: 29,    init: 0,   text: \"LPF1P|kLPF1|kHPF1|kLPF2|kHPF2|kBPF2|kBSF2|kButterLPF2|kButterHPF2|kButterBPF2|kButterBSF2|kMMALPF2|kMMALPF2B|kLowShelf|kHiShelf|kNCQParaEQ|kCQParaEQ|kLWRLPF2|kLWRHPF2|kAPF1|kAPF2|kResonA|kResonB|kMatchLP2A|kMatchLP2B|kMatchBP2A|kMatchBP2B|kImpInvLP1|kImpInvLP2\"]];\n        }\n\n        event frequencyIn (float v) { freq = v; recalc = true; }\n        event qualityIn    (float v) { q = v; recalc = true; }\n        event gainIn (float v) { gain = v; recalc = true; }\n        event modeIn (float v) { mode = int (v); recalc = true; }\n\n        float freq = 1000.0f, \n                q    = 0.0f,\n                gain = 1.0f;\n        int mode = Mode::kLPF1P;\n        bool recalc = true;\n\n        void main()\n        {\n            Biquad::State s;\n            Biquad::Coeffs c;\n            float64 wet = 1.0;\n            float64 dry = 0.0;\n\n            loop\n            {\n                if (recalc)\n                {\n                    recalc = false;\n                    update (c, wet, dry, processor.frequency, mode, freq, q, gain);\n                }\n\n                loop (updateInterval)\n                {\n                    let x = in;\n                    let y = s.processTDFII (x, c);\n                    out <- SampleType (dry * x) + SampleType (wet * y);\n                    advance();\n                }\n            }\n        }\n    }\n}\n\ngraph FilterTester [[ main ]]\n{\n    // input stream float32 in;\n    output stream float32 out;\n\n    input filter.frequencyIn;\n    input filter.modeIn;\n    input filter.qualityIn;\n    input filter.gainIn;\n    input gainStream.volume;\n\n    node\n    {\n        source = std::noise::Pink;\n        gainStream = std::levels::SmoothedGainParameter(0.1f);\n        gain = std::levels::DynamicGain (float32);\n        filter = pirkle_biquads::Processor;\n    }\n\n    connection \n    {\n        // in -> gain.in;\n        source.out -> gain.in;\n        gainStream.gain -> gain.gain;\n        gain.out -> filter.in;\n        filter.out -> out;\n    }\n}",
			"id": "beka29bh7G65khMM",
			"mime": null
		},
		{
			"name": "README.md",
			"type": "file",
			"binary": false,
			"content": "\n# Filters by Will Pirkle ported to Cmajor\n\nThese filters are ported from the C++ projects in Will Pirkle's books\nand the application notes on his website\n\n- https://www.willpirkle.com/books/\n- https://www.willpirkle.com/app-notes/\n\n\nuncomment/comment the filters in the FilterTester graph to try the different types. You may also need to comment/uncomment parameters\ndepending on the filter\n",
			"id": "zrZR0fH6dw2rFxUF",
			"mime": "text/markdown"
		},
		{
			"name": "vafilters.cmajor",
			"type": "file",
			"binary": false,
			"content": "/** \n    Virtual Analogue Filters by Will Pirkle\n    The filters in this namespace are ported from the C++ projects in Will Pirkle's \"Designing Software Synthesizer Plug-Ins\"\n    and the application notes on his website\n\n    - https://www.willpirkle.com/synthbook/download-synth-projects/\n    - https://www.willpirkle.com/app-notes/\n*/\n\nnamespace pirkle_va (using SampleType = float32, int updateInterval = 16)\n{\n    let FILTER_FC_MIN = 80.0;\t\t    // 80Hz\n    let FILTER_FC_MAX = 18000.0;\t\t// 18kHz\n    let FILTER_FC_DEFAULT = 10000.0f;\t// 10kHz\n\n    namespace onepole\n    {\n        namespace Mode\n        {\n            let lowpass = 0;\n            let highpass = 1;\n            let allpass = 2;\n        }\n\n        struct Coeffs\n        {\n            // Trapezoidal Integrator Components\n            SampleType mAlpha; // Feed Forward coeff\n\n            // ADDED for Korg35 and Moog Ladder Filter\n            SampleType mBeta;\n\n            // ADDED for Diode Ladder Filter \n            SampleType mGamma;   // Pre-Gain\n            SampleType mDelta;   // FB_IN Coeff\n            SampleType mEpsilon; // FB_OUT scalar\n            SampleType ma0;      // input gain\n\n            // note: this is NOT being used as a z-1 storage register!\n            SampleType mFeedback; // feedback coeff from S \n        }\n\n        struct State\n        {\n            SampleType mZ1; // z-1 storage location\n        }\n\n        void setup (State& s, Coeffs& c)\n        {\n            // init defaults to simple LPF/HPF structure\n            c.mAlpha    = 1.0;\n            c.mBeta     = 0.0;\n            c.mGamma    = 1.0;\n            c.mDelta    = 0.0;\n            c.mEpsilon  = 0.0;\n            c.ma0       = 1.0;\n            c.mFeedback = 0.0;\n\n            reset (s, c);\n        }\n\n        void reset (State& s, Coeffs& c)\n        {\n            s.mZ1 = 0.0;\n            c.mFeedback = 0.0;\n        }\n\n        // mFeedback & mDelta = 0 for non-Diode filters\n        SampleType getFeedbackOutput (State& s, Coeffs& c)\n        {\n            return c.mBeta * (s.mZ1 + c.mFeedback * c.mDelta);\n        }\n\n        void update (Coeffs& c, float64 sampleRate, float64 freqHz)\n        {\n            freqHz = clamp (freqHz, FILTER_FC_MIN, FILTER_FC_MAX);\n            let wd = twoPi * freqHz;          \n            let T  = 1.0 / sampleRate;             \n            let wa = (2.0 / T) * tan (wd * T / 2.0); \n            let g  = wa * T / 2.0;            \n\n            c.mAlpha = SampleType(g / (1.0 + g));\n        }\n\n        SampleType process (State& s, SampleType x, Coeffs& c, int mode) \n        {\n            // for diode filter support\n            x = x * c.mGamma + c.mFeedback + c.mEpsilon * getFeedbackOutput (s, c);\n            // calculate v(n)\n            let vn = (c.ma0 * x - s.mZ1) * c.mAlpha;\n            // form LP output\n            let lpf = vn + s.mZ1;\n            // update memory\n            s.mZ1 = vn + lpf;\n\n            let hpf = x - lpf;\n            let apf = lpf - hpf;\n\n            if (mode == Mode::highpass)\n                return hpf;\n            else if (mode == Mode::allpass)\n                return apf;\n            else\n                return lpf;\n        }\n\n        processor Processor\n        {\n            input stream SampleType in;\n            output stream SampleType out;\n\n            input event\n            {\n                float frequencyIn [[ name: \"Frequency\", min: FILTER_FC_MIN,   max: FILTER_FC_MAX, init: FILTER_FC_DEFAULT, unit: \"Hz\" ]]; \n                float modeIn      [[ name: \"Mode\",      min: 0,      \t\t  max: 2,       \t  init: 0,     text: \"Lowpass|Highpass|Allpass\"]];\n            }\n\n            event frequencyIn (float v) { freq = v; recalc = true; }   \n            event modeIn (float v) { mode = int(v); recalc = true; }\n\n            float freq = FILTER_FC_DEFAULT;\n            int mode = Mode::lowpass;\n            bool recalc = true;\n\n            void main()\n            {\n                State s;\n                Coeffs c;\n                onepole::setup(s, c);\n\n                loop\n                {\n                    if (recalc)\n                    {\n                        recalc = false;\n                        c.update (processor.frequency, freq);\n                    }\n\n                    loop (updateInterval)\n                    {\n                        out <- s.process (in, c, mode);\n                        advance();\n                    }\n                }\n            }\n        }\n    }\n\n    namespace moog_ladder\n    {\n        namespace Mode\n        {\n            let lowpass2  = 0;\n            let highpass2 = 1;\n            let bandpass2 = 2;\n            let lowpass4  = 3;\n            let highpass4 = 4;\n            let bandpass4 = 5;\n        }\n\n        struct Coeffs\n        {\n            onepole::Coeffs mLPF1c;\n            onepole::Coeffs mLPF2c;\n            onepole::Coeffs mLPF3c;\n            onepole::Coeffs mLPF4c;\n\n            SampleType mK;\t\t// K, set with Q\n            SampleType mGamma;\t// see block diagram\n            SampleType mAlpha0;\n\n            // Oberheim Xpander variations\n            SampleType mA;\n            SampleType mB;\n            SampleType mC;\n            SampleType mD;\n            SampleType mE;\n        }\n\n        struct State\n        {\n            onepole::State mLPF1s;\n            onepole::State mLPF2s;\n            onepole::State mLPF3s;\n            onepole::State mLPF4s;\n        }\n\n        void setup (State& s, Coeffs& c)\n        {\n            c.mK = SampleType(0);\n            c.mAlpha0 = SampleType(1);\n            c.mA = SampleType(0); \n            c.mB = SampleType(0); \n            c.mC = SampleType(0); \n            c.mD = SampleType(0); \n            c.mE = SampleType(0);\n            onepole::setup(s.mLPF1s, c.mLPF1c);\n            onepole::setup(s.mLPF2s, c.mLPF2c);\n            onepole::setup(s.mLPF3s, c.mLPF3c);\n            onepole::setup(s.mLPF4s, c.mLPF4c);\n        }\n\n        void update (Coeffs& c, float64 sampleRate, float64 freqHz, float64 q, int mode)\n        {\n            freqHz = clamp (freqHz, FILTER_FC_MIN, FILTER_FC_MAX);\n            q = clamp (q, 1.0, 10.0);\n\n            // set q\n            c.mK = SampleType(4.0) * (SampleType(q) - SampleType(1))/(SampleType(10.0) - SampleType(1));\n\n            // prewarp for BZT\n            let wd = twoPi * freqHz;          \n            let T  = 1.0 / sampleRate;             \n            let wa = (2.0/ T) * tan( wd * T / 2.0); \n            let g  = SampleType(wa * T / 2.0);    \n\n            // G - the feedforward coeff in the One Pole\n            //     same for LPF, HPF\n            let G = SampleType( g / (1.0 + g));\n\n            // set alphas\n            c.mLPF1c.mAlpha = G;\n            c.mLPF2c.mAlpha = G;\n            c.mLPF3c.mAlpha = G;\n            c.mLPF4c.mAlpha = G;\n\n            // set betas\n            c.mLPF1c.mBeta = G * G * G / (SampleType(1) + g);\n            c.mLPF2c.mBeta = G * G / (SampleType(1) + g);\n            c.mLPF3c.mBeta = G / (SampleType(1) + g);\n            c.mLPF4c.mBeta = SampleType(1) / (SampleType(1) + g);\n\n            c.mGamma = G * G * G * G; // G^4\n\n            c.mAlpha0 = SampleType(1) / (SampleType(1)+ c.mK * c.mGamma);\n\n            if      (mode == Mode::lowpass2)  { c.mA = 0.0; c.mB = 0.0;  c.mC = 1.0;  c.mD = 0.0;  c.mE = 0.0; }\n            else if (mode == Mode::highpass2) { c.mA = 1.0; c.mB = -2.0; c.mC = 1.0;  c.mD = 0.0;  c.mE = 0.0; }\n            else if (mode == Mode::bandpass2) { c.mA = 0.0; c.mB = 2.0;  c.mC = -2.0; c.mD = 0.0;  c.mE = 0.0; }\n            else if (mode == Mode::lowpass4)  { c.mA = 0.0; c.mB = 0.0;  c.mC = 0.0;  c.mD = 0.0;  c.mE = 1.0; }\n            else if (mode == Mode::highpass4) { c.mA = 1.0; c.mB = -4.0; c.mC = 6.0;  c.mD = -4.0; c.mE = 1.0; }\n            else if (mode == Mode::bandpass4) { c.mA = 0.0; c.mB = 0.0;  c.mC = 4.0;  c.mD = -8.0; c.mE = 4.0; }\n        }\n\n        SampleType process (State& s, SampleType x, Coeffs& c, bool nonLinear, float saturation, float gainComp) \n        {\n            let dSigma = s.mLPF1s.getFeedbackOutput (c.mLPF1c) + \n                         s.mLPF2s.getFeedbackOutput (c.mLPF2c) + \n                         s.mLPF3s.getFeedbackOutput (c.mLPF3c) +\n                         s.mLPF4s.getFeedbackOutput (c.mLPF4c);\n\n            // for passband gain compensation\n            x *= SampleType(1) + gainComp * c.mK;\n\n            // calculate input to first filter\n            SampleType dU = (x - c.mK * dSigma) * c.mAlpha0;\n\n            if(nonLinear)\n                dU = tanh (saturation * dU); // TODO: fast tanh\n        \n            // cascade of 4 filters\n            let mode = onepole::Mode::lowpass;\n            let dLP1 = s.mLPF1s.process(dU  , c.mLPF1c, mode);\n            let dLP2 = s.mLPF2s.process(dLP1, c.mLPF2c, mode);\n            let dLP3 = s.mLPF3s.process(dLP2, c.mLPF3c, mode);\n            let dLP4 = s.mLPF4s.process(dLP3, c.mLPF4c, mode);\n\n            // Oberheim variations\n            return c.mA * dU + c.mB * dLP1 + c.mC * dLP2 + c.mD * dLP3 +  c.mE * dLP4;  \n        }\n\n        processor Processor\n        {\n            input stream SampleType in;\n            output stream SampleType out;\n\n            input event\n            {\n                float frequencyIn [[ name: \"Frequency\", min: FILTER_FC_MIN,   max: FILTER_FC_MAX, init: FILTER_FC_DEFAULT, unit: \"Hz\" ]]; \n                float qualityIn   [[ name: \"Q\",         min: 1.0,             max: 10.0,          init: 1.0,  step: 0.01]];\n                float satIn       [[ name: \"Saturation\",min: 1.0,             max: 10.0,          init: 1.0,  step: 0.01]];\n                float modeIn      [[ name: \"Mode\",      min: 0,      \t\t max: 5,       \t\t init: 0,     text: \"LP2|HP2|BP2|LP4|HP4|BP4\"]];\n                float nlIn        [[ name: \"NonLinear\", min: 0,               max: 1,             init: 0,     text: \"Off|On\"]];\n            }\n\n            event frequencyIn (float v) { freq = v; recalc = true; }\n            event qualityIn    (float v) { q = v; recalc = true; } \n            event satIn  (float v) { sat = v; recalc = true; } \n            event modeIn (float v) { mode = int(v); recalc = true; }\n            event nlIn   (float v) { nonLinear = v > 0.5f; recalc = true; }\n\n            float freq = FILTER_FC_DEFAULT;\n            float q = 1.0;\n            float sat = 1.0;\n            int mode = Mode::lowpass2;\n            bool recalc = true;\n            bool nonLinear = false;\n\n            void main()\n            {\n                State s;\n                Coeffs c;\n                moog_ladder::setup(s, c);\n\n                loop\n                {\n                    if (recalc)\n                    {\n                        recalc = false;\n                        c.update (processor.frequency, freq, q, mode);\n                    }\n\n                    loop (updateInterval)\n                    {\n                        out <- s.process (in, c, nonLinear, sat, 0.0f); // TODO: gain comp\n                        advance();\n                    }\n                }\n            }\n        }\n    }\n\n    namespace sem\n    {\n        namespace Mode\n        {\n            let lowpass2  = 0;\n            let highpass2 = 1;\n            let bandpass2 = 2;\n            let bandstop2 = 3;\n        }\n\n        struct Coeffs\n        {\n            // Trapezoidal Integrator Components\n            SampleType mAlpha0; // input scalar\n            SampleType mAlpha;  // alpha is same as One Pole\n            SampleType mRho;    // feedback\n            SampleType mQ;      // raw Q value, in range 0.5->25\n        }\n\n        struct State\n        {\n            SampleType mZ11; // our z-1 storage location\n            SampleType mZ12; // our z-1 storage location # 2\n        }\n\n        void setup (State& s, Coeffs& c)\n        {\n            c.mAlpha0 = 1.0;\n            c.mAlpha = 1.0;\n            c.mRho = 1.0;\n            c.mQ = 0.707f; // Butterworth\n\n            reset (s);\n        }\n\n        void reset (State& s)\n        {\n            s.mZ11 = 0.0;\n            s.mZ12 = 0.0;\n        }\n\n        void update (Coeffs& c, float64 sampleRate, float64 freqHz, float64 q)\n        {\n            freqHz = clamp (freqHz, FILTER_FC_MIN, FILTER_FC_MAX);\n            q = clamp (q, 1.0, 10.0);\n\n            // this maps dQControl = 1->10 to Q = 0.5->25\n            c.mQ = SampleType((25.0 - 0.5) * (q - 1.0) / (10.0 - 1.0) + 0.5);\n\n            // prewarp the cutoff- these are bilinear-transform filters\n            let wd = twoPi * freqHz;\n            let T  = 1.0 / sampleRate;\n            let wa = (2.0 / T ) * tan ( wd * T / 2.0); \n            let g  = SampleType(wa * T / 2.0);\n\n            // note R is the traditional analog damping factor\n            let R = 1.0 / (2.0 * c.mQ);\n\n            // set the coeffs\n            c.mAlpha0 = SampleType(SampleType(1) / (1.0 + 2.0 * R * g + g * g));\n            c.mAlpha = g;\n            c.mRho = SampleType(2.0 * R + g);\n        }\n\n        SampleType process (State& s, SampleType x, Coeffs& c, int mode, bool nonLinear, float saturation, float auxControl) \n        {\n            // form the HP output first\n            SampleType hpf = c.mAlpha0 * (x - c.mRho * s.mZ11 - s.mZ12);\n            SampleType bpf = c.mAlpha * hpf + s.mZ11;\n\n            if(nonLinear)\n                bpf = tanh (saturation * bpf); // TODO: fast tanh\n\n            SampleType lpf = c.mAlpha * bpf + s.mZ12;\n            // note R is the traditional analog damping factor\n            SampleType R = SampleType(1) / (SampleType(2.0) * c.mQ);\n            SampleType bsf = x - SampleType(2.0) * R * bpf;\n            SampleType semBSF = auxControl * hpf + (SampleType(1) - auxControl) * lpf;\n\n            // update memory\n            s.mZ11 = c.mAlpha * hpf + bpf;\n            s.mZ12 = c.mAlpha * bpf + lpf;\n\n            if(mode == Mode::lowpass2)        return lpf;\n            else if(mode == Mode::highpass2)  return hpf;\n            else if(mode == Mode::bandpass2)  return bpf; \n            else if(mode == Mode::bandstop2) return semBSF;\n            else return lpf;\n        }\n\n        processor Processor\n        {\n            input stream SampleType in;\n            output stream SampleType out;\n\n            input event\n            {\n                float frequencyIn  [[ name: \"Frequency\", min: FILTER_FC_MIN,   max: FILTER_FC_MAX, init: FILTER_FC_DEFAULT, unit: \"Hz\" ]]; \n                float qualityIn    [[ name: \"Q\",         min: 1.0,             max: 10.0,          init: 1.0,  step: 0.01]];\n                float satIn        [[ name: \"Saturation\",min: 1.0,             max: 10.0,          init: 1.0,  step: 0.01]];\n                float modeIn       [[ name: \"Mode\",      min: 0,      \t\t   max: 3,       \t   init: 0,     text: \"LP2|HP2|BP2|BS2\"]];\n                float nlIn         [[ name: \"NonLinear\", min: 0,               max: 1,             init: 0,     text: \"Off|On\"]];\n            }\n\n            event frequencyIn (float v) { freq = v; recalc = true; }\n            event qualityIn (float v)    { q = v; recalc = true; } \n            event satIn (float v)  { sat = v; recalc = true; } \n            event modeIn (float v) { mode = int(v); recalc = true; }\n            event nlIn (float v)   { nonLinear = v > 0.5f; recalc = true; }\n\n            float freq = FILTER_FC_DEFAULT;\n            float q = 1.0;\n            float sat = 1.0;\n            int mode = Mode::lowpass2;\n            bool recalc = true;\n            bool nonLinear = false;\n\n            void main()\n            {\n                State s;\n                Coeffs c;\n                sem::setup(s, c);\n\n                loop\n                {\n                    if (recalc)\n                    {\n                        recalc = false;\n                        c.update (processor.frequency, freq, q);\n                    }\n\n                    loop (updateInterval)\n                    {\n                        out <- s.process (in, c, mode, nonLinear, sat, 0.5f); // TODO: auxControl\n                        advance();\n                    }\n                }\n            }\n        }\n    }\n\n    namespace kthreefive\n    {\n        /** http://www.willpirkle.com/Downloads/AN-5Korg35_V3.pdf */\n\n        namespace Mode\n        {\n            let lowpass  = 0;\n            let highpass = 1;\n        }\n\n        struct Coeffs\n        {\n            // LPF: LPF1+LPF2+HPF1\n            // HPF: HPF1+LPF1+HPF2\n            onepole::Coeffs mLPF1c;\n            onepole::Coeffs mLPF2c;\n            onepole::Coeffs mHPF1c;\n            onepole::Coeffs mHPF2c;\n\n            SampleType mK;\t\t// K, set with Q\n            SampleType mAlpha0;\t// our u scalar value\n        }\n\n        struct State\n        {\n            onepole::State mLPF1s;\n            onepole::State mLPF2s;\n            onepole::State mHPF1s;\n            onepole::State mHPF2s;\n        }\n\n        void setup (State& s, Coeffs& c)\n        {\n            c.mK = SampleType(0.01);\n            c.mAlpha0 = SampleType(0);\n            onepole::setup(s.mLPF1s, c.mLPF1c);\n            onepole::setup(s.mLPF2s, c.mLPF2c);\n            onepole::setup(s.mHPF1s, c.mHPF1c);\n            onepole::setup(s.mHPF2s, c.mHPF2c);\n        }\n\n        void update (Coeffs& c, float64 sampleRate, float64 freqHz, float64 q, int mode)\n        {\n            freqHz = clamp (freqHz, FILTER_FC_MIN, FILTER_FC_MAX);\n            q = clamp (q, 1.0, 10.0);\n\n            // set q\n            c.mK = SampleType((2.0 - 0.01) * (q - 1.0)/(10.0 - 1.0) + 0.01);\n\n            // prewarp for BZT\n            let wd = twoPi * freqHz;          \n            let T  = 1.0 / sampleRate;             \n            let wa = (2.0/ T) * tan( wd * T / 2.0); \n            let g  = SampleType(wa * T / 2.0);    \n\n            // G - the feedforward coeff in the One Pole\n            //     same for LPF, HPF\n            let G = SampleType( g / (1.0 + g));\n\n            // set alphas\n            c.mLPF1c.mAlpha = G;\n            c.mLPF2c.mAlpha = G;\n            c.mHPF1c.mAlpha = G;\n            c.mHPF2c.mAlpha = G;\n\n            // set mAlpha0 variable; same for LPF, HPF\n            c.mAlpha0 = SampleType (1.0 / (1.0 - c.mK * G + c.mK * G * G));\n\n            if (mode == Mode::lowpass)\n            {\n                c.mLPF2c.mBeta = SampleType((c.mK - c.mK * G ) / (1.0 + g));\n                c.mHPF1c.mBeta = SampleType(-1.0 / (1.0 + g));\n            }\n            else // HPF\n            {\n                c.mHPF2c.mBeta = SampleType(-1.0 * G / (1.0 + g));\n                c.mLPF1c.mBeta = SampleType(1.0 / (1.0 + g));\n            }\n        }\n\n        SampleType process (State& s, SampleType x, Coeffs& c, bool nonLinear, float saturation, int mode) \n        {\n            SampleType y = 0.0;\n\n            // two filters to implement\n            if (mode == Mode::lowpass)\n            {\n                // process input through LPF1\n                let y1 = s.mLPF1s.process (x, c.mLPF1c, Mode::lowpass);\n\n                // form S35\n                let S35 = s.mHPF1s.getFeedbackOutput (c.mHPF1c) + s.mLPF2s.getFeedbackOutput (c.mLPF2c); \n\n                // calculate u\n                SampleType u = c.mAlpha0 * (y1 + S35);\n\n                // NAIVE NLP\n                if(nonLinear)\n                {\n                    // Regular Version\n                    u = tanh (saturation * u);\n                }\n\n                // feed it to LPF2\n                y = c.mK * s.mLPF2s.process (u, c.mLPF2c, Mode::lowpass);\n                    \n                // feed y to HPF\n                s.mHPF1s.process (y, c.mHPF1c, Mode::highpass);\n            }\n            else // HPF\n            {\n                // process input through HPF1\n                let y1 = s.mHPF1s.process (x, c.mHPF1c, Mode::highpass);\n\n                // then: form feedback and feed forward values (read before write)\n                let S35 = s.mHPF2s.getFeedbackOutput (c.mHPF2c) + s.mLPF1s.getFeedbackOutput (c.mLPF1c);\n\n                // calculate u\n                let u = c.mAlpha0 * y1 + S35;\n\n                // form output\n                y = c.mK * u;\n\n                // NAIVE NLP\n                if(nonLinear)\n                    y = tanh (saturation * y);\n\n                // process y through feedback BPF\n                s.mLPF1s.process (s.mHPF2s.process (y, c.mHPF2c, Mode::highpass), c.mLPF1c, Mode::lowpass);\n            }\n\n            // auto-normalize\n            if (c.mK > 0.0)\n                y *= SampleType(1) / c.mK;\n\n            return y;\n        }\n\n        processor Processor\n        {\n            input stream SampleType in;\n            output stream SampleType out;\n\n            input event\n            {\n                float frequencyIn [[ name: \"Frequency\", min: FILTER_FC_MIN,   max: FILTER_FC_MAX, init: FILTER_FC_DEFAULT, unit: \"Hz\" ]]; \n                float qualityIn   [[ name: \"Q\",         min: 1.0,             max: 10.0,          init: 1.0,  step: 0.01]];\n                float satIn       [[ name: \"Saturation\",min: 1.0,             max: 10.0,          init: 1.0,  step: 0.01]];\n                float modeIn      [[ name: \"Mode\",      min: 0,      \t   \t  max: 1,       \t  init: 0,     text: \"Lowpass|Highpass\"]];\n                float nlIn        [[ name: \"NonLinear\", min: 0,               max: 1,             init: 0,     text: \"Off|On\"]];\n            }\n\n            event frequencyIn (float v) { freq = v; recalc = true; }\n            event qualityIn (float v)    { q = v; recalc = true; } \n            event satIn (float v)  { sat = v; recalc = true; } \n            event modeIn (float v) { mode = int(v); recalc = true; }\n            event nlIn (float v)   { nonLinear = v > 0.5f; recalc = true; }\n\n            float freq = FILTER_FC_DEFAULT;\n            float q = 1.0;\n            float sat = 1.0;\n            int mode = Mode::lowpass;\n            bool recalc = true;\n            bool nonLinear = false;\n\n            void main()\n            {\n                State s;\n                Coeffs c;\n                kthreefive::setup(s, c);\n\n                loop\n                {\n                    if (recalc)\n                    {\n                        recalc = false;\n                        c.update (processor.frequency, freq, q, mode);\n                    }\n\n                    loop (updateInterval)\n                    {\n                        out <- s.process (in, c, nonLinear, sat, mode);\n                        advance();\n                    }\n                }\n            }\n        }\n    }\n\n    namespace diode_ladder\n    {\n        /** http://www.willpirkle.com/Downloads/AN-6DiodeLadderFilter.pdf */\n\n        struct Coeffs\n        {\n            onepole::Coeffs mLPF1c;\n            onepole::Coeffs mLPF2c;\n            onepole::Coeffs mLPF3c;\n            onepole::Coeffs mLPF4c;\n\n            SampleType mK;      // K, set with Q\n            SampleType mGamma;  // needed for final calc and update\n            SampleType mSG1; \n            SampleType mSG2; \n            SampleType mSG3; \n            SampleType mSG4;\n        }\n\n        struct State\n        {\n            onepole::State mLPF1s;\n            onepole::State mLPF2s;\n            onepole::State mLPF3s;\n            onepole::State mLPF4s;\n        }\n\n        void setup (State& s, Coeffs& c)\n        {\n            // init\n            c.mK = 0;\t\t\n            c.mGamma = 0.0;\n\n            // feedback scalars\n            c.mSG1 = 0.0; \n            c.mSG2 = 0.0;  \n            c.mSG3 = 0.0;  \n            c.mSG4 = 0.0;  \n\n            onepole::setup(s.mLPF1s, c.mLPF1c);\n            onepole::setup(s.mLPF2s, c.mLPF2c);\n            onepole::setup(s.mLPF3s, c.mLPF3c);\n            onepole::setup(s.mLPF4s, c.mLPF4c);\n        }\n\n        void update (Coeffs& c, float64 sampleRate, float64 freqHz, float64 q)\n        {\n            freqHz = clamp (freqHz, FILTER_FC_MIN, FILTER_FC_MAX);\n            q = clamp (q, 1.0, 10.0);\n\n            // this maps dQControl = 1->10 to K = 0 -> 17\n            c.mK = SampleType (17.0 * (q - 1.0 ) / (10.0 - 1.0));\n\n            let wd = twoPi * freqHz;\n            let T  = 1.0 / sampleRate;\n            let wa = (2.0 / T ) * tan ( wd * T / 2.0); \n            let g  = SampleType(wa * T / 2.0);\n\n            // Big G's\n            SampleType G1, G2, G3, G4;\n\n            G4 = SampleType(0.5 * g / (1.0 + g));\n            G3 = SampleType(0.5 * g / (1.0 + g - 0.5 * g * G4));\n            G2 = SampleType(0.5 * g / (1.0 + g - 0.5 * g * G3));\n            G1 = SampleType(g / (1.0 + g - g * G2));\n\n            c.mGamma = G4 * G3 * G2 * G1;\n\n            c.mSG1 = G4 * G3 * G2; \n            c.mSG2 = G4 * G3; \n            c.mSG3 = G4; \n            c.mSG4 = SampleType(1); \n\n            // set alphas\n            let G = SampleType(g / (1.0 + g));\n\n            c.mLPF1c.mAlpha = G;\n            c.mLPF2c.mAlpha = G;\n            c.mLPF3c.mAlpha = G;\n            c.mLPF4c.mAlpha = G;\n\n            // set betas\n            c.mLPF1c.mBeta = SampleType(1.0 / (1.0 + g - g * G2));\n            c.mLPF2c.mBeta = SampleType(1.0 / (1.0 + g - 0.5 * g * G3));\n            c.mLPF3c.mBeta = SampleType(1.0 / (1.0 + g - 0.5 * g * G4));\n            c.mLPF4c.mBeta = SampleType(1.0 / (1.0 + g));\n\n            // set deltas\n            c.mLPF1c.mDelta = g;\n            c.mLPF2c.mDelta = SampleType(0.5 * g);\n            c.mLPF3c.mDelta = SampleType(0.5 * g);\n            c.mLPF4c.mDelta = SampleType(0);\n\n            c.mLPF1c.mGamma = SampleType(1.0 + G1 * G2);\n            c.mLPF2c.mGamma = SampleType(1.0 + G2 * G3);\n            c.mLPF3c.mGamma = SampleType(1.0 + G3 * G4);\n            c.mLPF4c.mGamma = SampleType(1);\n\n            // set epsilons\n            c.mLPF1c.mEpsilon = G2;\n            c.mLPF2c.mEpsilon = G3;\n            c.mLPF3c.mEpsilon = G4;\n            c.mLPF4c.mEpsilon = 0.0;\n\n            // set a0s\n            c.mLPF1c.ma0 = 1.0;\n            c.mLPF2c.ma0 = 0.5;\n            c.mLPF3c.ma0 = 0.5;\n            c.mLPF4c.ma0 = 0.5;\n        }\n\n        SampleType process (State& s, SampleType x, Coeffs& c, bool nonLinear, float saturation, float auxControl) \n        {\n            c.mLPF4c.mFeedback = 0.0;\n            c.mLPF3c.mFeedback = s.mLPF4s.getFeedbackOutput (c.mLPF4c);\n            c.mLPF2c.mFeedback = s.mLPF3s.getFeedbackOutput (c.mLPF3c);\n            c.mLPF1c.mFeedback = s.mLPF2s.getFeedbackOutput (c.mLPF2c);\n\n            // form input\n            let dSigma = c.mSG1 * s.mLPF1s.getFeedbackOutput (c.mLPF1c) + \n                         c.mSG2 * s.mLPF2s.getFeedbackOutput (c.mLPF2c) +\n                         c.mSG3 * s.mLPF3s.getFeedbackOutput (c.mLPF3c) +\n                         c.mSG4 * s.mLPF4s.getFeedbackOutput (c.mLPF4c);\n\n            // for passband gain compensation!\n            x *= SampleType(1) + auxControl * c.mK;\n\n            // form input\n            SampleType dU = (x - c.mK * dSigma) / SampleType(1.0 + c.mK * c.mGamma);\n\n            // ---NLP\n            if (nonLinear)\n                dU = tanh (saturation * dU);\n\n            let mode = onepole::Mode::lowpass;\n            // cascade of four filters\n            return s.mLPF4s.process ( s.mLPF3s.process ( s.mLPF2s.process ( \n                       s.mLPF1s.process (dU, c.mLPF1c, mode), c.mLPF2c, mode), c.mLPF3c, mode), c.mLPF4c, mode);\n        }\n\n        processor Processor\n        {\n            input stream SampleType in;\n            output stream SampleType out;\n\n            input event\n            {\n                float frequencyIn   [[ name: \"Frequency\", min: FILTER_FC_MIN,   max: FILTER_FC_MAX, init: FILTER_FC_DEFAULT, unit: \"Hz\" ]]; \n                float qualityIn     [[ name: \"Q\",         min: 1.0,             max: 10.0,          init: 1.0,  step: 0.01]];\n                float satIn         [[ name: \"Saturation\",min: 1.0,             max: 10.0,          init: 1.0,  step: 0.01]];\n                float nlIn          [[ name: \"NonLinear\", min: 0,               max: 1,             init: 0,     text: \"Off|On\"]];\n            }\n\n            event frequencyIn (float v) { freq = v; recalc = true; }\n            event qualityIn (float v)    { q = v; recalc = true; } \n            event satIn (float v)  { sat = v; recalc = true; } \n            event nlIn (float v)   { nonLinear = v > 0.5f; recalc = true; }\n\n            float freq = FILTER_FC_DEFAULT;\n            float q = 1.0;\n            float sat = 1.0;\n            bool recalc = true;\n            bool nonLinear = false;\n\n            void main()\n            {\n                State s;\n                Coeffs c;\n                diode_ladder::setup(s, c);\n\n                loop\n                {\n                    if (recalc)\n                    {\n                        recalc = false;\n                        c.update (processor.frequency, freq, q);\n                    }\n\n                    loop (updateInterval)\n                    {\n                        out <- s.process (in, c, nonLinear, sat, 0.0f); // TODO: gain comp\n                        advance();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Add the base frequency event and LFO stream output with depth in semitones\nprocessor FrequencyMapping\n{\n    input stream float32 lfoIn;\n    input event float32 frequencyIn    [[ name: \"Filter Base Frequency\", min: 10.0, max: 10000.0, init: 1000.0, unit: \"Hz\" ]];\n    input event float32 modDepthIn     [[ name: \"LFO Depth\",             min: 0.0,  max: 48.0,    init: 0.0,    unit: \"Semi\" ]];\n    output event float32 frequencyOut;\n\n    event frequencyIn (float v) { baseFreq = v; }\n    event modDepthIn (float v)  { modDepth = v; }\n\n    float baseFreq = 1000.0f;\n    float modDepth = 0.0f;\n\n    void main()\n    {\n        loop\n        {\n            frequencyOut <- baseFreq * pow (2.0f, (lfoIn * modDepth) / 12.0f); // TODO: pow() called at SR\n            advance();\n        }\n\n        return;\n    }\n}\n\ngraph FilterTester [[ main ]]\n{\n    // input stream float32 in;\n    output stream float32 out;\n\n    input source.shapeIn testSignalShape [[ name: \"Test Signal Shape\" ]];\n    input source.frequencyIn testSignalFrequency [[ name: \"Test Signal Frequency\", min: 10, max: 200, init: 50, unit: \"Hz\"]];\n    input gainStream.volume [[ name: \"Test Signal volume\"]];\n    input mapper.frequencyIn;\n    input filter.qualityIn [[ name: \"Filter Q\" ]];\n    input filter.modeIn    [[ name: \"Filter Mode\" ]];\n    input filter.nlIn      [[ name: \"Filter NonLinearites\" ]];\n    input filter.satIn     [[ name: \"Filter Saturation\" ]];\n\n    input lfo.rateHzIn     [[ name: \"LFO Rate (Hz)\",     min: 0.01,  max: 10.0,  init: 1.0,  step: 0.01,  unit: \"Hz\" ]];\n    input mapper.modDepthIn;\n    input lfo.shapeIn     [[ name: \"LFO Shape\" ]];\n\n    namespace os = std::oscillators;\n    node\n    {\n        source = os::PolyblepOscillator (float, os::Shape::sawtoothUp, 100.0);\n        // source = std::noise::Pink;\n\n        gainStream = std::levels::SmoothedGainParameter(0.1f);\n        gain = std::levels::DynamicGain (float);\n        lfo = os::LFO (os::Shape::sine, 100.0f, 1.0f, 0.0f); // you can lower the sample rate of the LFO here with e.g. \"/ 4\"\n        mapper = FrequencyMapping;\n\n        // filter = onepole::Processor;\n        // filter = pirkle_va::sem::Processor;\n        // filter = pirkle_va::moog_ladder::Processor;\n        filter = pirkle_va::kthreefive::Processor;\n        // filter = pirkle_va::diode_ladder::Processor;\n    }\n\n    connection \n    {\n        lfo.out -> mapper.lfoIn;\n        mapper.frequencyOut -> filter.frequencyIn;\n\n        gainStream.gain -> gain.gain;\n        source.out -> gain.in;\n        gain.out -> filter.in;\n        filter.out -> out;\n    }\n}",
			"id": "9WtBx0OumwFsvFrl",
			"mime": null
		}
	]
}