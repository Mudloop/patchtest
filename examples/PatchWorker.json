{
	"name": "PatchWorker",
	"manifest": "PatchWorker.cmajorpatch",
	"files": [
		{
			"name": "PatchWorker.cmajorpatch",
			"type": "file",
			"binary": false,
			"content": "{\n    \"CmajorVersion\":    1,\n    \"ID\":               \"dev.cmajor.examples.helloworld_patchworker\",\n    \"version\":          \"1.0\",\n    \"name\":             \"Hello World with PatchWorker\",\n    \"description\":      \"The classic audio Hello World, but showing how a javascript patch-worker can control the patch\",\n    \"manufacturer\":     \"Cmajor Software Ltd\",\n    \"category\":         \"generator\",\n    \"isInstrument\":     false,\n\n    \"source\":           \"PatchWorker.cmajor\",\n    \"worker\":           \"/worker.js\",\n    \"resources\":        \"/resources/*\"\n}\n",
			"id": "fwjY0tWKO2UNiS12",
			"mime": null
		},
		{
			"name": "PatchWorker.cmajor",
			"type": "file",
			"binary": false,
			"content": "/**\n    This demo shows how to write a javascript worker thread, which sends\n    events to and from the Cmajor code.\n\n    In this example, the cmajor processor below just waits for events to\n    be sent by the worker.js script to tell it what notes to play\n*/\nprocessor PlayNotesSentByJavascriptWorker\n{\n    output stream float audioOut;\n\n    // our javascript worker will send chunks of data here to give us the audio sample to play\n    input event AudioDataChunk sampleData;\n\n    // our javascript worker will send integers to this input to trigger notes\n    input event int noteToPlay;\n\n    struct AudioDataChunk\n    {\n        float[512] frames;\n        int sourceRoot, startPos, numFrames;\n        float sampleRate;\n    }\n\n    event sampleData (AudioDataChunk data)\n    {\n        sourceRate = data.sampleRate;\n        sourceRoot = data.sourceRoot;\n\n        for (int i = 0; i < data.numFrames; ++i)\n            if (data.startPos + i < audioData.size)\n                audioData.at (data.startPos + i) = data.frames.at(i);\n    }\n\n    // This event handler will receive events from the worker thread and\n    // in response will change the pitch being played\n    event noteToPlay (int pitch)\n    {\n        let frequency = pitch != 0 ? std::notes::noteToFrequency (pitch) : 0.0f;\n        indexDelta = (frequency / std::notes::noteToFrequency (sourceRoot)) * sourceRate * processor.period;\n        currentIndex = 0;\n    }\n\n    float[80000] audioData;\n    float sourceRate;\n    float64 currentIndex, indexDelta;\n    int sourceRoot;\n\n    void main()\n    {\n        loop\n        {\n            if (indexDelta != 0)\n            {\n                audioOut <- audioData.readLinearInterpolated (currentIndex);\n                currentIndex += indexDelta;\n\n                if (currentIndex >= audioData.size)\n                    indexDelta = 0;\n            }\n\n            advance();\n        }\n    }\n}\n",
			"id": "K3wDdpxuqoui8d5w",
			"mime": null
		},
		{
			"name": "worker.js",
			"type": "file",
			"binary": false,
			"content": "\n/*\n   Our manifest file declares this file as being the \"worker\" for our\n   patch, meaning that it will be executed when the patch is created.\n\n   Because everything in this script runs on the message thread, you\n   should just do any setup you need to register some timers and events\n   to respond to things that happen to the patch.\n\n   In this example, we just launch a set of timers which will send events\n   to our patch to trigger note playback.\n*/\n\n\nfunction sendAudioSampleDataToPatch (patchConnection, audioData)\n{\n    // Our Cmajor processor has an event to receive chunks of sample data\n    // which it builds up into a sample to play, so we'll dispatch a series\n    // of events with chunks of our sample in it..\n\n    // The audio data arrives as an array of per-frame arrays, which we need\n    // to interleave into a single mono array of floats, because that's\n    // what the processor is expecting.\n    const toMono = (frames) =>\n    {\n        let array = [];\n\n        for (let i = 0; i < frames.length; ++i)\n            array.push (frames[i][0]);\n\n        return array;\n    }\n\n    for (let i = 0; i < audioData.frames.length; i += 512)\n    {\n        const numFrames = Math.min (512, audioData.frames.length - i);\n\n        const chunk = {\n            frames: toMono (audioData.frames.slice (i, i + numFrames)),\n            startPos: i,\n            numFrames: numFrames,\n            sampleRate: audioData.sampleRate,\n            sourceRoot: 72\n        };\n\n        // send the event with a timeout of 1000ms so that it'll retry for\n        // a while if the patch's FIFO is busy\n        patchConnection.sendEventOrValue (\"sampleData\", chunk, -1, 1000);\n    }\n}\n\nfunction setTimersForNoteEvents (patchConnection)\n{\n    const notesToPlay = [\n        { pitch: 79,  length: 1 },\n        { pitch: 77,  length: 1 },\n        { pitch: 69,  length: 2 },\n        { pitch: 71,  length: 2 },\n        { pitch: 76,  length: 1 },\n        { pitch: 74,  length: 1 },\n        { pitch: 65,  length: 2 },\n        { pitch: 67,  length: 2 },\n        { pitch: 74,  length: 1 },\n        { pitch: 72,  length: 1 },\n        { pitch: 64,  length: 2 },\n        { pitch: 67,  length: 2 },\n        { pitch: 72,  length: 4 }\n    ];\n\n    // Then kick off some timers to trigger the notes of a little tune...\n    // Obviously this isn't going to be sample-accurate like it would\n    // be to trigger notes within a Cmajor processor, but it illustrates\n    // how you can send non-time-critical events from javascript..\n    let time = 10;\n\n    for (const note of notesToPlay)\n    {\n        setTimeout (() => { patchConnection.sendEventOrValue (\"noteToPlay\", note.pitch); }, time);\n        time += note.length * 150;\n    }\n\n    setTimeout (() => { patchConnection.sendEventOrValue (\"noteToPlay\", 0); }, time);\n}\n\nfunction playTuneWithSample (patchConnection, audioData)\n{\n    // First, give the patch the sample we want to play..\n    sendAudioSampleDataToPatch (patchConnection, audioData);\n\n    // ..then send it some notes to play..\n    setTimersForNoteEvents (patchConnection);\n}\n\n// The default function exported by this module will be called to run your\n// worker process.\n//\n// The PatchConnection argument is an object for your worker code to use to\n// control your patch. It's the same as the PatchConnection used in GUI code,\n// and provides a whole API for attaching listeners and exchanging data with\n// the patch.\nexport default function runWorker (patchConnection)\n{\n    // In this example, we'll start by asynchronously asking to read an\n    // audio file that's in our resource bundle. When this file data is\n    // ready, we'll pass it to our playTuneWithSample() function with\n    // which will send it to our cmajor processor\n    patchConnection.readResourceAsAudioData (\"/resources/piano_72.ogg\")\n        .then (audioData => playTuneWithSample (patchConnection, audioData),\n               error => console.log (\"Failed to read audio file: \" + error));\n}\n",
			"id": "8z7DhzCWXZNgrrRn",
			"mime": "text/javascript"
		},
		{
			"name": "resources",
			"type": "directory",
			"children": [
				{
					"name": "piano_72.ogg",
					"type": "file",
					"binary": true,
					"content": "",
					"id": "CjE251ANhOm0UhM6",
					"mime": "audio/ogg"
				}
			],
			"id": "gXcXEexcapqN6oM2"
		}
	]
}