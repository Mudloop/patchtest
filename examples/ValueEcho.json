{
	"name": "ValueEcho",
	"manifest": "ValueEcho.cmajorpatch",
	"files": [
		{
			"name": "ValueEcho.cmajor",
			"type": "file",
			"binary": false,
			"content": "//\n//     ,ad888ba,                              88\n//    d8\"'    \"8b\n//   d8            88,dba,,adba,   ,aPP8A.A8  88     (C)2024 Cmajor Software Ltd\n//   Y8,           88    88    88  88     88  88\n//    Y8a.   .a8P  88    88    88  88,   ,88  88     https://cmajor.dev\n//     '\"Y888Y\"'   88    88    88  '\"8bbP\"Y8  88\n//                                           ,88\n//                                        888P\"\n//\n//  This code may be used under either a GPLv3 or commercial\n//  license: see LICENSE.md for more details.\n\n\n// Simple example which converts an incoming value to an output event for logging\n\nprocessor ValueEcho\n{\n    input value float inValue [[ name: \"Value In\",  min: 0, max: 1.0, init:  0.0 ]];\n    output event float outEvent;\n\n    void main()\n    {\n        int count = 0;\n\n        loop\n        {\n            if (++count >= processor.frequency / 25)\n            {\n                outEvent <- inValue;\n                count = 0;\n            }\n\n            advance();\n        }\n    }\n}\n",
			"id": "DiJZgfG1AJtmlTV2",
			"mime": null
		},
		{
			"name": "ValueEcho.cmajorpatch",
			"type": "file",
			"binary": false,
			"content": "{\n    \"CmajorVersion\":    1,\n    \"ID\":               \"dev.cmajor.examples.ValueEcho\",\n    \"version\":          \"1.0\",\n    \"name\":             \"Value\",\n    \"description\":      \"Simple test code which accepts an incoming value and outputs it for logging\",\n    \"category\":         \"fx\",\n    \"manufacturer\":     \"Cmajor Software Ltd\",\n    \"isInstrument\":     false,\n\n    \"source\":           \"ValueEcho.cmajor\"\n}\n",
			"id": "2kSXo8IsoCVDQBWM",
			"mime": null
		}
	]
}